
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00802000  00001f36  00001fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000142  0080202c  0080202c  00001ff6  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c26  00000000  00000000  00002156  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000069f4  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011de  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020a1  00000000  00000000  0000a94e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  0000c9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003ee1  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001274  00000000  00000000  00011031  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000122a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
       8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
       c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      50:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_20>
      54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      c4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_49>
      c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      cc:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_51>
      d0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_52>
      d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
      fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     110:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_68>
     114:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_69>
     118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     11c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_71>
     120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     134:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_77>
     138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
     1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e6 e3       	ldi	r30, 0x36	; 54
     214:	ff e1       	ldi	r31, 0x1F	; 31
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ac 32       	cpi	r26, 0x2C	; 44
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	ac e2       	ldi	r26, 0x2C	; 44
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	ae 36       	cpi	r26, 0x6E	; 110
     234:	b1 07       	cpc	r27, r17
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 73 05 	call	0xae6	; 0xae6 <main>
     23c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <_exit>

00000240 <__bad_interrupt>:
     240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <setDutyCycles>:
}

//set the duty cycle for each output channel
//duty cycle is expressed as a byte value
//0 is fully off, 255 is fully on
void setDutyCycles(uint8_t _dutyA, uint8_t _dutyB, uint8_t _dutyC) {
     244:	2f 92       	push	r2
     246:	3f 92       	push	r3
     248:	4f 92       	push	r4
     24a:	5f 92       	push	r5
     24c:	6f 92       	push	r6
     24e:	7f 92       	push	r7
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	e6 2e       	mov	r14, r22
     266:	a4 2e       	mov	r10, r20
	//save the duty settings as global variables (for debugging)
	dutyA=_dutyA; dutyB=_dutyB; dutyC=_dutyC;
     268:	80 93 3d 20 	sts	0x203D, r24
     26c:	60 93 5f 20 	sts	0x205F, r22
     270:	40 93 62 20 	sts	0x2062, r20

	//calculate the number of ticks given the duty cycle
	uint32_t prodA = (uint32_t) _dutyA * phasePeriod;
     274:	40 90 30 20 	lds	r4, 0x2030
     278:	50 90 31 20 	lds	r5, 0x2031
     27c:	32 01       	movw	r6, r4
     27e:	88 24       	eor	r8, r8
     280:	99 24       	eor	r9, r9
	uint16_t ticksA= phasePeriod - (prodA/255);
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	a4 01       	movw	r20, r8
     28e:	93 01       	movw	r18, r6
     290:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     294:	2f ef       	ldi	r18, 0xFF	; 255
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>
     2a0:	c2 01       	movw	r24, r4
     2a2:	82 1b       	sub	r24, r18
     2a4:	93 0b       	sbc	r25, r19

	//set the timer comparator value
	//the comparator output pins for the phase timer will be the duty cycle output
	TC_SetCompareA(&PHASE_timer, ticksA);
     2a6:	21 2c       	mov	r2, r1
     2a8:	2a e0       	ldi	r18, 0x0A	; 10
     2aa:	32 2e       	mov	r3, r18
     2ac:	f1 01       	movw	r30, r2
     2ae:	80 af       	std	Z+56, r24	; 0x38
     2b0:	91 af       	std	Z+57, r25	; 0x39

	uint32_t prodB = (uint32_t)_dutyB * phasePeriod;
	uint16_t ticksB=phasePeriod - (prodB/255);
     2b2:	ff 24       	eor	r15, r15
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	c8 01       	movw	r24, r16
     2ba:	b7 01       	movw	r22, r14
     2bc:	a4 01       	movw	r20, r8
     2be:	93 01       	movw	r18, r6
     2c0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     2c4:	2f ef       	ldi	r18, 0xFF	; 255
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>
     2d0:	c2 01       	movw	r24, r4
     2d2:	82 1b       	sub	r24, r18
     2d4:	93 0b       	sbc	r25, r19
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC_SetCompareD(&PHASE_timer, ticksB);
     2d6:	80 93 3e 0a 	sts	0x0A3E, r24
     2da:	90 93 3f 0a 	sts	0x0A3F, r25

	uint32_t prodC = (uint32_t)_dutyC * phasePeriod;
	uint16_t ticksC=phasePeriod - (prodC/255);
     2de:	bb 24       	eor	r11, r11
     2e0:	cc 24       	eor	r12, r12
     2e2:	dd 24       	eor	r13, r13
     2e4:	c6 01       	movw	r24, r12
     2e6:	b5 01       	movw	r22, r10
     2e8:	a4 01       	movw	r20, r8
     2ea:	93 01       	movw	r18, r6
     2ec:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>
     2fc:	42 1a       	sub	r4, r18
     2fe:	53 0a       	sbc	r5, r19
	TC_SetCompareC(&PHASE_timer, ticksC);
     300:	f1 01       	movw	r30, r2
     302:	44 ae       	std	Z+60, r4	; 0x3c
     304:	55 ae       	std	Z+61, r5	; 0x3d
	
//	debug1=(uint16_t) (prodA/255);
//	debug2=ticksA;
}
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	7f 90       	pop	r7
     31c:	6f 90       	pop	r6
     31e:	5f 90       	pop	r5
     320:	4f 90       	pop	r4
     322:	3f 90       	pop	r3
     324:	2f 90       	pop	r2
     326:	08 95       	ret

00000328 <__vector_77>:
		nop();
}

//the UI timer interrupt
ISR(UI_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	08 b6       	in	r0, 0x38	; 56
     332:	0f 92       	push	r0
     334:	09 b6       	in	r0, 0x39	; 57
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	18 be       	out	0x38, r1	; 56
     33c:	19 be       	out	0x39, r1	; 57
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
	msClock+=ms_UI_interval;
     346:	80 91 2c 20 	lds	r24, 0x202C
     34a:	90 91 2d 20 	lds	r25, 0x202D
     34e:	a0 91 2e 20 	lds	r26, 0x202E
     352:	b0 91 2f 20 	lds	r27, 0x202F
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	a1 1d       	adc	r26, r1
     35a:	b1 1d       	adc	r27, r1
     35c:	80 93 2c 20 	sts	0x202C, r24
     360:	90 93 2d 20 	sts	0x202D, r25
     364:	a0 93 2e 20 	sts	0x202E, r26
     368:	b0 93 2f 20 	sts	0x202F, r27
}
     36c:	bf 91       	pop	r27
     36e:	af 91       	pop	r26
     370:	9f 91       	pop	r25
     372:	8f 91       	pop	r24
     374:	0f 90       	pop	r0
     376:	09 be       	out	0x39, r0	; 57
     378:	0f 90       	pop	r0
     37a:	08 be       	out	0x38, r0	; 56
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <__vector_49>:

}

//the interrupts for the comparators - when a comparator is triggered, turn on the cooresponding pin
//these could possibly be optimized by making them ISR_NAKED and doing the setup by hand
ISR(TCE0_CCA_vect) {
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	08 b6       	in	r0, 0x38	; 56
     390:	0f 92       	push	r0
     392:	0b b6       	in	r0, 0x3b	; 59
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	18 be       	out	0x38, r1	; 56
     39a:	1b be       	out	0x3b, r1	; 59
     39c:	8f 93       	push	r24
     39e:	ef 93       	push	r30
     3a0:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN0_bm;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	e0 e8       	ldi	r30, 0x80	; 128
     3a6:	f6 e0       	ldi	r31, 0x06	; 6
     3a8:	85 83       	std	Z+5, r24	; 0x05
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0b be       	out	0x3b, r0	; 59
     3b4:	0f 90       	pop	r0
     3b6:	08 be       	out	0x38, r0	; 56
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <__vector_52>:
ISR(TCE0_CCD_vect) {
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	08 b6       	in	r0, 0x38	; 56
     3cc:	0f 92       	push	r0
     3ce:	0b b6       	in	r0, 0x3b	; 59
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	18 be       	out	0x38, r1	; 56
     3d6:	1b be       	out	0x3b, r1	; 59
     3d8:	8f 93       	push	r24
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN1_bm;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	e0 e8       	ldi	r30, 0x80	; 128
     3e2:	f6 e0       	ldi	r31, 0x06	; 6
     3e4:	85 83       	std	Z+5, r24	; 0x05
}
     3e6:	ff 91       	pop	r31
     3e8:	ef 91       	pop	r30
     3ea:	8f 91       	pop	r24
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	08 be       	out	0x38, r0	; 56
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <__vector_51>:
ISR(TCE0_CCC_vect) {
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	08 b6       	in	r0, 0x38	; 56
     408:	0f 92       	push	r0
     40a:	0b b6       	in	r0, 0x3b	; 59
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	18 be       	out	0x38, r1	; 56
     412:	1b be       	out	0x3b, r1	; 59
     414:	8f 93       	push	r24
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN2_bm;
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	e0 e8       	ldi	r30, 0x80	; 128
     41e:	f6 e0       	ldi	r31, 0x06	; 6
     420:	85 83       	std	Z+5, r24	; 0x05
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	8f 91       	pop	r24
     428:	0f 90       	pop	r0
     42a:	0b be       	out	0x3b, r0	; 59
     42c:	0f 90       	pop	r0
     42e:	08 be       	out	0x38, r0	; 56
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <initializeDAC>:
}


//enable DACB and set it to output whenever the sample event (event 0) occurs
void initializeDAC() {
	DAC_SingleChannel_Enable(&DACB, DAC_REFSEL_AVCC_gc, false);
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	68 e0       	ldi	r22, 0x08	; 8
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DAC_SingleChannel_Enable>
	DAC_EventAction_Set( &DACB, DAC_CH0TRIG_bm, 0 );
     446:	80 e2       	ldi	r24, 0x20	; 32
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DAC_EventAction_Set>
}
     452:	08 95       	ret

00000454 <initializeCaptureTimer>:


//set up a sample capture timer and enable its interrupt:
void initializeCaptureTimer() {
	//set the mode
	TC1_ConfigWGM( &CAPTURE_timer, TC_WGMODE_NORMAL_gc);
     454:	80 e4       	ldi	r24, 0x40	; 64
     456:	98 e0       	ldi	r25, 0x08	; 8
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	0e 94 26 08 	call	0x104c	; 0x104c <TC1_ConfigWGM>
	//set the clock source to event 4
	//event 4 will be triggered every time a sample is captured and filtered
	TC1_ConfigClockSource(&CAPTURE_timer, TC_CLKSEL_EVCH4_gc);
     45e:	80 e4       	ldi	r24, 0x40	; 64
     460:	98 e0       	ldi	r25, 0x08	; 8
     462:	6c e0       	ldi	r22, 0x0C	; 12
     464:	0e 94 1a 08 	call	0x1034	; 0x1034 <TC1_ConfigClockSource>
	//the timer overflows every BINSIZE captured samples
	TC_SetPeriod( &CAPTURE_timer, CAPTURE_binsize);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	e0 e4       	ldi	r30, 0x40	; 64
     46e:	f8 e0       	ldi	r31, 0x08	; 8
     470:	86 a3       	std	Z+38, r24	; 0x26
     472:	97 a3       	std	Z+39, r25	; 0x27
	//set the interupt
	TC1_SetOverflowIntLevel( &CAPTURE_timer, TC_OVFINTLVL_LO_gc );
     474:	80 e4       	ldi	r24, 0x40	; 64
     476:	98 e0       	ldi	r25, 0x08	; 8
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TC1_SetOverflowIntLevel>
}
     47e:	08 95       	ret

00000480 <initializeSampleTimer>:
}

//set up a sample timer, let it be the source for event 0
void initializeSampleTimer() {
	//set the mode
	TC1_ConfigWGM( &SAMPLE_timer, TC_WGMODE_NORMAL_gc);
     480:	80 e4       	ldi	r24, 0x40	; 64
     482:	99 e0       	ldi	r25, 0x09	; 9
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	0e 94 26 08 	call	0x104c	; 0x104c <TC1_ConfigWGM>
	//set the clock source
	TC1_ConfigClockSource(&SAMPLE_timer, TC_CLKSEL_DIV1_gc);
     48a:	80 e4       	ldi	r24, 0x40	; 64
     48c:	99 e0       	ldi	r25, 0x09	; 9
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	0e 94 1a 08 	call	0x1034	; 0x1034 <TC1_ConfigClockSource>
	//set the wave period (32MHz / 44.1KHz hZ = 725.62)
	TC_SetPeriod( &SAMPLE_timer, 32000000/SAMPLE_rate);
     494:	8d e5       	ldi	r24, 0x5D	; 93
     496:	9b e0       	ldi	r25, 0x0B	; 11
     498:	e0 e4       	ldi	r30, 0x40	; 64
     49a:	f9 e0       	ldi	r31, 0x09	; 9
     49c:	86 a3       	std	Z+38, r24	; 0x26
     49e:	97 a3       	std	Z+39, r25	; 0x27
			//TC1_ConfigClockSource(&SAMPLE_timer, TC_CLKSEL_DIV256_gc);
			///TC_SetPeriod( &SAMPLE_timer, 65535/8);


	//send overflow events as SAMPLE
	EVSYS_SetEventSource(0, SAMPLE_evsrc);
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	68 ed       	ldi	r22, 0xD8	; 216
     4a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <EVSYS_SetEventSource>
}
     4a8:	08 95       	ret

000004aa <initializeADC>:
	AC_Enable(&ACA, ANALOG_COMPARATOR0, false);
	AC_Enable(&ACA, ANALOG_COMPARATOR1, false);
}

//initialize a one-channel analog to digital converter (ADC)
void initializeADC() {
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
	/* Move stored calibration values to ADC A. */
	ADC_CalibrationValues_Load(&ADCA);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 2c 09 	call	0x1258	; 0x1258 <ADC_CalibrationValues_Load>
			(we only have half precision on the ADC since the input is single ended)
			(maybe this could be corrected by using a balanced input topology)
	*/

	/* Set up ADC A to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Signed, ADC_RESOLUTION_12BIT_gc);
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	12 e0       	ldi	r17, 0x02	; 2
     4be:	f8 01       	movw	r30, r16
     4c0:	81 81       	ldd	r24, Z+1	; 0x01
     4c2:	89 7e       	andi	r24, 0xE9	; 233
     4c4:	80 61       	ori	r24, 0x10	; 16
     4c6:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV64_gc);
     4c8:	84 81       	ldd	r24, Z+4	; 0x04
     4ca:	88 7f       	andi	r24, 0xF8	; 248
     4cc:	84 60       	ori	r24, 0x04	; 4
     4ce:	84 83       	std	Z+4, r24	; 0x04

	/* Set referance voltage on ADC A to be 1 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_AREFA_gc);
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
     4d2:	8f 7c       	andi	r24, 0xCF	; 207
     4d4:	80 62       	ori	r24, 0x20	; 32
     4d6:	82 83       	std	Z+2, r24	; 0x02

   	/* Get offset value for ADC A. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     4d8:	30 e2       	ldi	r19, 0x20	; 32
     4da:	e3 2e       	mov	r14, r19
     4dc:	32 e0       	ldi	r19, 0x02	; 2
     4de:	f3 2e       	mov	r15, r19
     4e0:	f7 01       	movw	r30, r14
     4e2:	80 81       	ld	r24, Z
     4e4:	80 7e       	andi	r24, 0xE0	; 224
     4e6:	8f 60       	ori	r24, 0x0F	; 15
     4e8:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFFWGAIN_gc,
	                                 ADC_CH_GAIN_8X_gc);
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_AREF_DIV_2_MUXPOS_pin, ADC_AREF_DIV_2_MUXNEG_pin);
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     4ee:	f8 01       	movw	r30, r16
     4f0:	80 81       	ld	r24, Z
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 83       	st	Z, r24

	/* Wait until common mode voltage is stable. This is configured to wait the minimum amount of time at 32MHz. */
	ADC_Wait_32MHz(&ADCA);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0e 94 85 09 	call	0x130a	; 0x130a <ADC_Wait_32MHz>
 	ADC_offset = ADC_Offset_Get_Signed(&ADCA, &ADCA.CH0, true);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	72 e0       	ldi	r23, 0x02	; 2
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	0e 94 b8 09 	call	0x1370	; 0x1370 <ADC_Offset_Get_Signed>
     50c:	99 27       	eor	r25, r25
     50e:	87 fd       	sbrc	r24, 7
     510:	90 95       	com	r25
     512:	80 93 38 20 	sts	0x2038, r24
     516:	90 93 39 20 	sts	0x2039, r25
    ADC_Disable(&ADCA);
     51a:	f8 01       	movw	r30, r16
     51c:	80 81       	ld	r24, Z
     51e:	8e 7f       	andi	r24, 0xFE	; 254
     520:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFFWGAIN_gc, 
									 ADC_gain);
	*/

	// Setup channel 0 to have differential input, with no gain
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     522:	f7 01       	movw	r30, r14
     524:	80 81       	ld	r24, Z
     526:	80 7e       	andi	r24, 0xE0	; 224
     528:	82 60       	ori	r24, 0x02	; 2
     52a:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFF_gc, 
									 ADC_DRIVER_CH_GAIN_NONE);

	// Set input to the channel 0 in ADC A to be PIN 4. The negative input is the AREF / 2 reference pin
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN4_gc, ADC_AREF_DIV_2_MUXNEG_pin);
     52c:	81 e2       	ldi	r24, 0x21	; 33
     52e:	81 83       	std	Z+1, r24	; 0x01


	//!!! Here we should set up the other three ADC channels

	/* Setup only sweep channel 0.*/
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
     530:	f8 01       	movw	r30, r16
     532:	83 81       	ldd	r24, Z+3	; 0x03
     534:	8f 73       	andi	r24, 0x3F	; 63
     536:	83 83       	std	Z+3, r24	; 0x03

	/* Enable medium level interrupts on ADCA channel 0, on conversion complete. */
	ADC_Ch_Interrupts_Config(&ADCA.CH0, ADC_CH_INTMODE_COMPLETE_gc, ADC_CH_INTLVL_MED_gc);
     538:	f7 01       	movw	r30, r14
     53a:	82 81       	ldd	r24, Z+2	; 0x02
     53c:	80 7f       	andi	r24, 0xF0	; 240
     53e:	82 60       	ori	r24, 0x02	; 2
     540:	82 83       	std	Z+2, r24	; 0x02

	/* Perform automatic sample conversion on ADCA channel 0 when event 0 occurs. */
	ADC_Events_Config(&ADCA, ADC_EVSEL_0123_gc, ADC_EVACT_CH0_gc);
     542:	f8 01       	movw	r30, r16
     544:	83 81       	ldd	r24, Z+3	; 0x03
     546:	80 7c       	andi	r24, 0xC0	; 192
     548:	81 60       	ori	r24, 0x01	; 1
     54a:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC A with VCC reference and signed conversion.*/
	ADC_Enable(&ADCA);
     54c:	80 81       	ld	r24, Z
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	80 83       	st	Z, r24

	/* Wait until common mode voltage is stable. This is configured to wait the minimum amount of time at 32MHz. */
	ADC_Wait_32MHz(&ADCA);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 85 09 	call	0x130a	; 0x130a <ADC_Wait_32MHz>
}
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	08 95       	ret

00000564 <initializePhaseComparator>:
}

//sets up rising and falling edge phase comparators
void initializePhaseComparator() {
	//configure the analog comparator (AC) voltage scaler
	AC_ConfigVoltageScaler(&ACA, 63); 
     564:	80 e8       	ldi	r24, 0x80	; 128
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	6f e3       	ldi	r22, 0x3F	; 63
     56a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <AC_ConfigVoltageScaler>
				//the voltage scaler was set to 1, once upon a time
				
	//configure the AC inputs
	//AC 0 is the rising edge and AC 1 is the falling edge
	AC_ConfigMUX(&ACA, ANALOG_COMPARATOR0, AC_pin, AC_MUXNEG_SCALER_gc);
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	93 e0       	ldi	r25, 0x03	; 3
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	40 e1       	ldi	r20, 0x10	; 16
     576:	27 e0       	ldi	r18, 0x07	; 7
     578:	0e 94 db 08 	call	0x11b6	; 0x11b6 <AC_ConfigMUX>
	AC_ConfigMUX(&ACA, ANALOG_COMPARATOR1, AC_pin, AC_MUXNEG_SCALER_gc);
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	40 e1       	ldi	r20, 0x10	; 16
     584:	27 e0       	ldi	r18, 0x07	; 7
     586:	0e 94 db 08 	call	0x11b6	; 0x11b6 <AC_ConfigMUX>

	//configure the interrupts
	AC_ConfigInterrupt(&ACA, ANALOG_COMPARATOR0, AC_INTMODE_RISING_gc, AC_INTLVL_HI_gc);
     58a:	80 e8       	ldi	r24, 0x80	; 128
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	40 ec       	ldi	r20, 0xC0	; 192
     592:	20 e3       	ldi	r18, 0x30	; 48
     594:	0e 94 c0 08 	call	0x1180	; 0x1180 <AC_ConfigInterrupt>
	AC_ConfigInterrupt(&ACA, ANALOG_COMPARATOR1, AC_INTMODE_FALLING_gc, AC_INTLVL_HI_gc);
     598:	80 e8       	ldi	r24, 0x80	; 128
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	40 e8       	ldi	r20, 0x80	; 128
     5a0:	20 e3       	ldi	r18, 0x30	; 48
     5a2:	0e 94 c0 08 	call	0x1180	; 0x1180 <AC_ConfigInterrupt>

	//configure the hysteresis
	AC_ConfigHysteresis(&ACA, ANALOG_COMPARATOR0, AC_HYSMODE_SMALL_gc); 
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	42 e0       	ldi	r20, 0x02	; 2
     5ae:	0e 94 ce 08 	call	0x119c	; 0x119c <AC_ConfigHysteresis>
	AC_ConfigHysteresis(&ACA, ANALOG_COMPARATOR1, AC_HYSMODE_SMALL_gc); 
     5b2:	80 e8       	ldi	r24, 0x80	; 128
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	42 e0       	ldi	r20, 0x02	; 2
     5ba:	0e 94 ce 08 	call	0x119c	; 0x119c <AC_ConfigHysteresis>


	//enable the ACs
	//should the high-speed parameter (3rd argument) be true?
	AC_Enable(&ACA, ANALOG_COMPARATOR0, false);
     5be:	80 e8       	ldi	r24, 0x80	; 128
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	0e 94 9e 08 	call	0x113c	; 0x113c <AC_Enable>
	AC_Enable(&ACA, ANALOG_COMPARATOR1, false);
     5ca:	80 e8       	ldi	r24, 0x80	; 128
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	0e 94 9e 08 	call	0x113c	; 0x113c <AC_Enable>
}
     5d6:	08 95       	ret

000005d8 <__vector_69>:
}

//the analog comparator falling edge interrupt
//note this is mislabeled as "COMP1_vect" in the ATXMEGA datasheet!
ISR(ACA_AC1_vect)
{
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	08 b6       	in	r0, 0x38	; 56
     5e2:	0f 92       	push	r0
     5e4:	09 b6       	in	r0, 0x39	; 57
     5e6:	0f 92       	push	r0
     5e8:	0b b6       	in	r0, 0x3b	; 59
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	18 be       	out	0x38, r1	; 56
     5f0:	19 be       	out	0x39, r1	; 57
     5f2:	1b be       	out	0x3b, r1	; 59
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
	//turn off phase timer
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_OFF_gc);   
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	9a e0       	ldi	r25, 0x0A	; 10
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	0e 94 14 08 	call	0x1028	; 0x1028 <TC0_ConfigClockSource>

	//reset the output pins
	PHASE_port.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
     616:	87 e0       	ldi	r24, 0x07	; 7
     618:	e0 e8       	ldi	r30, 0x80	; 128
     61a:	f6 e0       	ldi	r31, 0x06	; 6
     61c:	86 83       	std	Z+6, r24	; 0x06

	//force update of compare values
	//this would normally happen when the counter overflows
	TC_ForceUpdate(&PHASE_timer);
     61e:	e0 e0       	ldi	r30, 0x00	; 0
     620:	fa e0       	ldi	r31, 0x0A	; 10
     622:	84 e0       	ldi	r24, 0x04	; 4
     624:	81 87       	std	Z+9, r24	; 0x09

	//read the counter
	phasePeriodLast=PHASE_timer.CNT;
     626:	80 a1       	ldd	r24, Z+32	; 0x20
     628:	91 a1       	ldd	r25, Z+33	; 0x21
     62a:	80 93 32 20 	sts	0x2032, r24
     62e:	90 93 33 20 	sts	0x2033, r25

	//set the counter to 0 and clear the comparators
	TC_Restart(&PHASE_timer);
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	81 87       	std	Z+9, r24	; 0x09

	//flag that a zero-cross falling edge event has occured
	fPhaseEnd=true;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 35 20 	sts	0x2035, r24

}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0b be       	out	0x3b, r0	; 59
     658:	0f 90       	pop	r0
     65a:	09 be       	out	0x39, r0	; 57
     65c:	0f 90       	pop	r0
     65e:	08 be       	out	0x38, r0	; 56
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <__vector_68>:


//the analog comparator rising edge interrupt
//note this is mislabeled as "COMP0_vect" in the ATXMEGA datasheet!
ISR(ACA_AC0_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	08 b6       	in	r0, 0x38	; 56
     674:	0f 92       	push	r0
     676:	09 b6       	in	r0, 0x39	; 57
     678:	0f 92       	push	r0
     67a:	0b b6       	in	r0, 0x3b	; 59
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	18 be       	out	0x38, r1	; 56
     682:	19 be       	out	0x39, r1	; 57
     684:	1b be       	out	0x3b, r1	; 59
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
	//turn on the counter
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_DIV64_gc);   
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	9a e0       	ldi	r25, 0x0A	; 10
     6a2:	65 e0       	ldi	r22, 0x05	; 5
     6a4:	0e 94 14 08 	call	0x1028	; 0x1028 <TC0_ConfigClockSource>

	//flag that a zero-cross rising edge event has occured
	fPhaseBegin=true;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 34 20 	sts	0x2034, r24

}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	09 be       	out	0x39, r0	; 57
     6ce:	0f 90       	pop	r0
     6d0:	08 be       	out	0x38, r0	; 56
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <initializePhaseTimer>:

//set up a timer for the ac phase / zero-crossing detector
void initializePhaseTimer() {

	//set the timer to normal mode (no waveform generation)
	TC0_ConfigWGM(&PHASE_timer, TC_WGMODE_NORMAL_gc);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	9a e0       	ldi	r25, 0x0A	; 10
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	0e 94 20 08 	call	0x1040	; 0x1040 <TC0_ConfigWGM>
		//for automatic comparator pin output, we set the mode to single-slope waveform generation
		//this puts the results of the enabled comparator channels on the coresponding output pins
		//TC0_ConfigWGM(&PHASE_timer, TC_WGMODE_SS_gc);

	//set the clock OFF
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_OFF_gc);   
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	9a e0       	ldi	r25, 0x0A	; 10
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	0e 94 14 08 	call	0x1028	; 0x1028 <TC0_ConfigClockSource>
	//later we will configure this clock to a prescale of 64
	//this gives a resolution of 500 ticks per ms, ie. 2us period
	//we should find about 4167 ticks per half cycle at 60 Hz

	//the comparator pins must be enabled as output
	PHASE_port.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm ; 
     6f0:	e0 e8       	ldi	r30, 0x80	; 128
     6f2:	f6 e0       	ldi	r31, 0x06	; 6
     6f4:	87 e0       	ldi	r24, 0x07	; 7
     6f6:	81 83       	std	Z+1, r24	; 0x01
	PHASE_port.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm ; 
     6f8:	86 83       	std	Z+6, r24	; 0x06

	//the comparator channels A, B and C will implement the duty cycle for the three output channels
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC0_EnableCCChannels(&PHASE_timer, (TC0_CCAEN_bm | TC0_CCDEN_bm | TC0_CCCEN_bm));
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	9a e0       	ldi	r25, 0x0A	; 10
     6fe:	60 ed       	ldi	r22, 0xD0	; 208
     700:	0e 94 3a 08 	call	0x1074	; 0x1074 <TC0_EnableCCChannels>

	TC0_SetCCAIntLevel(&PHASE_timer, TC_CCAINTLVL_HI_gc);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	9a e0       	ldi	r25, 0x0A	; 10
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <TC0_SetCCAIntLevel>
	TC0_SetCCDIntLevel(&PHASE_timer, TC_CCDINTLVL_HI_gc);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	9a e0       	ldi	r25, 0x0A	; 10
     712:	60 ec       	ldi	r22, 0xC0	; 192
     714:	0e 94 8a 08 	call	0x1114	; 0x1114 <TC0_SetCCDIntLevel>
	TC0_SetCCCIntLevel(&PHASE_timer, TC_CCCINTLVL_HI_gc);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	9a e0       	ldi	r25, 0x0A	; 10
     71c:	60 e3       	ldi	r22, 0x30	; 48
     71e:	0e 94 84 08 	call	0x1108	; 0x1108 <TC0_SetCCCIntLevel>
		//PHASE_port.PIN0CTRL = PORT_INVEN_bm;
		//PHASE_port.PIN1CTRL = PORT_INVEN_bm;
		//PHASE_port.PIN2CTRL = PORT_INVEN_bm;


}
     722:	08 95       	ret

00000724 <initializeUITimer>:
}

//set up a ui timer and enable its interrupt:
void initializeUITimer() {
	//set the mode
	TC0_ConfigWGM(&UI_timer, TC_WGMODE_NORMAL_gc);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	0e 94 20 08 	call	0x1040	; 0x1040 <TC0_ConfigWGM>
	//set the clock source (prescale by 128)
	TC0_ConfigClockSource(&UI_timer, TC_CLKSEL_DIV256_gc);   
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	99 e0       	ldi	r25, 0x09	; 9
     732:	66 e0       	ldi	r22, 0x06	; 6
     734:	0e 94 14 08 	call	0x1028	; 0x1028 <TC0_ConfigClockSource>
	//set the wave period (32 MHz / 256 = 125000 ticks / sec = 125 tics / ms)
	TC_SetPeriod( &UI_timer, 125*ms_UI_interval);
     738:	8d e7       	ldi	r24, 0x7D	; 125
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	f9 e0       	ldi	r31, 0x09	; 9
     740:	86 a3       	std	Z+38, r24	; 0x26
     742:	97 a3       	std	Z+39, r25	; 0x27
	//set the interupt
	TC0_SetOverflowIntLevel(&UI_timer, TC_OVFINTLVL_MED_gc);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	99 e0       	ldi	r25, 0x09	; 9
     748:	62 e0       	ldi	r22, 0x02	; 2
     74a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <TC0_SetOverflowIntLevel>
}
     74e:	08 95       	ret

00000750 <enableInterrupts>:
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_RC32M_gc);
}

//enable interrupts
void enableInterrupts() {
	PMIC_SetVectorLocationToApplication();
     750:	0e 94 2a 0b 	call	0x1654	; 0x1654 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();
     754:	e0 ea       	ldi	r30, 0xA0	; 160
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel();
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	82 60       	ori	r24, 0x02	; 2
     762:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	84 60       	ori	r24, 0x04	; 4
     768:	82 83       	std	Z+2, r24	; 0x02
	sei();
     76a:	78 94       	sei
}
     76c:	08 95       	ret

0000076e <initializeMCU>:
//}

//set up the system clock
void initializeMCU() {
	//enable the 32MHz RC clock
	CLKSYS_Enable(OSC_RC32MEN_bm);
     76e:	80 91 50 00 	lds	r24, 0x0050
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 93 50 00 	sts	0x0050, r24
	//block till the clock is ready
	while (! CLKSYS_IsReady(OSC_RC32MRDY_bm)) {}
     778:	80 91 51 00 	lds	r24, 0x0051
     77c:	81 ff       	sbrs	r24, 1
     77e:	fc cf       	rjmp	.-8      	; 0x778 <initializeMCU+0xa>
	//use the 32MHz RC clock as the main system clock
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_RC32M_gc);
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 35 0a 	call	0x146a	; 0x146a <CLKSYS_Main_ClockSource_Select>
}
     786:	08 95       	ret

00000788 <__vector_71>:
//keeps a running tally of the energy for each sample
uint32_t energy_sum[INPUT_CHANNELS];

//the sample capture interrupt from the ADC
//the ADC conversion is triggered by the sample timer and this ISR is called when the conversion is complete
ISR(ADCA_CH0_vect) {
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	08 b6       	in	r0, 0x38	; 56
     792:	0f 92       	push	r0
     794:	09 b6       	in	r0, 0x39	; 57
     796:	0f 92       	push	r0
     798:	0a b6       	in	r0, 0x3a	; 58
     79a:	0f 92       	push	r0
     79c:	0b b6       	in	r0, 0x3b	; 59
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	18 be       	out	0x38, r1	; 56
     7a4:	19 be       	out	0x39, r1	; 57
     7a6:	1a be       	out	0x3a, r1	; 58
     7a8:	1b be       	out	0x3b, r1	; 59
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
	

	int16_t sample[INPUT_CHANNELS];

	//read the samples (signed)
	sample[0]=ADC_ResultCh_GetWord_Signed(&ADCA.CH0, ADC_offset);
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	60 91 38 20 	lds	r22, 0x2038
     7d6:	0e 94 5f 09 	call	0x12be	; 0x12be <ADC_ResultCh_GetWord_Signed>
     7da:	ec 01       	movw	r28, r24
	sample[1]=ADC_ResultCh_GetWord_Signed(&ADCA.CH1, ADC_offset);
     7dc:	88 e2       	ldi	r24, 0x28	; 40
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	60 91 38 20 	lds	r22, 0x2038
     7e4:	0e 94 5f 09 	call	0x12be	; 0x12be <ADC_ResultCh_GetWord_Signed>
     7e8:	8c 01       	movw	r16, r24
	sample[2]=ADC_ResultCh_GetWord_Signed(&ADCA.CH2, ADC_offset);
     7ea:	80 e3       	ldi	r24, 0x30	; 48
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	60 91 38 20 	lds	r22, 0x2038
     7f2:	0e 94 5f 09 	call	0x12be	; 0x12be <ADC_ResultCh_GetWord_Signed>
     7f6:	7c 01       	movw	r14, r24

	//###
	//	sample[0]=sample[0]>>6;
	//	sample[0]=sample[0]<<6;

	if (sample[0]>=0) 
     7f8:	d7 fd       	sbrc	r29, 7
     7fa:	ad c0       	rjmp	.+346    	; 0x956 <__vector_71+0x1ce>
		maxLevel=max(sample[0],maxLevel);
     7fc:	20 91 3a 20 	lds	r18, 0x203A
     800:	30 91 3b 20 	lds	r19, 0x203B
     804:	ce 01       	movw	r24, r28
     806:	4c 2f       	mov	r20, r28
     808:	89 2f       	mov	r24, r25
     80a:	c2 17       	cp	r28, r18
     80c:	d3 07       	cpc	r29, r19
     80e:	08 f4       	brcc	.+2      	; 0x812 <__vector_71+0x8a>
     810:	9e c0       	rjmp	.+316    	; 0x94e <__vector_71+0x1c6>
     812:	40 93 3a 20 	sts	0x203A, r20
     816:	80 93 3b 20 	sts	0x203B, r24


	//take the energy of the samples and add them to the running total
	//we don't shift down by the full 16 bits, just to leave a little numerical resolution
	for (int i=0;i<INPUT_CHANNELS;i++)
		energy_sum[i]+=((int32_t)sample[i]*sample[i])>>7;
     81a:	9e 01       	movw	r18, r28
     81c:	44 27       	eor	r20, r20
     81e:	37 fd       	sbrc	r19, 7
     820:	40 95       	com	r20
     822:	54 2f       	mov	r21, r20
     824:	ca 01       	movw	r24, r20
     826:	b9 01       	movw	r22, r18
     828:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     82c:	e7 e0       	ldi	r30, 0x07	; 7
     82e:	95 95       	asr	r25
     830:	87 95       	ror	r24
     832:	77 95       	ror	r23
     834:	67 95       	ror	r22
     836:	ea 95       	dec	r30
     838:	d1 f7       	brne	.-12     	; 0x82e <__vector_71+0xa6>
     83a:	20 91 3e 20 	lds	r18, 0x203E
     83e:	30 91 3f 20 	lds	r19, 0x203F
     842:	40 91 40 20 	lds	r20, 0x2040
     846:	50 91 41 20 	lds	r21, 0x2041
     84a:	26 0f       	add	r18, r22
     84c:	37 1f       	adc	r19, r23
     84e:	48 1f       	adc	r20, r24
     850:	59 1f       	adc	r21, r25
     852:	20 93 3e 20 	sts	0x203E, r18
     856:	30 93 3f 20 	sts	0x203F, r19
     85a:	40 93 40 20 	sts	0x2040, r20
     85e:	50 93 41 20 	sts	0x2041, r21
     862:	98 01       	movw	r18, r16
     864:	44 27       	eor	r20, r20
     866:	37 fd       	sbrc	r19, 7
     868:	40 95       	com	r20
     86a:	54 2f       	mov	r21, r20
     86c:	ca 01       	movw	r24, r20
     86e:	b9 01       	movw	r22, r18
     870:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     874:	57 e0       	ldi	r21, 0x07	; 7
     876:	95 95       	asr	r25
     878:	87 95       	ror	r24
     87a:	77 95       	ror	r23
     87c:	67 95       	ror	r22
     87e:	5a 95       	dec	r21
     880:	d1 f7       	brne	.-12     	; 0x876 <__vector_71+0xee>
     882:	20 91 42 20 	lds	r18, 0x2042
     886:	30 91 43 20 	lds	r19, 0x2043
     88a:	40 91 44 20 	lds	r20, 0x2044
     88e:	50 91 45 20 	lds	r21, 0x2045
     892:	26 0f       	add	r18, r22
     894:	37 1f       	adc	r19, r23
     896:	48 1f       	adc	r20, r24
     898:	59 1f       	adc	r21, r25
     89a:	20 93 42 20 	sts	0x2042, r18
     89e:	30 93 43 20 	sts	0x2043, r19
     8a2:	40 93 44 20 	sts	0x2044, r20
     8a6:	50 93 45 20 	sts	0x2045, r21
     8aa:	97 01       	movw	r18, r14
     8ac:	44 27       	eor	r20, r20
     8ae:	37 fd       	sbrc	r19, 7
     8b0:	40 95       	com	r20
     8b2:	54 2f       	mov	r21, r20
     8b4:	ca 01       	movw	r24, r20
     8b6:	b9 01       	movw	r22, r18
     8b8:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     8bc:	47 e0       	ldi	r20, 0x07	; 7
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
     8c2:	77 95       	ror	r23
     8c4:	67 95       	ror	r22
     8c6:	4a 95       	dec	r20
     8c8:	d1 f7       	brne	.-12     	; 0x8be <__vector_71+0x136>
     8ca:	20 91 46 20 	lds	r18, 0x2046
     8ce:	30 91 47 20 	lds	r19, 0x2047
     8d2:	40 91 48 20 	lds	r20, 0x2048
     8d6:	50 91 49 20 	lds	r21, 0x2049
     8da:	26 0f       	add	r18, r22
     8dc:	37 1f       	adc	r19, r23
     8de:	48 1f       	adc	r20, r24
     8e0:	59 1f       	adc	r21, r25
     8e2:	20 93 46 20 	sts	0x2046, r18
     8e6:	30 93 47 20 	sts	0x2047, r19
     8ea:	40 93 48 20 	sts	0x2048, r20
     8ee:	50 93 49 20 	sts	0x2049, r21
			// what about this instead of the square?
			//energy_sum_0+=(sample_0>=0)?sample_0:-sample_0;

	//put a sample to the DAC for debugging
	int16_t sampleOut=sample[0];
	DAC_Channel_Write(&DACB, (uint16_t) (sampleOut + 2048), CH0);//+ADC_offset/2, CH0);
     8f2:	c0 50       	subi	r28, 0x00	; 0
     8f4:	d8 4f       	sbci	r29, 0xF8	; 248
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	be 01       	movw	r22, r28
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DAC_Channel_Write>


	//increase the sample capture counter by sending event 4
	EVSYS_ManualTrigger(0, 0x10);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	60 e1       	ldi	r22, 0x10	; 16
     906:	0e 94 1d 0b 	call	0x163a	; 0x163a <EVSYS_ManualTrigger>


	//flag that the sample event occured
	fSampleCaptured=true;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 36 20 	sts	0x2036, r24
}
     910:	ff 91       	pop	r31
     912:	ef 91       	pop	r30
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	0f 90       	pop	r0
     936:	0b be       	out	0x3b, r0	; 59
     938:	0f 90       	pop	r0
     93a:	0a be       	out	0x3a, r0	; 58
     93c:	0f 90       	pop	r0
     93e:	09 be       	out	0x39, r0	; 57
     940:	0f 90       	pop	r0
     942:	08 be       	out	0x38, r0	; 56
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti
	//###
	//	sample[0]=sample[0]>>6;
	//	sample[0]=sample[0]<<6;

	if (sample[0]>=0) 
		maxLevel=max(sample[0],maxLevel);
     94e:	c9 01       	movw	r24, r18
     950:	42 2f       	mov	r20, r18
     952:	89 2f       	mov	r24, r25
     954:	5e cf       	rjmp	.-324    	; 0x812 <__vector_71+0x8a>
	else
		maxLevel=max(-sample[0], maxLevel);
     956:	20 91 3a 20 	lds	r18, 0x203A
     95a:	30 91 3b 20 	lds	r19, 0x203B
     95e:	88 27       	eor	r24, r24
     960:	99 27       	eor	r25, r25
     962:	8c 1b       	sub	r24, r28
     964:	9d 0b       	sbc	r25, r29
     966:	82 17       	cp	r24, r18
     968:	93 07       	cpc	r25, r19
     96a:	28 f0       	brcs	.+10     	; 0x976 <__vector_71+0x1ee>
     96c:	80 93 3a 20 	sts	0x203A, r24
     970:	90 93 3b 20 	sts	0x203B, r25
     974:	52 cf       	rjmp	.-348    	; 0x81a <__vector_71+0x92>
     976:	c9 01       	movw	r24, r18
     978:	80 93 3a 20 	sts	0x203A, r24
     97c:	90 93 3b 20 	sts	0x203B, r25
     980:	4c cf       	rjmp	.-360    	; 0x81a <__vector_71+0x92>

00000982 <error>:
	phasePeriod=sum/60;
}


//show an error and hang
void error(char * msg) {
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	8c 01       	movw	r16, r24
	display_clear();
     988:	0e 94 6f 07 	call	0xede	; 0xede <display_clear>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     98c:	80 ec       	ldi	r24, 0xC0	; 192
     98e:	9d e5       	ldi	r25, 0x5D	; 93
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <error+0xe>
	_delay_ms(3);

	display_moveCursor(0x00);
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 67 07 	call	0xece	; 0xece <display_moveCursor>
	display_printString("ERROR");
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e2       	ldi	r25, 0x20	; 32
     9a0:	0e 94 54 07 	call	0xea8	; 0xea8 <display_printString>
	display_moveCursor(0x40);
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 67 07 	call	0xece	; 0xece <display_moveCursor>
	display_printString(msg);
     9ac:	c8 01       	movw	r24, r16
     9ae:	0e 94 54 07 	call	0xea8	; 0xea8 <display_printString>

	while (true) 
		nop();
     9b2:	00 00       	nop
     9b4:	fe cf       	rjmp	.-4      	; 0x9b2 <error+0x30>

000009b6 <printDutyCycles>:
	}
}


//print the duty cycle to the display
void printDutyCycles() {
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
	sprintf(string, "a:%2X, b:%2X, c:%2X", dutyA, dutyB, dutyC);
     9ba:	20 91 3d 20 	lds	r18, 0x203D
     9be:	30 91 5f 20 	lds	r19, 0x205F
     9c2:	40 91 62 20 	lds	r20, 0x2062
     9c6:	8d b7       	in	r24, 0x3d	; 61
     9c8:	9e b7       	in	r25, 0x3e	; 62
     9ca:	0a 97       	sbiw	r24, 0x0a	; 10
     9cc:	8d bf       	out	0x3d, r24	; 61
     9ce:	9e bf       	out	0x3e, r25	; 62
     9d0:	ed b7       	in	r30, 0x3d	; 61
     9d2:	fe b7       	in	r31, 0x3e	; 62
     9d4:	31 96       	adiw	r30, 0x01	; 1
     9d6:	0a e4       	ldi	r16, 0x4A	; 74
     9d8:	10 e2       	ldi	r17, 0x20	; 32
     9da:	ad b7       	in	r26, 0x3d	; 61
     9dc:	be b7       	in	r27, 0x3e	; 62
     9de:	11 96       	adiw	r26, 0x01	; 1
     9e0:	0d 93       	st	X+, r16
     9e2:	1c 93       	st	X, r17
     9e4:	12 97       	sbiw	r26, 0x02	; 2
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	90 e2       	ldi	r25, 0x20	; 32
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	93 83       	std	Z+3, r25	; 0x03
     9ee:	24 83       	std	Z+4, r18	; 0x04
     9f0:	15 82       	std	Z+5, r1	; 0x05
     9f2:	36 83       	std	Z+6, r19	; 0x06
     9f4:	17 82       	std	Z+7, r1	; 0x07
     9f6:	40 87       	std	Z+8, r20	; 0x08
     9f8:	11 86       	std	Z+9, r1	; 0x09
     9fa:	0e 94 ce 0c 	call	0x199c	; 0x199c <sprintf>
	display_moveCursor(0x40);
     9fe:	8d b7       	in	r24, 0x3d	; 61
     a00:	9e b7       	in	r25, 0x3e	; 62
     a02:	0a 96       	adiw	r24, 0x0a	; 10
     a04:	8d bf       	out	0x3d, r24	; 61
     a06:	9e bf       	out	0x3e, r25	; 62
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 67 07 	call	0xece	; 0xece <display_moveCursor>
	display_printString(string);
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 54 07 	call	0xea8	; 0xea8 <display_printString>
}
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <findPhasePeriod>:
//	debug1=(uint16_t) (prodA/255);
//	debug2=ticksA;
}

//find the noninal AC phase
void findPhasePeriod() {
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
	uint32_t sum=0;

	uint32_t msTimeout=msClock+10000;
     a24:	e0 90 2c 20 	lds	r14, 0x202C
     a28:	f0 90 2d 20 	lds	r15, 0x202D
     a2c:	00 91 2e 20 	lds	r16, 0x202E
     a30:	10 91 2f 20 	lds	r17, 0x202F
     a34:	80 e1       	ldi	r24, 0x10	; 16
     a36:	97 e2       	ldi	r25, 0x27	; 39
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e8 0e       	add	r14, r24
     a3e:	f9 1e       	adc	r15, r25
     a40:	0a 1f       	adc	r16, r26
     a42:	1b 1f       	adc	r17, r27
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0

	//average the phase period over one second
	for (int i=0;i<60;i++) {
		while (!fPhaseEnd) {
     a50:	80 91 35 20 	lds	r24, 0x2035
     a54:	88 23       	and	r24, r24
     a56:	29 f5       	brne	.+74     	; 0xaa2 <findPhasePeriod+0x86>
			if (msClock>=msTimeout)
     a58:	80 91 2c 20 	lds	r24, 0x202C
     a5c:	90 91 2d 20 	lds	r25, 0x202D
     a60:	a0 91 2e 20 	lds	r26, 0x202E
     a64:	b0 91 2f 20 	lds	r27, 0x202F
     a68:	8e 15       	cp	r24, r14
     a6a:	9f 05       	cpc	r25, r15
     a6c:	a0 07       	cpc	r26, r16
     a6e:	b1 07       	cpc	r27, r17
     a70:	78 f3       	brcs	.-34     	; 0xa50 <findPhasePeriod+0x34>
}


//show an error and hang
void error(char * msg) {
	display_clear();
     a72:	0e 94 6f 07 	call	0xede	; 0xede <display_clear>
     a76:	80 ec       	ldi	r24, 0xC0	; 192
     a78:	9d e5       	ldi	r25, 0x5D	; 93
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <findPhasePeriod+0x5e>
	_delay_ms(3);

	display_moveCursor(0x00);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 67 07 	call	0xece	; 0xece <display_moveCursor>
	display_printString("ERROR");
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e2       	ldi	r25, 0x20	; 32
     a8a:	0e 94 54 07 	call	0xea8	; 0xea8 <display_printString>
	display_moveCursor(0x40);
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 67 07 	call	0xece	; 0xece <display_moveCursor>
	display_printString(msg);
     a96:	8a e1       	ldi	r24, 0x1A	; 26
     a98:	90 e2       	ldi	r25, 0x20	; 32
     a9a:	0e 94 54 07 	call	0xea8	; 0xea8 <display_printString>

	while (true) 
		nop();
     a9e:	00 00       	nop
     aa0:	fe cf       	rjmp	.-4      	; 0xa9e <findPhasePeriod+0x82>
	for (int i=0;i<60;i++) {
		while (!fPhaseEnd) {
			if (msClock>=msTimeout)
				error("finding period");
		}
		fPhaseEnd=false;
     aa2:	10 92 35 20 	sts	0x2035, r1

		sum+=phasePeriodLast;
     aa6:	80 91 32 20 	lds	r24, 0x2032
     aaa:	90 91 33 20 	lds	r25, 0x2033
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	28 0f       	add	r18, r24
     ab4:	39 1f       	adc	r19, r25
     ab6:	4a 1f       	adc	r20, r26
     ab8:	5b 1f       	adc	r21, r27
	uint32_t sum=0;

	uint32_t msTimeout=msClock+10000;

	//average the phase period over one second
	for (int i=0;i<60;i++) {
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	6c 33       	cpi	r22, 0x3C	; 60
     ac0:	71 05       	cpc	r23, r1
     ac2:	34 f2       	brlt	.-116    	; 0xa50 <findPhasePeriod+0x34>
		fPhaseEnd=false;

		sum+=phasePeriodLast;
	}

	phasePeriod=sum/60;
     ac4:	ca 01       	movw	r24, r20
     ac6:	b9 01       	movw	r22, r18
     ac8:	2c e3       	ldi	r18, 0x3C	; 60
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>
     ad4:	20 93 30 20 	sts	0x2030, r18
     ad8:	30 93 31 20 	sts	0x2031, r19
}
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <main>:

	void printDutyCycles();



int main(void) {
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	28 97       	sbiw	r28, 0x08	; 8
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	de bf       	out	0x3e, r29	; 62

	//initialize the MCU clock
	initializeMCU();
     af4:	0e 94 b7 03 	call	0x76e	; 0x76e <initializeMCU>
		display_printString("Light Organ");
		
	#endif
	
	//initialize peripherals
	initializeUITimer();
     af8:	0e 94 92 03 	call	0x724	; 0x724 <initializeUITimer>
	initializePhaseTimer();
     afc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initializePhaseTimer>
	initializePhaseComparator();
     b00:	0e 94 b2 02 	call	0x564	; 0x564 <initializePhaseComparator>
	initializeSampleTimer();
     b04:	0e 94 40 02 	call	0x480	; 0x480 <initializeSampleTimer>
	initializeCaptureTimer();
     b08:	0e 94 2a 02 	call	0x454	; 0x454 <initializeCaptureTimer>
	initializeADC();
     b0c:	0e 94 55 02 	call	0x4aa	; 0x4aa <initializeADC>
	initializeDAC();
     b10:	0e 94 1d 02 	call	0x43a	; 0x43a <initializeDAC>
	enableInterrupts();
     b14:	0e 94 a8 03 	call	0x750	; 0x750 <enableInterrupts>
	
//	while (true) {
		//find the nominal phase period
		findPhasePeriod();	
     b18:	0e 94 0e 05 	call	0xa1c	; 0xa1c <findPhasePeriod>
		int step=2;
		int stepdir=1;
		int stepstep=1;
	#endif

	volatile uint32_t msValueUpdate=0;
     b1c:	19 82       	std	Y+1, r1	; 0x01
     b1e:	1a 82       	std	Y+2, r1	; 0x02
     b20:	1b 82       	std	Y+3, r1	; 0x03
     b22:	1c 82       	std	Y+4, r1	; 0x04
//	uint16_t energy=0;
	volatile uint32_t msStrobe=0;
     b24:	1d 82       	std	Y+5, r1	; 0x05
     b26:	1e 82       	std	Y+6, r1	; 0x06
     b28:	1f 82       	std	Y+7, r1	; 0x07
     b2a:	18 86       	std	Y+8, r1	; 0x08
     b2c:	20 91 29 20 	lds	r18, 0x2029
     b30:	30 91 2a 20 	lds	r19, 0x202A

	//enter the main event loop
	while (true) {
		//keep track of the minimum phase period
		if (fPhaseEnd) {
     b34:	80 91 35 20 	lds	r24, 0x2035
     b38:	88 23       	and	r24, r24
     b3a:	e1 f3       	breq	.-8      	; 0xb34 <main+0x4e>

			//PHASE_port.OUTCLR = PIN0_bm;
			fPhaseEnd=false;
     b3c:	10 92 35 20 	sts	0x2035, r1
			phasePeriodMin=(phasePeriodLast<phasePeriodMin) ? phasePeriodLast : phasePeriodMin;
     b40:	80 91 32 20 	lds	r24, 0x2032
     b44:	90 91 33 20 	lds	r25, 0x2033
     b48:	82 17       	cp	r24, r18
     b4a:	93 07       	cpc	r25, r19
     b4c:	98 f7       	brcc	.-26     	; 0xb34 <main+0x4e>
     b4e:	20 91 32 20 	lds	r18, 0x2032
     b52:	30 91 33 20 	lds	r19, 0x2033
     b56:	ee cf       	rjmp	.-36     	; 0xb34 <main+0x4e>

00000b58 <__vector_20>:
//uint32_t midband_energy_historySum=0;
//uint32_t highband_energy_historySum=0;

//this interrupt is called after every BINSIZE samples are filtered and summed into their three channels
//here we decide how to respond to the audio signal
ISR(CAPTURE_vect) {
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	08 b6       	in	r0, 0x38	; 56
     b62:	0f 92       	push	r0
     b64:	09 b6       	in	r0, 0x39	; 57
     b66:	0f 92       	push	r0
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	18 be       	out	0x38, r1	; 56
     b70:	19 be       	out	0x39, r1	; 57
     b72:	1b be       	out	0x3b, r1	; 59
     b74:	2f 92       	push	r2
     b76:	3f 92       	push	r3
     b78:	4f 92       	push	r4
     b7a:	5f 92       	push	r5
     b7c:	6f 92       	push	r6
     b7e:	7f 92       	push	r7
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	68 97       	sbiw	r28, 0x18	; 24
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	de bf       	out	0x3e, r29	; 62

	//###
	debug1=maxLevel;
     bba:	80 91 3a 20 	lds	r24, 0x203A
     bbe:	90 91 3b 20 	lds	r25, 0x203B
     bc2:	80 93 60 20 	sts	0x2060, r24
     bc6:	90 93 61 20 	sts	0x2061, r25
	maxLevel=0;
     bca:	10 92 3a 20 	sts	0x203A, r1
     bce:	10 92 3b 20 	sts	0x203B, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     bd2:	80 91 3e 20 	lds	r24, 0x203E
     bd6:	90 91 3f 20 	lds	r25, 0x203F
     bda:	a0 91 40 20 	lds	r26, 0x2040
     bde:	b0 91 41 20 	lds	r27, 0x2041
     be2:	89 2f       	mov	r24, r25
     be4:	9a 2f       	mov	r25, r26
     be6:	ab 2f       	mov	r26, r27
     be8:	bb 27       	eor	r27, r27
     bea:	8e 8b       	std	Y+22, r24	; 0x16
     bec:	9f 8b       	std	Y+23, r25	; 0x17
     bee:	8c 83       	std	Y+4, r24	; 0x04
     bf0:	9d 83       	std	Y+5, r25	; 0x05

		//reset the sums
		energy_sum[i]=0;
     bf2:	10 92 3e 20 	sts	0x203E, r1
     bf6:	10 92 3f 20 	sts	0x203F, r1
     bfa:	10 92 40 20 	sts	0x2040, r1
     bfe:	10 92 41 20 	sts	0x2041, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     c02:	80 91 42 20 	lds	r24, 0x2042
     c06:	90 91 43 20 	lds	r25, 0x2043
     c0a:	a0 91 44 20 	lds	r26, 0x2044
     c0e:	b0 91 45 20 	lds	r27, 0x2045
     c12:	89 2f       	mov	r24, r25
     c14:	9a 2f       	mov	r25, r26
     c16:	ab 2f       	mov	r26, r27
     c18:	bb 27       	eor	r27, r27
     c1a:	8e 83       	std	Y+6, r24	; 0x06
     c1c:	9f 83       	std	Y+7, r25	; 0x07

		//reset the sums
		energy_sum[i]=0;
     c1e:	10 92 42 20 	sts	0x2042, r1
     c22:	10 92 43 20 	sts	0x2043, r1
     c26:	10 92 44 20 	sts	0x2044, r1
     c2a:	10 92 45 20 	sts	0x2045, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     c2e:	80 91 46 20 	lds	r24, 0x2046
     c32:	90 91 47 20 	lds	r25, 0x2047
     c36:	a0 91 48 20 	lds	r26, 0x2048
     c3a:	b0 91 49 20 	lds	r27, 0x2049
     c3e:	89 2f       	mov	r24, r25
     c40:	9a 2f       	mov	r25, r26
     c42:	ab 2f       	mov	r26, r27
     c44:	bb 27       	eor	r27, r27
     c46:	88 87       	std	Y+8, r24	; 0x08
     c48:	99 87       	std	Y+9, r25	; 0x09

		//reset the sums
		energy_sum[i]=0;
     c4a:	10 92 46 20 	sts	0x2046, r1
     c4e:	10 92 47 20 	sts	0x2047, r1
     c52:	10 92 48 20 	sts	0x2048, r1
     c56:	10 92 49 20 	sts	0x2049, r1
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
		//update the history array with the new values
		energy_history[i][historyIndex]=energy_inst[i];
     c5a:	20 91 3c 20 	lds	r18, 0x203C
     c5e:	28 8f       	std	Y+24, r18	; 0x18
     c60:	44 e0       	ldi	r20, 0x04	; 4
     c62:	a4 2e       	mov	r10, r20
     c64:	b1 2c       	mov	r11, r1
     c66:	ac 0e       	add	r10, r28
     c68:	bd 1e       	adc	r11, r29
     c6a:	a2 2f       	mov	r26, r18
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	aa 0f       	add	r26, r26
     c70:	bb 1f       	adc	r27, r27
     c72:	ad 59       	subi	r26, 0x9D	; 157
     c74:	bf 4d       	sbci	r27, 0xDF	; 223
     c76:	2a e0       	ldi	r18, 0x0A	; 10
     c78:	c2 2e       	mov	r12, r18
     c7a:	d1 2c       	mov	r13, r1
     c7c:	cc 0e       	add	r12, r28
     c7e:	dd 1e       	adc	r13, r29
     c80:	90 e1       	ldi	r25, 0x10	; 16
     c82:	e9 2e       	mov	r14, r25
     c84:	f1 2c       	mov	r15, r1
     c86:	ec 0e       	add	r14, r28
     c88:	fd 1e       	adc	r15, r29
     c8a:	88 24       	eor	r8, r8
     c8c:	99 24       	eor	r9, r9
     c8e:	66 24       	eor	r6, r6
     c90:	6a 94       	dec	r6
     c92:	76 2c       	mov	r7, r6
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
		//now find maximum energy from the last HISTORY_size bin captures 
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
		energy_min[i]=65535;
     c98:	22 24       	eor	r2, r2
     c9a:	2a 94       	dec	r2
     c9c:	32 2c       	mov	r3, r2
     c9e:	86 e5       	ldi	r24, 0x56	; 86
     ca0:	48 2e       	mov	r4, r24
     ca2:	51 2c       	mov	r5, r1
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
		//update the history array with the new values
		energy_history[i][historyIndex]=energy_inst[i];
     ca4:	f5 01       	movw	r30, r10
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	8d 93       	st	X+, r24
     cac:	9c 93       	st	X, r25
     cae:	11 97       	sbiw	r26, 0x01	; 1
		
		//now find maximum energy from the last HISTORY_size bin captures 
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
     cb0:	f6 01       	movw	r30, r12
     cb2:	10 82       	st	Z, r1
     cb4:	11 82       	std	Z+1, r1	; 0x01
		energy_min[i]=65535;
     cb6:	f7 01       	movw	r30, r14
     cb8:	20 82       	st	Z, r2
     cba:	31 82       	std	Z+1, r3	; 0x01
     cbc:	6f ef       	ldi	r22, 0xFF	; 255
     cbe:	7f ef       	ldi	r23, 0xFF	; 255
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	04 9d       	mul	r16, r4
     cc6:	f0 01       	movw	r30, r0
     cc8:	05 9d       	mul	r16, r5
     cca:	f0 0d       	add	r31, r0
     ccc:	14 9d       	mul	r17, r4
     cce:	f0 0d       	add	r31, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	ed 59       	subi	r30, 0x9D	; 157
     cd4:	ff 4d       	sbci	r31, 0xDF	; 223
     cd6:	20 e0       	ldi	r18, 0x00	; 0
		for (uint8_t j=0;j<HISTORY_size;j++) {
			energy_max[i]=max(energy_history[i][j],energy_max[i]);
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	48 17       	cp	r20, r24
     cde:	59 07       	cpc	r21, r25
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <__vector_20+0x18c>
     ce2:	ac 01       	movw	r20, r24
			energy_min[i]=min(energy_history[i][j],energy_min[i]);
     ce4:	86 17       	cp	r24, r22
     ce6:	97 07       	cpc	r25, r23
     ce8:	08 f4       	brcc	.+2      	; 0xcec <__vector_20+0x194>
     cea:	bc 01       	movw	r22, r24
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
		energy_min[i]=65535;
		for (uint8_t j=0;j<HISTORY_size;j++) {
     cec:	2f 5f       	subi	r18, 0xFF	; 255
     cee:	32 96       	adiw	r30, 0x02	; 2
     cf0:	2b 32       	cpi	r18, 0x2B	; 43
     cf2:	91 f7       	brne	.-28     	; 0xcd8 <__vector_20+0x180>
     cf4:	f7 01       	movw	r30, r14
     cf6:	60 83       	st	Z, r22
     cf8:	71 83       	std	Z+1, r23	; 0x01
     cfa:	f6 01       	movw	r30, r12
     cfc:	40 83       	st	Z, r20
     cfe:	51 83       	std	Z+1, r21	; 0x01
			energy_max[i]=max(energy_history[i][j],energy_max[i]);
			energy_min[i]=min(energy_history[i][j],energy_min[i]);
		}

		//find the max and min for all channels
		energy_all_max=max(energy_all_max,energy_max[i]);
     d00:	84 16       	cp	r8, r20
     d02:	95 06       	cpc	r9, r21
     d04:	08 f4       	brcc	.+2      	; 0xd08 <__vector_20+0x1b0>
     d06:	4a 01       	movw	r8, r20
		energy_all_min=min(energy_all_min,energy_min[i]);
     d08:	66 15       	cp	r22, r6
     d0a:	77 05       	cpc	r23, r7
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <__vector_20+0x1b8>
     d0e:	3b 01       	movw	r6, r22
	uint16_t energy_min[INPUT_CHANNELS];
	
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
     d10:	0f 5f       	subi	r16, 0xFF	; 255
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a2 0e       	add	r10, r18
     d1a:	b3 1e       	adc	r11, r19
     d1c:	aa 5a       	subi	r26, 0xAA	; 170
     d1e:	bf 4f       	sbci	r27, 0xFF	; 255
     d20:	c2 0e       	add	r12, r18
     d22:	d3 1e       	adc	r13, r19
     d24:	e2 0e       	add	r14, r18
     d26:	f3 1e       	adc	r15, r19
     d28:	03 30       	cpi	r16, 0x03	; 3
     d2a:	11 05       	cpc	r17, r1
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_20+0x1d8>
     d2e:	ba cf       	rjmp	.-140    	; 0xca4 <__vector_20+0x14c>
	}

	// * 3. Fudge the max energy
		//this value is basically voodoo
		//it serves to ignore small variations in the energy though, basically requires a certain minimum intensity of sound to register a response
	energy_all_max=max(energy_all_max, 16);
     d30:	84 01       	movw	r16, r8
     d32:	00 31       	cpi	r16, 0x10	; 16
     d34:	11 05       	cpc	r17, r1
     d36:	10 f4       	brcc	.+4      	; 0xd3c <__vector_20+0x1e4>
     d38:	00 e1       	ldi	r16, 0x10	; 16
     d3a:	10 e0       	ldi	r17, 0x00	; 0
			//uint32_t scale=((uint32_t)energy_inst[i]*256)/512;
			duty[i]=min(scale,255);
		}
		*/

		if (energy_all_max-energy_all_min>1) {
     d3c:	f8 01       	movw	r30, r16
     d3e:	e6 19       	sub	r30, r6
     d40:	f7 09       	sbc	r31, r7
     d42:	e2 30       	cpi	r30, 0x02	; 2
     d44:	f1 05       	cpc	r31, r1
     d46:	18 f1       	brcs	.+70     	; 0xd8e <__vector_20+0x236>
			//scale the output to the maximum recent energy accross all channels 
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_all_min) *256) / (energy_all_max - energy_all_min);
     d48:	2e 89       	ldd	r18, Y+22	; 0x16
     d4a:	3f 89       	ldd	r19, Y+23	; 0x17
     d4c:	b9 01       	movw	r22, r18
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	93 01       	movw	r18, r6
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	62 1b       	sub	r22, r18
     d5a:	73 0b       	sbc	r23, r19
     d5c:	84 0b       	sbc	r24, r20
     d5e:	95 0b       	sbc	r25, r21
     d60:	98 2f       	mov	r25, r24
     d62:	87 2f       	mov	r24, r23
     d64:	76 2f       	mov	r23, r22
     d66:	66 27       	eor	r22, r22
     d68:	9f 01       	movw	r18, r30
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>

			if (i==0) debug1=scale;
     d72:	c9 01       	movw	r24, r18
     d74:	20 93 60 20 	sts	0x2060, r18
     d78:	30 93 61 20 	sts	0x2061, r19

			duty[i] = min(scale,255);
     d7c:	da 01       	movw	r26, r20
     d7e:	8f 3f       	cpi	r24, 0xFF	; 255
     d80:	91 05       	cpc	r25, r1
     d82:	a1 05       	cpc	r26, r1
     d84:	b1 05       	cpc	r27, r1
     d86:	11 f0       	breq	.+4      	; 0xd8c <__vector_20+0x234>
     d88:	08 f0       	brcs	.+2      	; 0xd8c <__vector_20+0x234>
     d8a:	6b c0       	rjmp	.+214    	; 0xe62 <__vector_20+0x30a>
     d8c:	89 83       	std	Y+1, r24	; 0x01

		//should we have a minimum duty value and scale relative to that?
	}	
	
	// * 4. Increment the history index *
	historyIndex++;
     d8e:	88 8d       	ldd	r24, Y+24	; 0x18
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 3c 20 	sts	0x203C, r24
	if (historyIndex >= HISTORY_size)
     d96:	8b 32       	cpi	r24, 0x2B	; 43
     d98:	10 f0       	brcs	.+4      	; 0xd9e <__vector_20+0x246>
		historyIndex = 0;
     d9a:	10 92 3c 20 	sts	0x203C, r1

	
	debug2 = energy_inst[0];
     d9e:	8e 89       	ldd	r24, Y+22	; 0x16
     da0:	9f 89       	ldd	r25, Y+23	; 0x17
     da2:	80 93 5b 20 	sts	0x205B, r24
     da6:	90 93 5c 20 	sts	0x205C, r25
	debug3 = energy_all_min;
     daa:	60 92 65 21 	sts	0x2165, r6
     dae:	70 92 66 21 	sts	0x2166, r7
	debug4 = energy_all_max;
     db2:	00 93 5d 20 	sts	0x205D, r16
     db6:	10 93 5e 20 	sts	0x205E, r17
	

	duty[1] = duty[0];
     dba:	29 81       	ldd	r18, Y+1	; 0x01
//set the duty cycle for each output channel
//duty cycle is expressed as a byte value
//0 is fully off, 255 is fully on
void setDutyCycles(uint8_t _dutyA, uint8_t _dutyB, uint8_t _dutyC) {
	//save the duty settings as global variables (for debugging)
	dutyA=_dutyA; dutyB=_dutyB; dutyC=_dutyC;
     dbc:	20 93 3d 20 	sts	0x203D, r18
     dc0:	20 93 5f 20 	sts	0x205F, r18
     dc4:	20 93 62 20 	sts	0x2062, r18

	//calculate the number of ticks given the duty cycle
	uint32_t prodA = (uint32_t) _dutyA * phasePeriod;
     dc8:	00 91 30 20 	lds	r16, 0x2030
     dcc:	10 91 31 20 	lds	r17, 0x2031
	uint16_t ticksA= phasePeriod - (prodA/255);
     dd0:	b8 01       	movw	r22, r16
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__mulsi3>
     de0:	2f ef       	ldi	r18, 0xFF	; 255
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	0e 94 98 0c 	call	0x1930	; 0x1930 <__udivmodsi4>
     dec:	02 1b       	sub	r16, r18
     dee:	13 0b       	sbc	r17, r19

	//set the timer comparator value
	//the comparator output pins for the phase timer will be the duty cycle output
	TC_SetCompareA(&PHASE_timer, ticksA);
     df0:	e0 e0       	ldi	r30, 0x00	; 0
     df2:	fa e0       	ldi	r31, 0x0A	; 10
     df4:	00 af       	std	Z+56, r16	; 0x38
     df6:	11 af       	std	Z+57, r17	; 0x39

	uint32_t prodB = (uint32_t)_dutyB * phasePeriod;
	uint16_t ticksB=phasePeriod - (prodB/255);
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC_SetCompareD(&PHASE_timer, ticksB);
     df8:	00 93 3e 0a 	sts	0x0A3E, r16
     dfc:	10 93 3f 0a 	sts	0x0A3F, r17

	uint32_t prodC = (uint32_t)_dutyC * phasePeriod;
	uint16_t ticksC=phasePeriod - (prodC/255);
	TC_SetCompareC(&PHASE_timer, ticksC);
     e00:	04 af       	std	Z+60, r16	; 0x3c
     e02:	15 af       	std	Z+61, r17	; 0x3d
		//scale the duty cycle down to the range 0..255
		setDutyCycles(duty[0], duty[1], duty[2]);
	#endif


	fCaptureBinFilled=true;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 37 20 	sts	0x2037, r24
}
     e0a:	68 96       	adiw	r28, 0x18	; 24
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	3f 90       	pop	r3
     e4a:	2f 90       	pop	r2
     e4c:	0f 90       	pop	r0
     e4e:	0b be       	out	0x3b, r0	; 59
     e50:	0f 90       	pop	r0
     e52:	09 be       	out	0x39, r0	; 57
     e54:	0f 90       	pop	r0
     e56:	08 be       	out	0x38, r0	; 56
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_all_min) *256) / (energy_all_max - energy_all_min);

			if (i==0) debug1=scale;

			duty[i] = min(scale,255);
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	90 cf       	rjmp	.-224    	; 0xd8c <__vector_20+0x234>

00000e6c <display_printStringLen>:
		i++;
	}
}

//writes each letter of the given string to the display, in order, starting at the cursor address
void display_printStringLen(char * str, int len) {
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	7c 01       	movw	r14, r24
     e7a:	8b 01       	movw	r16, r22
	for (int i=0;i<len;i++)
     e7c:	16 16       	cp	r1, r22
     e7e:	17 06       	cpc	r1, r23
     e80:	64 f4       	brge	.+24     	; 0xe9a <display_printStringLen+0x2e>
     e82:	c0 e0       	ldi	r28, 0x00	; 0
     e84:	d0 e0       	ldi	r29, 0x00	; 0
		display_sendData(str[i]);
     e86:	f7 01       	movw	r30, r14
     e88:	ec 0f       	add	r30, r28
     e8a:	fd 1f       	adc	r31, r29
     e8c:	80 81       	ld	r24, Z
     e8e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <display_sendData>
	}
}

//writes each letter of the given string to the display, in order, starting at the cursor address
void display_printStringLen(char * str, int len) {
	for (int i=0;i<len;i++)
     e92:	21 96       	adiw	r28, 0x01	; 1
     e94:	c0 17       	cp	r28, r16
     e96:	d1 07       	cpc	r29, r17
     e98:	b4 f3       	brlt	.-20     	; 0xe86 <display_printStringLen+0x1a>
		display_sendData(str[i]);
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	08 95       	ret

00000ea8 <display_printString>:
void display_printChar(char chr) {
	display_sendData(chr);
}

//writes each letter of the given null-terminated string
void display_printString(char * str) {
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	fc 01       	movw	r30, r24
	int i=0;
	while (str[i]!='\0') {
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	39 f0       	breq	.+14     	; 0xec2 <display_printString+0x1a>
     eb4:	ef 01       	movw	r28, r30
		display_sendData(str[i]);
     eb6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <display_sendData>
}

//writes each letter of the given null-terminated string
void display_printString(char * str) {
	int i=0;
	while (str[i]!='\0') {
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	21 96       	adiw	r28, 0x01	; 1
     ebe:	88 23       	and	r24, r24
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <display_printString+0xe>
		display_sendData(str[i]);
		i++;
	}
}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <display_printChar>:
	display_sendCommand(0x80+addr);
}

//writes the given character to the display at the cursor address
void display_printChar(char chr) {
	display_sendData(chr);
     ec8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <display_sendData>
}
     ecc:	08 95       	ret

00000ece <display_moveCursor>:
//sets whether the cursor is visible
//void display_setCursor(bool visible);

//sets the cursor address
void display_moveCursor(int addr) {
	display_sendCommand(0x80+addr);
     ece:	80 58       	subi	r24, 0x80	; 128
     ed0:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
}
     ed4:	08 95       	ret

00000ed6 <display_returnHome>:
}


//return the cursor to home (the upper left of the display)
void display_returnHome() {
	display_sendCommand(DISPLAY_RETURN_HOME);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
}
     edc:	08 95       	ret

00000ede <display_clear>:
}


//clears the display
void display_clear() {
	display_sendCommand(DISPLAY_CLEAR);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
}
     ee4:	08 95       	ret

00000ee6 <display_init>:
#define DISPLAY_OFF 0x08


//initialize the display with the given number of columns and rows
void display_init(int cols, int rows) {
	display_initDevice();
     ee6:	0e 94 aa 07 	call	0xf54	; 0xf54 <display_initDevice>

	display_sendCommand(DISPLAY_WAKE); //wake up
     eea:	80 e3       	ldi	r24, 0x30	; 48
     eec:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	9e e3       	ldi	r25, 0x3E	; 62
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <display_init+0xe>

	_delay_ms(2);

	display_sendCommand(DISPLAY_WAKE); //wake up
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
	display_sendCommand(DISPLAY_WAKE); //wake up
     efe:	80 e3       	ldi	r24, 0x30	; 48
     f00:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>

	display_sendCommand(0x39); //function set (use extended instruction set)
     f04:	89 e3       	ldi	r24, 0x39	; 57
     f06:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>

	display_sendCommand(0x14); //internal osc frequency
     f0a:	84 e1       	ldi	r24, 0x14	; 20
     f0c:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
	display_sendCommand(0x56); //power control
     f10:	86 e5       	ldi	r24, 0x56	; 86
     f12:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
	display_sendCommand(0x6D); //follower control
     f16:	8d e6       	ldi	r24, 0x6D	; 109
     f18:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
	display_sendCommand(0x78); //contrast
     f1c:	88 e7       	ldi	r24, 0x78	; 120
     f1e:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>

	display_sendCommand(DISPLAY_ON_NOCURSOR);
     f22:	8c e0       	ldi	r24, 0x0C	; 12
     f24:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>

	display_sendCommand(DISPLAY_CURSOR_MODE_RIGHT);
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
	display_sendCommand(DISPLAY_CURSOR_MODE_RIGHT);
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>

	display_sendCommand(DISPLAY_CLEAR);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 fe 07 	call	0xffc	; 0xffc <display_sendCommand>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	53 e0       	ldi	r21, 0x03	; 3
     f42:	ca 01       	movw	r24, r20
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <display_init+0x5e>
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	24 36       	cpi	r18, 0x64	; 100
     f4e:	31 05       	cpc	r19, r1
     f50:	c1 f7       	brne	.-16     	; 0xf42 <display_init+0x5c>

	_delay_ms(10);
}
     f52:	08 95       	ret

00000f54 <display_initDevice>:
	SPI_MasterTransceiveByte(&display_spiMaster, data);
	CSSET;
}

//initialize the device, including i/o pins on the microcontroller, etc.
void display_initDevice() {
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	cf 92       	push	r12
     f5c:	ef 92       	push	r14
     f5e:	0f 93       	push	r16
	// Init !CS and RS pins as output with wired AND and pull-up. */
	DISPLAY_SPIPORT.DIRSET = DISPLAY_CSPIN_bm | DISPLAY_RSPIN_bm | DISPLAY_RESETPIN_bm;
     f60:	40 e4       	ldi	r20, 0x40	; 64
     f62:	84 2e       	mov	r8, r20
     f64:	46 e0       	ldi	r20, 0x06	; 6
     f66:	94 2e       	mov	r9, r20
     f68:	83 e1       	ldi	r24, 0x13	; 19
     f6a:	f4 01       	movw	r30, r8
     f6c:	81 83       	std	Z+1, r24	; 0x01
	DISPLAY_SPIPORT.DISPLAY_CSPINCTRL = PORT_OPC_WIREDANDPULL_gc;
     f6e:	88 e3       	ldi	r24, 0x38	; 56
     f70:	84 8b       	std	Z+20, r24	; 0x14
	DISPLAY_SPIPORT.DISPLAY_RSPINCTRL = PORT_OPC_WIREDANDPULL_gc;
     f72:	80 8b       	std	Z+16, r24	; 0x10


	//Set !CS output to high. (No slave addressed).
	CSSET; RSCLEAR;
     f74:	80 e1       	ldi	r24, 0x10	; 16
     f76:	85 83       	std	Z+5, r24	; 0x05
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	86 83       	std	Z+6, r24	; 0x06
	
	// Initialize SPI master. 
	// The prescaler is setup assuming a 32 MHz clock.
	SPI_MasterInit(&display_spiMaster,
     f7c:	87 e6       	ldi	r24, 0x67	; 103
     f7e:	91 e2       	ldi	r25, 0x21	; 33
     f80:	60 ec       	ldi	r22, 0xC0	; 192
     f82:	78 e0       	ldi	r23, 0x08	; 8
     f84:	40 e4       	ldi	r20, 0x40	; 64
     f86:	56 e0       	ldi	r21, 0x06	; 6
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	ee 24       	eor	r14, r14
     f8e:	cc 24       	eor	r12, r12
     f90:	32 e0       	ldi	r19, 0x02	; 2
     f92:	a3 2e       	mov	r10, r19
     f94:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_MasterInit>
	               false,
	               SPI_PRESCALER_DIV64_gc); 


	//strobe the reset line
	DISPLAY_SPIPORT.OUTCLR = DISPLAY_RESETPIN_bm;
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	f4 01       	movw	r30, r8
     f9c:	86 83       	std	Z+6, r24	; 0x06
     f9e:	e0 e8       	ldi	r30, 0x80	; 128
     fa0:	fe e3       	ldi	r31, 0x3E	; 62
     fa2:	31 97       	sbiw	r30, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <display_initDevice+0x4e>
	_delay_ms(2);
	DISPLAY_SPIPORT.OUTSET = DISPLAY_RESETPIN_bm;
     fa6:	f4 01       	movw	r30, r8
     fa8:	85 83       	std	Z+5, r24	; 0x05
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	53 e0       	ldi	r21, 0x03	; 3
     fb2:	ca 01       	movw	r24, r20
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <display_initDevice+0x60>
     fb8:	2f 5f       	subi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	28 3c       	cpi	r18, 0xC8	; 200
     fbe:	31 05       	cpc	r19, r1
     fc0:	c1 f7       	brne	.-16     	; 0xfb2 <display_initDevice+0x5e>
	_delay_ms(20);
}
     fc2:	0f 91       	pop	r16
     fc4:	ef 90       	pop	r14
     fc6:	cf 90       	pop	r12
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	08 95       	ret

00000fd0 <display_sendData>:
	CSSET;
}


//send data to the display
void display_sendData(uint8_t data) {
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	68 2f       	mov	r22, r24
	CSCLEAR; RSSET;
     fd8:	00 e4       	ldi	r16, 0x40	; 64
     fda:	16 e0       	ldi	r17, 0x06	; 6
     fdc:	50 e1       	ldi	r21, 0x10	; 16
     fde:	f5 2e       	mov	r15, r21
     fe0:	f8 01       	movw	r30, r16
     fe2:	f6 82       	std	Z+6, r15	; 0x06
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	85 83       	std	Z+5, r24	; 0x05
	SPI_MasterTransceiveByte(&display_spiMaster, data);
     fe8:	87 e6       	ldi	r24, 0x67	; 103
     fea:	91 e2       	ldi	r25, 0x21	; 33
     fec:	0e 94 16 0c 	call	0x182c	; 0x182c <SPI_MasterTransceiveByte>
	CSSET;
     ff0:	f8 01       	movw	r30, r16
     ff2:	f5 82       	std	Z+5, r15	; 0x05
}
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	08 95       	ret

00000ffc <display_sendCommand>:

//the SPI module handle
SPI_Master_t display_spiMaster;

//send a command to the display using SPI
void display_sendCommand(uint8_t cmd) {
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	68 2f       	mov	r22, r24
	CSCLEAR; RSCLEAR;
    1004:	00 e4       	ldi	r16, 0x40	; 64
    1006:	16 e0       	ldi	r17, 0x06	; 6
    1008:	70 e1       	ldi	r23, 0x10	; 16
    100a:	f7 2e       	mov	r15, r23
    100c:	f8 01       	movw	r30, r16
    100e:	f6 82       	std	Z+6, r15	; 0x06
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	86 83       	std	Z+6, r24	; 0x06
	SPI_MasterTransceiveByte(&display_spiMaster, cmd);
    1014:	87 e6       	ldi	r24, 0x67	; 103
    1016:	91 e2       	ldi	r25, 0x21	; 33
    1018:	0e 94 16 0c 	call	0x182c	; 0x182c <SPI_MasterTransceiveByte>
	CSSET;
    101c:	f8 01       	movw	r30, r16
    101e:	f5 82       	std	Z+5, r15	; 0x05
}
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	08 95       	ret

00001028 <TC0_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    1028:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
    102a:	80 81       	ld	r24, Z
    102c:	80 7f       	andi	r24, 0xF0	; 240
    102e:	86 2b       	or	r24, r22
    1030:	80 83       	st	Z, r24
}
    1032:	08 95       	ret

00001034 <TC1_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC1_ConfigClockSource( volatile TC1_t * tc, TC_CLKSEL_t clockSelection )
{
    1034:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | clockSelection;
    1036:	80 81       	ld	r24, Z
    1038:	80 7f       	andi	r24, 0xF0	; 240
    103a:	86 2b       	or	r24, r22
    103c:	80 83       	st	Z, r24
}
    103e:	08 95       	ret

00001040 <TC0_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    1040:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
    1042:	81 81       	ldd	r24, Z+1	; 0x01
    1044:	88 7f       	andi	r24, 0xF8	; 248
    1046:	86 2b       	or	r24, r22
    1048:	81 83       	std	Z+1, r24	; 0x01
}
    104a:	08 95       	ret

0000104c <TC1_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC1_ConfigWGM( volatile TC1_t * tc, TC_WGMODE_t wgm )
{
    104c:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC1_WGMODE_gm ) | wgm;
    104e:	81 81       	ldd	r24, Z+1	; 0x01
    1050:	88 7f       	andi	r24, 0xF8	; 248
    1052:	86 2b       	or	r24, r22
    1054:	81 83       	std	Z+1, r24	; 0x01
}
    1056:	08 95       	ret

00001058 <TC0_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC0_ConfigInputCapture( volatile TC0_t * tc, TC_EVSEL_t eventSource )
{
    1058:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC0_EVSEL_gm | TC0_EVACT_gm ) ) |
    105a:	83 81       	ldd	r24, Z+3	; 0x03
    105c:	80 71       	andi	r24, 0x10	; 16
    105e:	80 62       	ori	r24, 0x20	; 32
    1060:	86 2b       	or	r24, r22
    1062:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    1064:	08 95       	ret

00001066 <TC1_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
    1066:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
    1068:	83 81       	ldd	r24, Z+3	; 0x03
    106a:	80 71       	andi	r24, 0x10	; 16
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	86 2b       	or	r24, r22
    1070:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    1072:	08 95       	ret

00001074 <TC0_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    1074:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	60 7f       	andi	r22, 0xF0	; 240
    107a:	86 2b       	or	r24, r22
    107c:	81 83       	std	Z+1, r24	; 0x01
}
    107e:	08 95       	ret

00001080 <TC1_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
    1080:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    1082:	81 81       	ldd	r24, Z+1	; 0x01
    1084:	60 73       	andi	r22, 0x30	; 48
    1086:	86 2b       	or	r24, r22
    1088:	81 83       	std	Z+1, r24	; 0x01
}
    108a:	08 95       	ret

0000108c <TC0_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    108c:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    108e:	81 81       	ldd	r24, Z+1	; 0x01
    1090:	60 7f       	andi	r22, 0xF0	; 240
    1092:	60 95       	com	r22
    1094:	86 23       	and	r24, r22
    1096:	81 83       	std	Z+1, r24	; 0x01
}
    1098:	08 95       	ret

0000109a <TC1_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
    109a:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    109c:	81 81       	ldd	r24, Z+1	; 0x01
    109e:	60 73       	andi	r22, 0x30	; 48
    10a0:	60 95       	com	r22
    10a2:	86 23       	and	r24, r22
    10a4:	81 83       	std	Z+1, r24	; 0x01
}
    10a6:	08 95       	ret

000010a8 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    10a8:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    10aa:	86 81       	ldd	r24, Z+6	; 0x06
    10ac:	8c 7f       	andi	r24, 0xFC	; 252
    10ae:	86 2b       	or	r24, r22
    10b0:	86 83       	std	Z+6, r24	; 0x06
}
    10b2:	08 95       	ret

000010b4 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
    10b4:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	8c 7f       	andi	r24, 0xFC	; 252
    10ba:	86 2b       	or	r24, r22
    10bc:	86 83       	std	Z+6, r24	; 0x06
}
    10be:	08 95       	ret

000010c0 <TC0_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC0_SetErrorIntLevel( volatile TC0_t * tc, TC_ERRINTLVL_t intLevel )
{
    10c0:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_ERRINTLVL_gm ) | intLevel;
    10c2:	86 81       	ldd	r24, Z+6	; 0x06
    10c4:	83 7f       	andi	r24, 0xF3	; 243
    10c6:	86 2b       	or	r24, r22
    10c8:	86 83       	std	Z+6, r24	; 0x06
}
    10ca:	08 95       	ret

000010cc <TC1_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC1_SetErrorIntLevel( volatile TC1_t * tc, TC_ERRINTLVL_t intLevel )
{
    10cc:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_ERRINTLVL_gm ) | intLevel;
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	83 7f       	andi	r24, 0xF3	; 243
    10d2:	86 2b       	or	r24, r22
    10d4:	86 83       	std	Z+6, r24	; 0x06
}
    10d6:	08 95       	ret

000010d8 <TC0_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCAIntLevel( volatile TC0_t * tc, TC_CCAINTLVL_t intLevel )
{
    10d8:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCAINTLVL_gm ) | intLevel;
    10da:	87 81       	ldd	r24, Z+7	; 0x07
    10dc:	8c 7f       	andi	r24, 0xFC	; 252
    10de:	86 2b       	or	r24, r22
    10e0:	87 83       	std	Z+7, r24	; 0x07
}
    10e2:	08 95       	ret

000010e4 <TC1_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC1_SetCCAIntLevel( volatile TC1_t * tc, TC_CCAINTLVL_t intLevel )
{
    10e4:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCAINTLVL_gm ) | intLevel;
    10e6:	87 81       	ldd	r24, Z+7	; 0x07
    10e8:	8c 7f       	andi	r24, 0xFC	; 252
    10ea:	86 2b       	or	r24, r22
    10ec:	87 83       	std	Z+7, r24	; 0x07
}
    10ee:	08 95       	ret

000010f0 <TC0_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC0_SetCCBIntLevel( volatile TC0_t * tc, TC_CCBINTLVL_t intLevel )
{
    10f0:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCBINTLVL_gm ) | intLevel;
    10f2:	87 81       	ldd	r24, Z+7	; 0x07
    10f4:	83 7f       	andi	r24, 0xF3	; 243
    10f6:	86 2b       	or	r24, r22
    10f8:	87 83       	std	Z+7, r24	; 0x07
}
    10fa:	08 95       	ret

000010fc <TC1_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC1_SetCCBIntLevel( volatile TC1_t * tc, TC_CCBINTLVL_t intLevel )
{
    10fc:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCBINTLVL_gm ) | intLevel;
    10fe:	87 81       	ldd	r24, Z+7	; 0x07
    1100:	83 7f       	andi	r24, 0xF3	; 243
    1102:	86 2b       	or	r24, r22
    1104:	87 83       	std	Z+7, r24	; 0x07
}
    1106:	08 95       	ret

00001108 <TC0_SetCCCIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCCIntLevel( volatile TC0_t * tc, TC_CCCINTLVL_t intLevel )
{
    1108:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCCINTLVL_gm ) | intLevel;
    110a:	87 81       	ldd	r24, Z+7	; 0x07
    110c:	8f 7c       	andi	r24, 0xCF	; 207
    110e:	86 2b       	or	r24, r22
    1110:	87 83       	std	Z+7, r24	; 0x07
}
    1112:	08 95       	ret

00001114 <TC0_SetCCDIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCDIntLevel( volatile TC0_t * tc, TC_CCDINTLVL_t intLevel )
{
    1114:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCDINTLVL_gm ) | intLevel;
    1116:	87 81       	ldd	r24, Z+7	; 0x07
    1118:	8f 73       	andi	r24, 0x3F	; 63
    111a:	86 2b       	or	r24, r22
    111c:	87 83       	std	Z+7, r24	; 0x07
}
    111e:	08 95       	ret

00001120 <TC0_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 0 module instance.
 */
void TC0_Reset( volatile TC0_t * tc )
{
    1120:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1122:	80 81       	ld	r24, Z
    1124:	80 7f       	andi	r24, 0xF0	; 240
    1126:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    1128:	8c e0       	ldi	r24, 0x0C	; 12
    112a:	81 87       	std	Z+9, r24	; 0x09
}
    112c:	08 95       	ret

0000112e <TC1_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 1 module instance.
 */
void TC1_Reset( volatile TC1_t * tc )
{
    112e:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1130:	80 81       	ld	r24, Z
    1132:	80 7f       	andi	r24, 0xF0	; 240
    1134:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    1136:	8c e0       	ldi	r24, 0x0C	; 12
    1138:	81 87       	std	Z+9, r24	; 0x09
}
    113a:	08 95       	ret

0000113c <AC_Enable>:
 *  \param  ac         Pointer to Analog Comparator module.
 *  \param  comp       Which submodule, 0 or 1.
 *  \param  highSpeed  Set to false for low-power, true for high-speed.
 */
void AC_Enable(AC_t * ac, AC_COMP_t comp, bool highSpeed)
{
    113c:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    113e:	66 23       	and	r22, r22
    1140:	51 f4       	brne	.+20     	; 0x1156 <AC_Enable+0x1a>
		ac->AC0CTRL = (ac->AC0CTRL & ~AC_HSMODE_bm)|
    1142:	90 81       	ld	r25, Z
    1144:	44 23       	and	r20, r20
    1146:	11 f4       	brne	.+4      	; 0x114c <AC_Enable+0x10>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	01 c0       	rjmp	.+2      	; 0x114e <AC_Enable+0x12>
    114c:	89 e0       	ldi	r24, 0x09	; 9
    114e:	97 7f       	andi	r25, 0xF7	; 247
    1150:	89 2b       	or	r24, r25
    1152:	80 83       	st	Z, r24
    1154:	08 95       	ret
 		              (AC_ENABLE_bm | (highSpeed ? AC_HSMODE_bm : 0));
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~AC_HSMODE_bm)|
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	44 23       	and	r20, r20
    115a:	11 f4       	brne	.+4      	; 0x1160 <AC_Enable+0x24>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <AC_Enable+0x26>
    1160:	89 e0       	ldi	r24, 0x09	; 9
    1162:	97 7f       	andi	r25, 0xF7	; 247
    1164:	89 2b       	or	r24, r25
    1166:	81 83       	std	Z+1, r24	; 0x01
    1168:	08 95       	ret

0000116a <AC_Disable>:
 *
 *  \param  ac    Pointer to Analog Comparator module.
 *  \param  comp  Which submodule, 0 or 1.
 */
void AC_Disable(AC_t * ac, AC_COMP_t comp)
{
    116a:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    116c:	66 23       	and	r22, r22
    116e:	21 f4       	brne	.+8      	; 0x1178 <AC_Disable+0xe>
		ac->AC0CTRL &= ~AC_ENABLE_bm;
    1170:	80 81       	ld	r24, Z
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	80 83       	st	Z, r24
    1176:	08 95       	ret
	}else{
		ac->AC1CTRL &= ~AC_ENABLE_bm;
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	8e 7f       	andi	r24, 0xFE	; 254
    117c:	81 83       	std	Z+1, r24	; 0x01
    117e:	08 95       	ret

00001180 <AC_ConfigInterrupt>:
 *  \param  interruptMode   Interrupt mode setting (falling, rising, toggle).
 *  \param  interruptLevel  Interrupt level setting.
 */
void AC_ConfigInterrupt(AC_t * ac, AC_COMP_t comp, AC_INTMODE_t interruptMode,
						AC_INTLVL_t interruptLevel)
{
    1180:	fc 01       	movw	r30, r24
    1182:	24 2b       	or	r18, r20
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    1184:	66 23       	and	r22, r22
    1186:	29 f4       	brne	.+10     	; 0x1192 <AC_ConfigInterrupt+0x12>
		ac->AC0CTRL = (ac->AC0CTRL & ~(AC_INTMODE_gm | AC_INTLVL_gm))|
    1188:	80 81       	ld	r24, Z
    118a:	8f 70       	andi	r24, 0x0F	; 15
    118c:	28 2b       	or	r18, r24
    118e:	20 83       	st	Z, r18
    1190:	08 95       	ret
		              ((uint8_t) interruptMode | interruptLevel);
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~(AC_INTMODE_gm | AC_INTLVL_gm)) |
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	28 2b       	or	r18, r24
    1198:	21 83       	std	Z+1, r18	; 0x01
    119a:	08 95       	ret

0000119c <AC_ConfigHysteresis>:
 *  \param  ac              Pointer to Analog Comparator module.
 *  \param  comp            Which submodule, 0 or 1.
 *  \param  hysteresisMode  Hysteresis setting (none, small, large).
 */
void AC_ConfigHysteresis(AC_t * ac, AC_COMP_t comp, AC_HYSMODE_t hysteresisMode)
{
    119c:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    119e:	66 23       	and	r22, r22
    11a0:	29 f4       	brne	.+10     	; 0x11ac <AC_ConfigHysteresis+0x10>
		ac->AC0CTRL = (ac->AC0CTRL & ~AC_HYSMODE_gm) | hysteresisMode;
    11a2:	80 81       	ld	r24, Z
    11a4:	89 7f       	andi	r24, 0xF9	; 249
    11a6:	84 2b       	or	r24, r20
    11a8:	80 83       	st	Z, r24
    11aa:	08 95       	ret
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~AC_HYSMODE_gm) | hysteresisMode;
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	89 7f       	andi	r24, 0xF9	; 249
    11b0:	84 2b       	or	r24, r20
    11b2:	81 83       	std	Z+1, r24	; 0x01
    11b4:	08 95       	ret

000011b6 <AC_ConfigMUX>:
 *  \param  comp  Which submodule, 0 or 1.
 *  \param  pos   Positive MUX input.
 *  \param  neg   Negative MUX input.
 */
void AC_ConfigMUX(AC_t * ac, AC_COMP_t comp, AC_MUXPOS_t pos, AC_MUXNEG_t neg)
{
    11b6:	fc 01       	movw	r30, r24
    11b8:	24 2b       	or	r18, r20
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    11ba:	66 23       	and	r22, r22
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <AC_ConfigMUX+0x12>
		ac->AC0MUXCTRL = (ac->AC0MUXCTRL & ~(AC_MUXPOS_gm | AC_MUXNEG_gm)) |
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	80 7c       	andi	r24, 0xC0	; 192
    11c2:	28 2b       	or	r18, r24
    11c4:	22 83       	std	Z+2, r18	; 0x02
    11c6:	08 95       	ret
		                 ((uint8_t) pos | neg);
	}else{
		ac->AC1MUXCTRL = (ac->AC1MUXCTRL & ~(AC_MUXPOS_gm | AC_MUXNEG_gm)) |
    11c8:	83 81       	ldd	r24, Z+3	; 0x03
    11ca:	80 7c       	andi	r24, 0xC0	; 192
    11cc:	28 2b       	or	r18, r24
    11ce:	23 83       	std	Z+3, r18	; 0x03
    11d0:	08 95       	ret

000011d2 <AC_ConfigVoltageScaler>:
 *
 *  \param  ac              Pointer to Analog Comparator module.
 *  \param  scaleFactor     Scale factor in number of 1/64ths.
 */
void AC_ConfigVoltageScaler(AC_t * ac, uint8_t scaleFactor)
{
    11d2:	fc 01       	movw	r30, r24
	/* Scale factor gets truncated to bit field size. */
	ac->CTRLB = (ac->CTRLB & ~AC_SCALEFAC_gm) |
    11d4:	85 81       	ldd	r24, Z+5	; 0x05
    11d6:	6f 73       	andi	r22, 0x3F	; 63
    11d8:	80 7c       	andi	r24, 0xC0	; 192
    11da:	86 2b       	or	r24, r22
    11dc:	85 83       	std	Z+5, r24	; 0x05
	            ((scaleFactor << AC_SCALEFAC_bp) & AC_SCALEFAC_gm);
}
    11de:	08 95       	ret

000011e0 <AC_EnableWindowMode>:
 *  \note Both submodules in the Analog Comparator must be enabled to make the
 *        window mode work. This is done by using the AC_enable function.
 */
void AC_EnableWindowMode(AC_t * ac, AC_WINTMODE_t interruptMode,
                         AC_WINTLVL_t interruptLevel)
{
    11e0:	fc 01       	movw	r30, r24
	ac->WINCTRL = (ac->WINCTRL & ~(AC_WINTMODE_gm | AC_WINTLVL_gm)) |
    11e2:	86 81       	ldd	r24, Z+6	; 0x06
    11e4:	60 61       	ori	r22, 0x10	; 16
    11e6:	64 2b       	or	r22, r20
    11e8:	80 7f       	andi	r24, 0xF0	; 240
    11ea:	86 2b       	or	r24, r22
    11ec:	86 83       	std	Z+6, r24	; 0x06
	              (AC_WEN_bm | interruptMode | interruptLevel);
}
    11ee:	08 95       	ret

000011f0 <AC_DisableWindowMode>:
/*! \brief  This function disables the window mode.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_DisableWindowMode(AC_t * ac)
{
    11f0:	fc 01       	movw	r30, r24
	ac->WINCTRL = ~AC_WEN_bm;
    11f2:	8f ee       	ldi	r24, 0xEF	; 239
    11f4:	86 83       	std	Z+6, r24	; 0x06
}
    11f6:	08 95       	ret

000011f8 <AC_EnableComparator0_Output>:
/*! \brief  This function enables routing of comparator 0 output to pin 0.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_EnableComparator0_Output(AC_t * ac)
{
    11f8:	fc 01       	movw	r30, r24
	ac->CTRLA |= AC_AC0OUT_bm;
    11fa:	84 81       	ldd	r24, Z+4	; 0x04
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	84 83       	std	Z+4, r24	; 0x04
}
    1200:	08 95       	ret

00001202 <AC_DisableComparator0_Output>:
/*! \brief  This function disables routing of comparator 0 output to pin 0.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_DisableComparator0_Output(AC_t * ac)
{
    1202:	fc 01       	movw	r30, r24
	ac->CTRLA &= ~AC_AC0OUT_bm;
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	8e 7f       	andi	r24, 0xFE	; 254
    1208:	84 83       	std	Z+4, r24	; 0x04
}
    120a:	08 95       	ret

0000120c <AC_GetComparatorState>:
 *  \param  comp  Which submodule, 0 or 1.
 *
 *  \return  0 if positive input is below negative, non-zero otherwise.
 */
uint8_t AC_GetComparatorState(AC_t * ac, AC_COMP_t comp)
{
    120c:	fc 01       	movw	r30, r24
	uint8_t state = 0;

	/* Access correct bits based on which comparator submodule indicated. */
	if(comp == 0){
    120e:	66 23       	and	r22, r22
    1210:	19 f4       	brne	.+6      	; 0x1218 <AC_GetComparatorState+0xc>
		state = ac->STATUS & AC_AC0STATE_bm;
    1212:	87 81       	ldd	r24, Z+7	; 0x07
    1214:	80 71       	andi	r24, 0x10	; 16
    1216:	08 95       	ret
	}else if(comp == 1){
    1218:	61 30       	cpi	r22, 0x01	; 1
    121a:	11 f0       	breq	.+4      	; 0x1220 <AC_GetComparatorState+0x14>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	08 95       	ret
		state = ac->STATUS & AC_AC1STATE_bm;
    1220:	87 81       	ldd	r24, Z+7	; 0x07
    1222:	80 72       	andi	r24, 0x20	; 32
	}else{

	}

	return state;
}
    1224:	08 95       	ret

00001226 <AC_GetWindowState>:
 *  \param  ac  Pointer to Analog Comparator module.
 *
 *  \return  Window state.
 */
uint8_t AC_GetWindowState(AC_t * ac)
{
    1226:	fc 01       	movw	r30, r24
	return (ac->STATUS & AC_WSTATE_gm);
    1228:	87 81       	ldd	r24, Z+7	; 0x07
}
    122a:	80 7c       	andi	r24, 0xC0	; 192
    122c:	08 95       	ret

0000122e <AC_WaitForComparator_Blocking>:
 *
 *  \param  ac    Pointer to Analog Comparator module.
 *  \param  comp  Which submodule, 0 or 1.
 */
void AC_WaitForComparator_Blocking(AC_t * ac, AC_COMP_t comp)
{
    122e:	fc 01       	movw	r30, r24
	/* Access correct bits based on which comparator submodule indicated.*/
	if(comp == 0){
    1230:	66 23       	and	r22, r22
    1232:	29 f4       	brne	.+10     	; 0x123e <AC_WaitForComparator_Blocking+0x10>
		/* Wait for interrupt flag to be set and clear it. */
		do {} while ((ac->STATUS & AC_AC0IF_bm) == 0);
    1234:	87 81       	ldd	r24, Z+7	; 0x07
    1236:	80 ff       	sbrs	r24, 0
    1238:	fd cf       	rjmp	.-6      	; 0x1234 <AC_WaitForComparator_Blocking+0x6>
		ac->STATUS = AC_AC0IF_bm;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <AC_WaitForComparator_Blocking+0x18>
	}else{
		/* Wait for interrupt flag to be set and clear it. */
		do {} while ((ac->STATUS & AC_AC1IF_bm) == 0);
    123e:	87 81       	ldd	r24, Z+7	; 0x07
    1240:	81 ff       	sbrs	r24, 1
    1242:	fd cf       	rjmp	.-6      	; 0x123e <AC_WaitForComparator_Blocking+0x10>
		ac->STATUS = AC_AC1IF_bm;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	87 83       	std	Z+7, r24	; 0x07
    1248:	08 95       	ret

0000124a <AC_WaitForWindow_Blocking>:
 *  Which event to wait for is decided by the window interrupt mode setting.
 *
 *  \param  ac    Pointer to Analog Comparator module.
 */
void AC_WaitForWindow_Blocking(AC_t * ac)
{
    124a:	fc 01       	movw	r30, r24
	/* Wait for interrupt flag to be set and clear it. */
	do {} while ((ac->STATUS & AC_WIF_bm) == 0);
    124c:	87 81       	ldd	r24, Z+7	; 0x07
    124e:	82 ff       	sbrs	r24, 2
    1250:	fd cf       	rjmp	.-6      	; 0x124c <AC_WaitForWindow_Blocking+0x2>
	ac->STATUS = AC_WIF_bm;
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	87 83       	std	Z+7, r24	; 0x07
}
    1256:	08 95       	ret

00001258 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    1258:	dc 01       	movw	r26, r24
	if(&ADCA == adc){
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	a0 30       	cpi	r26, 0x00	; 0
    125e:	b8 07       	cpc	r27, r24
    1260:	81 f4       	brne	.+32     	; 0x1282 <ADC_CalibrationValues_Load+0x2a>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    1268:	e0 e2       	ldi	r30, 0x20	; 32
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    126e:	10 92 ca 01 	sts	0x01CA, r1
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
	if(&ADCA == adc){
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    1272:	1c 96       	adiw	r26, 0x0c	; 12
    1274:	ec 93       	st	X, r30
    1276:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1278:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    127c:	e1 e2       	ldi	r30, 0x21	; 33
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <ADC_CalibrationValues_Load+0x48>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    1288:	e4 e2       	ldi	r30, 0x24	; 36
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    128e:	10 92 ca 01 	sts	0x01CA, r1
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    1292:	1c 96       	adiw	r26, 0x0c	; 12
    1294:	ec 93       	st	X, r30
    1296:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1298:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    129c:	e5 e2       	ldi	r30, 0x25	; 37
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    12a2:	10 92 ca 01 	sts	0x01CA, r1
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    12a6:	1d 96       	adiw	r26, 0x0d	; 13
    12a8:	ec 93       	st	X, r30
    12aa:	08 95       	ret

000012ac <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    12ac:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    12b2:	24 81       	ldd	r18, Z+4	; 0x04
    12b4:	35 81       	ldd	r19, Z+5	; 0x05
    12b6:	26 1b       	sub	r18, r22
    12b8:	31 09       	sbc	r19, r1

	return answer;
}
    12ba:	c9 01       	movw	r24, r18
    12bc:	08 95       	ret

000012be <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    12be:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    12c4:	24 81       	ldd	r18, Z+4	; 0x04
    12c6:	35 81       	ldd	r19, Z+5	; 0x05
    12c8:	77 27       	eor	r23, r23
    12ca:	67 fd       	sbrc	r22, 7
    12cc:	70 95       	com	r23
    12ce:	26 1b       	sub	r18, r22
    12d0:	37 0b       	sbc	r19, r23

	return answer;
}
    12d2:	c9 01       	movw	r24, r18
    12d4:	08 95       	ret

000012d6 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    12d6:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    12dc:	24 81       	ldd	r18, Z+4	; 0x04
    12de:	35 81       	ldd	r19, Z+5	; 0x05
}
    12e0:	c9 01       	movw	r24, r18
    12e2:	08 95       	ret

000012e4 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    12e4:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    12ea:	84 81       	ldd	r24, Z+4	; 0x04
}
    12ec:	08 95       	ret

000012ee <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    12ee:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    12f4:	85 81       	ldd	r24, Z+5	; 0x05
}
    12f6:	08 95       	ret

000012f8 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    12f8:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    12fa:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    12fc:	14 82       	std	Z+4, r1	; 0x04
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b2 e0       	ldi	r27, 0x02	; 2
    1302:	11 97       	sbiw	r26, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <ADC_Wait_8MHz+0xa>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    1306:	84 83       	std	Z+4, r24	; 0x04
}
    1308:	08 95       	ret

0000130a <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    130a:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    130c:	94 81       	ldd	r25, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	84 83       	std	Z+4, r24	; 0x04
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b4 e0       	ldi	r27, 0x04	; 4
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <ADC_Wait_32MHz+0xc>

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    131a:	94 83       	std	Z+4, r25	; 0x04
}
    131c:	08 95       	ret

0000131e <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    131e:	fb 01       	movw	r30, r22
    if (oversampling)
    1320:	44 23       	and	r20, r20
    1322:	d9 f0       	breq	.+54     	; 0x135a <ADC_Offset_Get_Unsigned+0x3c>
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    132c:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    132e:	80 81       	ld	r24, Z
    1330:	80 68       	ori	r24, 0x80	; 128
    1332:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    1334:	83 81       	ldd	r24, Z+3	; 0x03
    1336:	80 ff       	sbrs	r24, 0
    1338:	fd cf       	rjmp	.-6      	; 0x1334 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    133a:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    133c:	84 81       	ldd	r24, Z+4	; 0x04
    133e:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    1340:	28 0f       	add	r18, r24
    1342:	39 1f       	adc	r19, r25
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    1344:	4f 5f       	subi	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	44 30       	cpi	r20, 0x04	; 4
    134a:	51 05       	cpc	r21, r1
    134c:	81 f7       	brne	.-32     	; 0x132e <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    134e:	36 95       	lsr	r19
    1350:	27 95       	ror	r18
    1352:	36 95       	lsr	r19
    1354:	27 95       	ror	r18
    1356:	82 2f       	mov	r24, r18
    1358:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    1360:	83 81       	ldd	r24, Z+3	; 0x03
    1362:	80 ff       	sbrs	r24, 0
    1364:	fd cf       	rjmp	.-6      	; 0x1360 <ADC_Offset_Get_Unsigned+0x42>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
    136e:	08 95       	ret

00001370 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    1370:	fb 01       	movw	r30, r22
    if (oversampling)
    1372:	44 23       	and	r20, r20
    1374:	d9 f0       	breq	.+54     	; 0x13ac <ADC_Offset_Get_Signed+0x3c>
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    137e:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    1380:	80 81       	ld	r24, Z
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    1386:	83 81       	ldd	r24, Z+3	; 0x03
    1388:	80 ff       	sbrs	r24, 0
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    138c:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    1392:	48 0f       	add	r20, r24
    1394:	59 1f       	adc	r21, r25
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	24 30       	cpi	r18, 0x04	; 4
    139c:	31 05       	cpc	r19, r1
    139e:	81 f7       	brne	.-32     	; 0x1380 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    13a0:	ca 01       	movw	r24, r20
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 85 0c 	call	0x190a	; 0x190a <__divmodhi4>
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <ADC_Offset_Get_Signed+0x52>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	80 ff       	sbrs	r24, 0
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <ADC_Offset_Get_Signed+0x42>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    13bc:	84 81       	ldd	r24, Z+4	; 0x04
    13be:	95 81       	ldd	r25, Z+5	; 0x05
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    13c0:	68 2f       	mov	r22, r24
      
      return offset;
    }
}
    13c2:	86 2f       	mov	r24, r22
    13c4:	08 95       	ret

000013c6 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    13c6:	aa ec       	ldi	r26, 0xCA	; 202
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    13ce:	e8 2f       	mov	r30, r24
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    13d4:	1c 92       	st	X, r1

	return result;
}
    13d6:	8e 2f       	mov	r24, r30
    13d8:	08 95       	ret

000013da <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    13da:	0f 93       	push	r16
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    13e6:	2f b7       	in	r18, 0x3f	; 63
    13e8:	29 83       	std	Y+1, r18	; 0x01
    13ea:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    13ec:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    13ee:	fc 01       	movw	r30, r24
    13f0:	08 ed       	ldi	r16, 0xD8	; 216
    13f2:	04 bf       	out	0x34, r16	; 52
    13f4:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	8f bf       	out	0x3f, r24	; 63
#endif
}
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    1404:	66 23       	and	r22, r22
    1406:	11 f4       	brne	.+4      	; 0x140c <CLKSYS_XOSC_Config+0x8>
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	01 c0       	rjmp	.+2      	; 0x140e <CLKSYS_XOSC_Config+0xa>
    140c:	90 e2       	ldi	r25, 0x20	; 32
    140e:	48 2b       	or	r20, r24
    1410:	94 2b       	or	r25, r20
    1412:	e0 e5       	ldi	r30, 0x50	; 80
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    1418:	08 95       	ret

0000141a <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    141a:	6f 71       	andi	r22, 0x1F	; 31
    141c:	68 2b       	or	r22, r24
    141e:	e0 e5       	ldi	r30, 0x50	; 80
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	65 83       	std	Z+5, r22	; 0x05
}
    1424:	08 95       	ret

00001426 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    1426:	e0 e5       	ldi	r30, 0x50	; 80
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	20 81       	ld	r18, Z
    142c:	98 2f       	mov	r25, r24
    142e:	90 95       	com	r25
    1430:	92 23       	and	r25, r18
    1432:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    1434:	90 81       	ld	r25, Z
	return clkEnabled;
}
    1436:	89 23       	and	r24, r25
    1438:	08 95       	ret

0000143a <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    143a:	0f 93       	push	r16
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    1446:	9f b7       	in	r25, 0x3f	; 63
    1448:	99 83       	std	Y+1, r25	; 0x01
    144a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    144c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    144e:	68 2b       	or	r22, r24
    1450:	81 e4       	ldi	r24, 0x41	; 65
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	fc 01       	movw	r30, r24
    1456:	08 ed       	ldi	r16, 0xD8	; 216
    1458:	04 bf       	out	0x34, r16	; 52
    145a:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    146a:	0f 93       	push	r16
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    1476:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    147a:	9f b7       	in	r25, 0x3f	; 63
    147c:	99 83       	std	Y+1, r25	; 0x01
    147e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    1480:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1482:	a0 e4       	ldi	r26, 0x40	; 64
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	28 7f       	andi	r18, 0xF8	; 248
    1488:	28 2b       	or	r18, r24
    148a:	fd 01       	movw	r30, r26
    148c:	08 ed       	ldi	r16, 0xD8	; 216
    148e:	04 bf       	out	0x34, r16	; 52
    1490:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1492:	99 81       	ldd	r25, Y+1	; 0x01
    1494:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
    1496:	9c 91       	ld	r25, X
	return clkCtrl;
}
    1498:	89 23       	and	r24, r25
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    14a4:	e0 e4       	ldi	r30, 0x40	; 64
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	91 7f       	andi	r25, 0xF1	; 241
    14ac:	91 60       	ori	r25, 0x01	; 1
    14ae:	98 2b       	or	r25, r24
    14b0:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    14b2:	08 95       	ret

000014b4 <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
    14b4:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    14b6:	30 91 56 00 	lds	r19, 0x0056
    14ba:	66 23       	and	r22, r22
    14bc:	11 f0       	breq	.+4      	; 0x14c2 <CLKSYS_AutoCalibration_Enable+0xe>
    14be:	98 2f       	mov	r25, r24
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <CLKSYS_AutoCalibration_Enable+0x10>
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	82 2f       	mov	r24, r18
    14c6:	80 95       	com	r24
    14c8:	83 23       	and	r24, r19
    14ca:	98 2b       	or	r25, r24
    14cc:	e0 e5       	ldi	r30, 0x50	; 80
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    14d2:	21 30       	cpi	r18, 0x01	; 1
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    14d6:	80 91 68 00 	lds	r24, 0x0068
    14da:	81 60       	ori	r24, 0x01	; 1
    14dc:	80 93 68 00 	sts	0x0068, r24
    14e0:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    14e6:	80 91 60 00 	lds	r24, 0x0060
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	80 93 60 00 	sts	0x0060, r24
    14f0:	08 95       	ret

000014f2 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
    14f2:	0f 93       	push	r16
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    14fe:	8f b7       	in	r24, 0x3f	; 63
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    1504:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1506:	23 e0       	ldi	r18, 0x03	; 3
    1508:	83 e5       	ldi	r24, 0x53	; 83
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	fc 01       	movw	r30, r24
    150e:	08 ed       	ldi	r16, 0xD8	; 216
    1510:	04 bf       	out	0x34, r16	; 52
    1512:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
    1522:	0f 93       	push	r16
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    152e:	8f b7       	in	r24, 0x3f	; 63
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    1534:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	82 e4       	ldi	r24, 0x42	; 66
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	08 ed       	ldi	r16, 0xD8	; 216
    1540:	04 bf       	out	0x34, r16	; 52
    1542:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <DAC_SingleChannel_Enable>:
 *  \param  leftAdjust  Set to true to make data registers left adjusted.
 */
void DAC_SingleChannel_Enable( volatile DAC_t * dac,
                              DAC_REFSEL_t convRef,
                              bool leftAdjust )
{
    1552:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_SINGLE_gc;
    1554:	81 81       	ldd	r24, Z+1	; 0x01
    1556:	8f 79       	andi	r24, 0x9F	; 159
    1558:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~(DAC_REFSEL_gm | DAC_LEFTADJ_bm) ) |
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	86 7e       	andi	r24, 0xE6	; 230
    155e:	68 2b       	or	r22, r24
    1560:	64 2b       	or	r22, r20
    1562:	62 83       	std	Z+2, r22	; 0x02
	             convRef | ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->CTRLA = ( dac->CTRLA & ~DAC_CH1EN_bm ) |
    1564:	80 81       	ld	r24, Z
    1566:	82 7f       	andi	r24, 0xF2	; 242
    1568:	85 60       	ori	r24, 0x05	; 5
    156a:	80 83       	st	Z, r24
	             DAC_CH0EN_bm | DAC_ENABLE_bm;
}
    156c:	08 95       	ret

0000156e <DAC_DualChannel_Enable>:
void DAC_DualChannel_Enable( volatile DAC_t * dac,
                            DAC_REFSEL_t convRef,
                            bool leftAdjust,
                            DAC_CONINTVAL_t sampleInterval,
                            DAC_REFRESH_t refreshInterval )
{
    156e:	0f 93       	push	r16
    1570:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_DUAL_gc;
    1572:	81 81       	ldd	r24, Z+1	; 0x01
    1574:	8f 79       	andi	r24, 0x9F	; 159
    1576:	80 64       	ori	r24, 0x40	; 64
    1578:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~( DAC_REFSEL_gm | DAC_LEFTADJ_bm ) ) |
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	86 7e       	andi	r24, 0xE6	; 230
    157e:	68 2b       	or	r22, r24
    1580:	64 2b       	or	r22, r20
    1582:	62 83       	std	Z+2, r22	; 0x02
	             convRef |
	             ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->TIMCTRL = (uint8_t) sampleInterval | refreshInterval;
    1584:	02 2b       	or	r16, r18
    1586:	04 83       	std	Z+4, r16	; 0x04
	dac->CTRLA |= DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
    1588:	80 81       	ld	r24, Z
    158a:	8d 60       	ori	r24, 0x0D	; 13
    158c:	80 83       	st	Z, r24
}
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <DAC_Channel_Write>:
 *  \param  dac     Pointer to DAC module register section.
 *  \param  data    Data to be converted.
 *  \param  channel Selected channel in the DAC module, either CH0 or CH1.
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
    1592:	fc 01       	movw	r30, r24
	if ( channel == CH0 ) {
    1594:	44 23       	and	r20, r20
    1596:	19 f4       	brne	.+6      	; 0x159e <DAC_Channel_Write+0xc>
		dac->CH0DATA = data;
    1598:	60 8f       	std	Z+24, r22	; 0x18
    159a:	71 8f       	std	Z+25, r23	; 0x19
    159c:	08 95       	ret
	} else {
		dac->CH1DATA = data;
    159e:	62 8f       	std	Z+26, r22	; 0x1a
    15a0:	73 8f       	std	Z+27, r23	; 0x1b
    15a2:	08 95       	ret

000015a4 <DAC_Channel_DataEmpty>:
 *
 *  \retval dacStatus True if data register is empty.
 *  \retval dacStatus False if data register is not empty.
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
    15a4:	fc 01       	movw	r30, r24
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
    15a6:	85 81       	ldd	r24, Z+5	; 0x05
    15a8:	66 23       	and	r22, r22
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <DAC_Channel_DataEmpty+0xe>
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DAC_Channel_DataEmpty+0x12>
    15b2:	22 e0       	ldi	r18, 0x02	; 2
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	28 23       	and	r18, r24
    15bc:	39 23       	and	r19, r25
    15be:	23 2b       	or	r18, r19
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <DAC_Channel_DataEmpty+0x20>
    15c2:	41 e0       	ldi	r20, 0x01	; 1
	return dacStatus;
}
    15c4:	84 2f       	mov	r24, r20
    15c6:	08 95       	ret

000015c8 <DAC_EventAction_Set>:
 *  \param  eventLine   Event line (0..7) to use for triggering conversions.
 */
void DAC_EventAction_Set( volatile DAC_t * dac,
                          DAC_TRIG_t trigChannel,
                          uint8_t eventLine )
{
    15c8:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_TRIG_1_1 ) | trigChannel;
    15ca:	81 81       	ldd	r24, Z+1	; 0x01
    15cc:	8c 7f       	andi	r24, 0xFC	; 252
    15ce:	86 2b       	or	r24, r22
    15d0:	81 83       	std	Z+1, r24	; 0x01
	dac->EVCTRL = eventLine & DAC_EVSEL_gm;
    15d2:	47 70       	andi	r20, 0x07	; 7
    15d4:	43 83       	std	Z+3, r20	; 0x03
}
    15d6:	08 95       	ret

000015d8 <EVSYS_SetEventSource>:
	volatile uint8_t * chMux;

	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the eventSource value.
	 */
	if (eventChannel < 8) {
    15d8:	88 30       	cpi	r24, 0x08	; 8
    15da:	10 f0       	brcs	.+4      	; 0x15e0 <EVSYS_SetEventSource+0x8>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	08 95       	ret
		chMux = &EVSYS.CH0MUX + eventChannel;
    15e0:	e8 2f       	mov	r30, r24
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	e0 58       	subi	r30, 0x80	; 128
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
		*chMux = eventSource;
    15e8:	60 83       	st	Z, r22
    15ea:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    15ec:	08 95       	ret

000015ee <EVSYS_SetEventChannelParameters>:
bool EVSYS_SetEventChannelParameters( uint8_t eventChannel,
                                      EVSYS_QDIRM_t QDIRM,
                                      bool QDIndexEnable,
                                      bool QDEnable,
                                      EVSYS_DIGFILT_t filterCoefficient )
{
    15ee:	0f 93       	push	r16

	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the configuration value.
	 */
	if ( ( eventChannel == 0 ) ||
    15f0:	88 23       	and	r24, r24
    15f2:	31 f0       	breq	.+12     	; 0x1600 <EVSYS_SetEventChannelParameters+0x12>
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	21 f0       	breq	.+8      	; 0x1600 <EVSYS_SetEventChannelParameters+0x12>
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	11 f0       	breq	.+4      	; 0x1600 <EVSYS_SetEventChannelParameters+0x12>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	10 c0       	rjmp	.+32     	; 0x1620 <EVSYS_SetEventChannelParameters+0x32>
	     ( eventChannel == 2 ) ||
	     ( eventChannel == 4 ) ) {

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
		*chCtrl = ( uint8_t ) QDIRM |
    1600:	44 23       	and	r20, r20
    1602:	11 f4       	brne	.+4      	; 0x1608 <EVSYS_SetEventChannelParameters+0x1a>
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	01 c0       	rjmp	.+2      	; 0x160a <EVSYS_SetEventChannelParameters+0x1c>
    1608:	90 e1       	ldi	r25, 0x10	; 16
    160a:	21 11       	cpse	r18, r1
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	06 2b       	or	r16, r22
    1610:	90 2b       	or	r25, r16
    1612:	92 2b       	or	r25, r18
	if ( ( eventChannel == 0 ) ||
	     ( eventChannel == 2 ) ||
	     ( eventChannel == 4 ) ) {

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
    1614:	e8 2f       	mov	r30, r24
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	e8 57       	subi	r30, 0x78	; 120
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
		*chCtrl = ( uint8_t ) QDIRM |
    161c:	90 83       	st	Z, r25
    161e:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <EVSYS_SetEventChannelFilter>:
                                  EVSYS_DIGFILT_t filterCoefficient )
{
	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the configuration value.
	 */
	if (eventChannel < 8) {
    1624:	88 30       	cpi	r24, 0x08	; 8
    1626:	10 f0       	brcs	.+4      	; 0x162c <EVSYS_SetEventChannelFilter+0x8>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	08 95       	ret

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
    162c:	e8 2f       	mov	r30, r24
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	e8 57       	subi	r30, 0x78	; 120
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
		*chCtrl = filterCoefficient;
    1634:	60 83       	st	Z, r22
    1636:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    1638:	08 95       	ret

0000163a <EVSYS_ManualTrigger>:
 *                    position n correspond to the channel n.
 */
void EVSYS_ManualTrigger( uint8_t dataMask, uint8_t strobeMask )
{
	/* The datamask register must be set before the strobe register. */
	EVSYS.DATA = dataMask;
    163a:	e0 e8       	ldi	r30, 0x80	; 128
    163c:	f1 e0       	ldi	r31, 0x01	; 1
    163e:	81 8b       	std	Z+17, r24	; 0x11
	EVSYS.STROBE = strobeMask;
    1640:	60 8b       	std	Z+16, r22	; 0x10
}
    1642:	08 95       	ret

00001644 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    1644:	e0 ea       	ldi	r30, 0xA0	; 160
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    164c:	98 ed       	ldi	r25, 0xD8	; 216
    164e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    1650:	82 83       	std	Z+2, r24	; 0x02
}
    1652:	08 95       	ret

00001654 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    1654:	e0 ea       	ldi	r30, 0xA0	; 160
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    165c:	98 ed       	ldi	r25, 0xD8	; 216
    165e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    1660:	82 83       	std	Z+2, r24	; 0x02
}
    1662:	08 95       	ret

00001664 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
    1664:	af 92       	push	r10
    1666:	cf 92       	push	r12
    1668:	ef 92       	push	r14
    166a:	0f 93       	push	r16
    166c:	dc 01       	movw	r26, r24
    166e:	fb 01       	movw	r30, r22
	spi->module         = module;
    1670:	6d 93       	st	X+, r22
    1672:	7c 93       	st	X, r23
    1674:	11 97       	sbiw	r26, 0x01	; 1
	spi->port           = port;
    1676:	12 96       	adiw	r26, 0x02	; 2
    1678:	4d 93       	st	X+, r20
    167a:	5c 93       	st	X, r21
    167c:	13 97       	sbiw	r26, 0x03	; 3
	spi->interrupted    = false;
    167e:	14 96       	adiw	r26, 0x04	; 4
    1680:	1c 92       	st	X, r1
    1682:	14 97       	sbiw	r26, 0x04	; 4

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    1684:	cc 20       	and	r12, r12
    1686:	11 f4       	brne	.+4      	; 0x168c <SPI_MasterInit+0x28>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 c0       	rjmp	.+2      	; 0x168e <SPI_MasterInit+0x2a>
    168c:	90 e8       	ldi	r25, 0x80	; 128
    168e:	22 23       	and	r18, r18
    1690:	11 f4       	brne	.+4      	; 0x1696 <SPI_MasterInit+0x32>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <SPI_MasterInit+0x34>
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	00 65       	ori	r16, 0x50	; 80
    169a:	0a 29       	or	r16, r10
    169c:	90 2b       	or	r25, r16
    169e:	89 2b       	or	r24, r25
    16a0:	80 83       	st	Z, r24
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    16a2:	ed 91       	ld	r30, X+
    16a4:	fc 91       	ld	r31, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	e1 82       	std	Z+1, r14	; 0x01

	/* No assigned data packet. */
	spi->dataPacket = NULL;
    16aa:	15 96       	adiw	r26, 0x05	; 5
    16ac:	1d 92       	st	X+, r1
    16ae:	1c 92       	st	X, r1
    16b0:	16 97       	sbiw	r26, 0x06	; 6

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
    16b2:	12 96       	adiw	r26, 0x02	; 2
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	13 97       	sbiw	r26, 0x03	; 3
    16ba:	80 ea       	ldi	r24, 0xA0	; 160
    16bc:	81 83       	std	Z+1, r24	; 0x01
}
    16be:	0f 91       	pop	r16
    16c0:	ef 90       	pop	r14
    16c2:	cf 90       	pop	r12
    16c4:	af 90       	pop	r10
    16c6:	08 95       	ret

000016c8 <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
    16c8:	ef 92       	push	r14
    16ca:	0f 93       	push	r16
    16cc:	dc 01       	movw	r26, r24
    16ce:	fb 01       	movw	r30, r22
	/* SPI module. */
	spi->module       = module;
    16d0:	6d 93       	st	X+, r22
    16d2:	7c 93       	st	X, r23
    16d4:	11 97       	sbiw	r26, 0x01	; 1
	spi->port         = port;
    16d6:	12 96       	adiw	r26, 0x02	; 2
    16d8:	4d 93       	st	X+, r20
    16da:	5c 93       	st	X, r21
    16dc:	13 97       	sbiw	r26, 0x03	; 3

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    16de:	22 23       	and	r18, r18
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <SPI_SlaveInit+0x1e>
    16e2:	80 e4       	ldi	r24, 0x40	; 64
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <SPI_SlaveInit+0x20>
    16e6:	80 e6       	ldi	r24, 0x60	; 96
    16e8:	80 2b       	or	r24, r16
    16ea:	80 83       	st	Z, r24
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	11 97       	sbiw	r26, 0x01	; 1
    16f2:	e1 82       	std	Z+1, r14	; 0x01

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	ed 91       	ld	r30, X+
    16f8:	fc 91       	ld	r31, X
    16fa:	13 97       	sbiw	r26, 0x03	; 3
    16fc:	80 e4       	ldi	r24, 0x40	; 64
    16fe:	81 83       	std	Z+1, r24	; 0x01
}
    1700:	0f 91       	pop	r16
    1702:	ef 90       	pop	r14
    1704:	08 95       	ret

00001706 <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
    1706:	ef 92       	push	r14
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
    170e:	00 83       	st	Z, r16
    1710:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
    1712:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
    1714:	63 83       	std	Z+3, r22	; 0x03
    1716:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
    1718:	45 83       	std	Z+5, r20	; 0x05
    171a:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
    171c:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
    171e:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
    1720:	11 86       	std	Z+9, r1	; 0x09
}
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ef 90       	pop	r14
    1728:	08 95       	ret

0000172a <SPI_MasterInterruptHandler>:
 *  a pointer to the related SPI_Master_t struct as argument.
 *
 *  \param spi        Pointer to the modules own SPI_Master_t struct.
 */
void SPI_MasterInterruptHandler(SPI_Master_t *spi)
{
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	dc 01       	movw	r26, r24
	uint8_t data;
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;
    1730:	15 96       	adiw	r26, 0x05	; 5
    1732:	cd 91       	ld	r28, X+
    1734:	dc 91       	ld	r29, X
    1736:	16 97       	sbiw	r26, 0x06	; 6
    1738:	98 85       	ldd	r25, Y+8	; 0x08

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
    173a:	ed 91       	ld	r30, X+
    173c:	fc 91       	ld	r31, X
    173e:	11 97       	sbiw	r26, 0x01	; 1
    1740:	80 81       	ld	r24, Z
    1742:	84 fd       	sbrc	r24, 4
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <SPI_MasterInterruptHandler+0x26>
		spi->interrupted = true;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	14 96       	adiw	r26, 0x04	; 4
    174a:	8c 93       	st	X, r24
    174c:	14 97       	sbiw	r26, 0x04	; 4
    174e:	24 c0       	rjmp	.+72     	; 0x1798 <SPI_MasterInterruptHandler+0x6e>
	}

	else {  /* Data interrupt. */

		/* Store received data. */
		data = spi->module->DATA;
    1750:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    1752:	ed 81       	ldd	r30, Y+5	; 0x05
    1754:	fe 81       	ldd	r31, Y+6	; 0x06
    1756:	e9 0f       	add	r30, r25
    1758:	f1 1d       	adc	r31, r1
    175a:	80 83       	st	Z, r24

		/* Next byte. */
		bytesTransceived++;
    175c:	9f 5f       	subi	r25, 0xFF	; 255

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
    175e:	15 96       	adiw	r26, 0x05	; 5
    1760:	ed 91       	ld	r30, X+
    1762:	fc 91       	ld	r31, X
    1764:	16 97       	sbiw	r26, 0x06	; 6
    1766:	87 81       	ldd	r24, Z+7	; 0x07
    1768:	98 17       	cp	r25, r24
    176a:	58 f4       	brcc	.+22     	; 0x1782 <SPI_MasterInterruptHandler+0x58>
			/* Put data byte in transmit data register. */
			data = spi->dataPacket->transmitData[bytesTransceived];
    176c:	03 80       	ldd	r0, Z+3	; 0x03
    176e:	f4 81       	ldd	r31, Z+4	; 0x04
    1770:	e0 2d       	mov	r30, r0
    1772:	e9 0f       	add	r30, r25
    1774:	f1 1d       	adc	r31, r1
    1776:	80 81       	ld	r24, Z
			spi->module->DATA = data;
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	11 97       	sbiw	r26, 0x01	; 1
    177e:	83 83       	std	Z+3, r24	; 0x03
    1780:	0b c0       	rjmp	.+22     	; 0x1798 <SPI_MasterInterruptHandler+0x6e>

		/* Transmission complete. */
		else {

			/* Release SS to slave(s). */
			uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    1782:	82 81       	ldd	r24, Z+2	; 0x02
			SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    1784:	01 90       	ld	r0, Z+
    1786:	f0 81       	ld	r31, Z
    1788:	e0 2d       	mov	r30, r0
    178a:	85 83       	std	Z+5, r24	; 0x05

			spi->dataPacket->complete = true;
    178c:	15 96       	adiw	r26, 0x05	; 5
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	16 97       	sbiw	r26, 0x06	; 6
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	81 87       	std	Z+9, r24	; 0x09
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    1798:	15 96       	adiw	r26, 0x05	; 5
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	16 97       	sbiw	r26, 0x06	; 6
    17a0:	90 87       	std	Z+8, r25	; 0x08
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <SPI_MasterInterruptTransceivePacket>:
 *  \retval SPI_BUSY          The SPI module is busy.
 *  \retval SPI_INTERRUPTED   The transmission was interrupted by another master.
 */
uint8_t SPI_MasterInterruptTransceivePacket(SPI_Master_t *spi,
                                            SPI_DataPacket_t *dataPacket)
{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	dc 01       	movw	r26, r24
    17ae:	eb 01       	movw	r28, r22
	uint8_t data;
	bool interrupted = spi->interrupted;
    17b0:	14 96       	adiw	r26, 0x04	; 4
    17b2:	9c 91       	ld	r25, X
    17b4:	14 97       	sbiw	r26, 0x04	; 4

	/* If no packets sent so far. */
	if (spi->dataPacket == NULL) {
    17b6:	15 96       	adiw	r26, 0x05	; 5
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	16 97       	sbiw	r26, 0x06	; 6
    17be:	30 97       	sbiw	r30, 0x00	; 0
    17c0:	29 f4       	brne	.+10     	; 0x17cc <SPI_MasterInterruptTransceivePacket+0x24>
		spi->dataPacket = dataPacket;
    17c2:	15 96       	adiw	r26, 0x05	; 5
    17c4:	6d 93       	st	X+, r22
    17c6:	7c 93       	st	X, r23
    17c8:	16 97       	sbiw	r26, 0x06	; 6
    17ca:	10 c0       	rjmp	.+32     	; 0x17ec <SPI_MasterInterruptTransceivePacket+0x44>
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
    17cc:	81 85       	ldd	r24, Z+9	; 0x09
    17ce:	88 23       	and	r24, r24
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <SPI_MasterInterruptTransceivePacket+0x2e>
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	28 c0       	rjmp	.+80     	; 0x1826 <SPI_MasterInterruptTransceivePacket+0x7e>
		return (SPI_BUSY);
	}

	/* If interrupted by other master. */
	else if (interrupted) {
    17d6:	99 23       	and	r25, r25
    17d8:	49 f0       	breq	.+18     	; 0x17ec <SPI_MasterInterruptTransceivePacket+0x44>
		/* If SS released. */
		if (spi->port->OUT & SPI_SS_bm) {
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	13 97       	sbiw	r26, 0x03	; 3
    17e2:	84 81       	ldd	r24, Z+4	; 0x04
    17e4:	84 fd       	sbrc	r24, 4
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <SPI_MasterInterruptTransceivePacket+0x44>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	1d c0       	rjmp	.+58     	; 0x1826 <SPI_MasterInterruptTransceivePacket+0x7e>
		}
	}

	/* NOT interrupted by other master.
	* Start transmission. */
	spi->dataPacket = dataPacket;
    17ec:	15 96       	adiw	r26, 0x05	; 5
    17ee:	cd 93       	st	X+, r28
    17f0:	dc 93       	st	X, r29
    17f2:	16 97       	sbiw	r26, 0x06	; 6
	spi->dataPacket->complete = false;
    17f4:	19 86       	std	Y+9, r1	; 0x09
	spi->interrupted = false;
    17f6:	14 96       	adiw	r26, 0x04	; 4
    17f8:	1c 92       	st	X, r1
    17fa:	14 97       	sbiw	r26, 0x04	; 4

	/* SS to slave(s) low.*/
	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
	SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    17fe:	e8 81       	ld	r30, Y
    1800:	f9 81       	ldd	r31, Y+1	; 0x01
    1802:	86 83       	std	Z+6, r24	; 0x06

	spi->dataPacket->bytesTransceived = 0;
    1804:	15 96       	adiw	r26, 0x05	; 5
    1806:	ed 91       	ld	r30, X+
    1808:	fc 91       	ld	r31, X
    180a:	16 97       	sbiw	r26, 0x06	; 6
    180c:	10 86       	std	Z+8, r1	; 0x08

	/* Start sending data. */
	data = spi->dataPacket->transmitData[0];
    180e:	15 96       	adiw	r26, 0x05	; 5
    1810:	ed 91       	ld	r30, X+
    1812:	fc 91       	ld	r31, X
    1814:	16 97       	sbiw	r26, 0x06	; 6
    1816:	03 80       	ldd	r0, Z+3	; 0x03
    1818:	f4 81       	ldd	r31, Z+4	; 0x04
    181a:	e0 2d       	mov	r30, r0
    181c:	80 81       	ld	r24, Z
	spi->module->DATA = data;
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	83 83       	std	Z+3, r24	; 0x03
    1824:	80 e0       	ldi	r24, 0x00	; 0

	/* Successs */
	return (SPI_OK);
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
    182c:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
    182e:	a0 81       	ld	r26, Z
    1830:	b1 81       	ldd	r27, Z+1	; 0x01
    1832:	13 96       	adiw	r26, 0x03	; 3
    1834:	6c 93       	st	X, r22

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
    1836:	01 90       	ld	r0, Z+
    1838:	f0 81       	ld	r31, Z
    183a:	e0 2d       	mov	r30, r0
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	87 ff       	sbrs	r24, 7
    1840:	fd cf       	rjmp	.-6      	; 0x183c <SPI_MasterTransceiveByte+0x10>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
    1842:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
    1844:	08 95       	ret

00001846 <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
    184c:	fb 01       	movw	r30, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
    184e:	61 15       	cp	r22, r1
    1850:	71 05       	cpc	r23, r1
    1852:	11 f4       	brne	.+4      	; 0x1858 <SPI_MasterTransceivePacket+0x12>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	37 c0       	rjmp	.+110    	; 0x18c6 <SPI_MasterTransceivePacket+0x80>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
    1858:	6d 83       	std	Y+5, r22	; 0x05
    185a:	7e 83       	std	Y+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    185c:	42 81       	ldd	r20, Z+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    185e:	a0 81       	ld	r26, Z
    1860:	b1 81       	ldd	r27, Z+1	; 0x01
    1862:	10 97       	sbiw	r26, 0x00	; 0
    1864:	11 f0       	breq	.+4      	; 0x186a <SPI_MasterTransceivePacket+0x24>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    1866:	16 96       	adiw	r26, 0x06	; 6
    1868:	4c 93       	st	X, r20
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
    186a:	67 81       	ldd	r22, Z+7	; 0x07
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	1a c0       	rjmp	.+52     	; 0x18a4 <SPI_MasterTransceivePacket+0x5e>
	while (bytesTransceived < bytesToTransceive) {

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
    1870:	29 2f       	mov	r18, r25
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	03 80       	ldd	r0, Z+3	; 0x03
    1876:	f4 81       	ldd	r31, Z+4	; 0x04
    1878:	e0 2d       	mov	r30, r0
    187a:	e2 0f       	add	r30, r18
    187c:	f3 1f       	adc	r31, r19
    187e:	80 81       	ld	r24, Z
		spi->module->DATA = data;
    1880:	e8 81       	ld	r30, Y
    1882:	f9 81       	ldd	r31, Y+1	; 0x01
    1884:	83 83       	std	Z+3, r24	; 0x03

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
    1886:	e8 81       	ld	r30, Y
    1888:	f9 81       	ldd	r31, Y+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	87 ff       	sbrs	r24, 7
    188e:	fd cf       	rjmp	.-6      	; 0x188a <SPI_MasterTransceivePacket+0x44>

		}
		/* Read received data. */
		data = spi->module->DATA;
    1890:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    1892:	ed 81       	ldd	r30, Y+5	; 0x05
    1894:	fe 81       	ldd	r31, Y+6	; 0x06
    1896:	05 80       	ldd	r0, Z+5	; 0x05
    1898:	f6 81       	ldd	r31, Z+6	; 0x06
    189a:	e0 2d       	mov	r30, r0
    189c:	e2 0f       	add	r30, r18
    189e:	f3 1f       	adc	r31, r19
    18a0:	80 83       	st	Z, r24

		bytesTransceived++;
    18a2:	9f 5f       	subi	r25, 0xFF	; 255
    18a4:	ed 81       	ldd	r30, Y+5	; 0x05
    18a6:	fe 81       	ldd	r31, Y+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
    18a8:	96 17       	cp	r25, r22
    18aa:	10 f3       	brcs	.-60     	; 0x1870 <SPI_MasterTransceivePacket+0x2a>

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    18ac:	01 90       	ld	r0, Z+
    18ae:	f0 81       	ld	r31, Z
    18b0:	e0 2d       	mov	r30, r0
    18b2:	30 97       	sbiw	r30, 0x00	; 0
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <SPI_MasterTransceivePacket+0x72>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    18b6:	45 83       	std	Z+5, r20	; 0x05
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    18b8:	ed 81       	ldd	r30, Y+5	; 0x05
    18ba:	fe 81       	ldd	r31, Y+6	; 0x06
    18bc:	60 87       	std	Z+8, r22	; 0x08
	spi->dataPacket->complete = true;
    18be:	ed 81       	ldd	r30, Y+5	; 0x05
    18c0:	fe 81       	ldd	r31, Y+6	; 0x06
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <__mulsi3>:
    18cc:	62 9f       	mul	r22, r18
    18ce:	d0 01       	movw	r26, r0
    18d0:	73 9f       	mul	r23, r19
    18d2:	f0 01       	movw	r30, r0
    18d4:	82 9f       	mul	r24, r18
    18d6:	e0 0d       	add	r30, r0
    18d8:	f1 1d       	adc	r31, r1
    18da:	64 9f       	mul	r22, r20
    18dc:	e0 0d       	add	r30, r0
    18de:	f1 1d       	adc	r31, r1
    18e0:	92 9f       	mul	r25, r18
    18e2:	f0 0d       	add	r31, r0
    18e4:	83 9f       	mul	r24, r19
    18e6:	f0 0d       	add	r31, r0
    18e8:	74 9f       	mul	r23, r20
    18ea:	f0 0d       	add	r31, r0
    18ec:	65 9f       	mul	r22, r21
    18ee:	f0 0d       	add	r31, r0
    18f0:	99 27       	eor	r25, r25
    18f2:	72 9f       	mul	r23, r18
    18f4:	b0 0d       	add	r27, r0
    18f6:	e1 1d       	adc	r30, r1
    18f8:	f9 1f       	adc	r31, r25
    18fa:	63 9f       	mul	r22, r19
    18fc:	b0 0d       	add	r27, r0
    18fe:	e1 1d       	adc	r30, r1
    1900:	f9 1f       	adc	r31, r25
    1902:	bd 01       	movw	r22, r26
    1904:	cf 01       	movw	r24, r30
    1906:	11 24       	eor	r1, r1
    1908:	08 95       	ret

0000190a <__divmodhi4>:
    190a:	97 fb       	bst	r25, 7
    190c:	09 2e       	mov	r0, r25
    190e:	07 26       	eor	r0, r23
    1910:	0a d0       	rcall	.+20     	; 0x1926 <__divmodhi4_neg1>
    1912:	77 fd       	sbrc	r23, 7
    1914:	04 d0       	rcall	.+8      	; 0x191e <__divmodhi4_neg2>
    1916:	2e d0       	rcall	.+92     	; 0x1974 <__udivmodhi4>
    1918:	06 d0       	rcall	.+12     	; 0x1926 <__divmodhi4_neg1>
    191a:	00 20       	and	r0, r0
    191c:	1a f4       	brpl	.+6      	; 0x1924 <__divmodhi4_exit>

0000191e <__divmodhi4_neg2>:
    191e:	70 95       	com	r23
    1920:	61 95       	neg	r22
    1922:	7f 4f       	sbci	r23, 0xFF	; 255

00001924 <__divmodhi4_exit>:
    1924:	08 95       	ret

00001926 <__divmodhi4_neg1>:
    1926:	f6 f7       	brtc	.-4      	; 0x1924 <__divmodhi4_exit>
    1928:	90 95       	com	r25
    192a:	81 95       	neg	r24
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__udivmodsi4>:
    1930:	a1 e2       	ldi	r26, 0x21	; 33
    1932:	1a 2e       	mov	r1, r26
    1934:	aa 1b       	sub	r26, r26
    1936:	bb 1b       	sub	r27, r27
    1938:	fd 01       	movw	r30, r26
    193a:	0d c0       	rjmp	.+26     	; 0x1956 <__udivmodsi4_ep>

0000193c <__udivmodsi4_loop>:
    193c:	aa 1f       	adc	r26, r26
    193e:	bb 1f       	adc	r27, r27
    1940:	ee 1f       	adc	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	a2 17       	cp	r26, r18
    1946:	b3 07       	cpc	r27, r19
    1948:	e4 07       	cpc	r30, r20
    194a:	f5 07       	cpc	r31, r21
    194c:	20 f0       	brcs	.+8      	; 0x1956 <__udivmodsi4_ep>
    194e:	a2 1b       	sub	r26, r18
    1950:	b3 0b       	sbc	r27, r19
    1952:	e4 0b       	sbc	r30, r20
    1954:	f5 0b       	sbc	r31, r21

00001956 <__udivmodsi4_ep>:
    1956:	66 1f       	adc	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	1a 94       	dec	r1
    1960:	69 f7       	brne	.-38     	; 0x193c <__udivmodsi4_loop>
    1962:	60 95       	com	r22
    1964:	70 95       	com	r23
    1966:	80 95       	com	r24
    1968:	90 95       	com	r25
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	bd 01       	movw	r22, r26
    1970:	cf 01       	movw	r24, r30
    1972:	08 95       	ret

00001974 <__udivmodhi4>:
    1974:	aa 1b       	sub	r26, r26
    1976:	bb 1b       	sub	r27, r27
    1978:	51 e1       	ldi	r21, 0x11	; 17
    197a:	07 c0       	rjmp	.+14     	; 0x198a <__udivmodhi4_ep>

0000197c <__udivmodhi4_loop>:
    197c:	aa 1f       	adc	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	a6 17       	cp	r26, r22
    1982:	b7 07       	cpc	r27, r23
    1984:	10 f0       	brcs	.+4      	; 0x198a <__udivmodhi4_ep>
    1986:	a6 1b       	sub	r26, r22
    1988:	b7 0b       	sbc	r27, r23

0000198a <__udivmodhi4_ep>:
    198a:	88 1f       	adc	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	5a 95       	dec	r21
    1990:	a9 f7       	brne	.-22     	; 0x197c <__udivmodhi4_loop>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	08 95       	ret

0000199c <sprintf>:
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	2e 97       	sbiw	r28, 0x0e	; 14
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0e 89       	ldd	r16, Y+22	; 0x16
    19b0:	1f 89       	ldd	r17, Y+23	; 0x17
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	8c 83       	std	Y+4, r24	; 0x04
    19b6:	09 83       	std	Y+1, r16	; 0x01
    19b8:	1a 83       	std	Y+2, r17	; 0x02
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	9f e7       	ldi	r25, 0x7F	; 127
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	9e 01       	movw	r18, r28
    19c4:	26 5e       	subi	r18, 0xE6	; 230
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	ce 01       	movw	r24, r28
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	68 8d       	ldd	r22, Y+24	; 0x18
    19ce:	79 8d       	ldd	r23, Y+25	; 0x19
    19d0:	a9 01       	movw	r20, r18
    19d2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <vfprintf>
    19d6:	2f 81       	ldd	r18, Y+7	; 0x07
    19d8:	38 85       	ldd	r19, Y+8	; 0x08
    19da:	02 0f       	add	r16, r18
    19dc:	13 1f       	adc	r17, r19
    19de:	f8 01       	movw	r30, r16
    19e0:	10 82       	st	Z, r1
    19e2:	2e 96       	adiw	r28, 0x0e	; 14
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <vfprintf>:
    19f2:	2f 92       	push	r2
    19f4:	3f 92       	push	r3
    19f6:	4f 92       	push	r4
    19f8:	5f 92       	push	r5
    19fa:	6f 92       	push	r6
    19fc:	7f 92       	push	r7
    19fe:	8f 92       	push	r8
    1a00:	9f 92       	push	r9
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	2b 97       	sbiw	r28, 0x0b	; 11
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	3c 01       	movw	r6, r24
    1a22:	2b 01       	movw	r4, r22
    1a24:	5a 01       	movw	r10, r20
    1a26:	fc 01       	movw	r30, r24
    1a28:	16 82       	std	Z+6, r1	; 0x06
    1a2a:	17 82       	std	Z+7, r1	; 0x07
    1a2c:	83 81       	ldd	r24, Z+3	; 0x03
    1a2e:	81 fd       	sbrc	r24, 1
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <vfprintf+0x46>
    1a32:	6f ef       	ldi	r22, 0xFF	; 255
    1a34:	7f ef       	ldi	r23, 0xFF	; 255
    1a36:	c6 c1       	rjmp	.+908    	; 0x1dc4 <vfprintf+0x3d2>
    1a38:	9a e0       	ldi	r25, 0x0A	; 10
    1a3a:	89 2e       	mov	r8, r25
    1a3c:	1e 01       	movw	r2, r28
    1a3e:	08 94       	sec
    1a40:	21 1c       	adc	r2, r1
    1a42:	31 1c       	adc	r3, r1
    1a44:	f3 01       	movw	r30, r6
    1a46:	23 81       	ldd	r18, Z+3	; 0x03
    1a48:	f2 01       	movw	r30, r4
    1a4a:	23 fd       	sbrc	r18, 3
    1a4c:	85 91       	lpm	r24, Z+
    1a4e:	23 ff       	sbrs	r18, 3
    1a50:	81 91       	ld	r24, Z+
    1a52:	2f 01       	movw	r4, r30
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <vfprintf+0x68>
    1a58:	b2 c1       	rjmp	.+868    	; 0x1dbe <vfprintf+0x3cc>
    1a5a:	85 32       	cpi	r24, 0x25	; 37
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <vfprintf+0x7a>
    1a5e:	23 fd       	sbrc	r18, 3
    1a60:	85 91       	lpm	r24, Z+
    1a62:	23 ff       	sbrs	r18, 3
    1a64:	81 91       	ld	r24, Z+
    1a66:	2f 01       	movw	r4, r30
    1a68:	85 32       	cpi	r24, 0x25	; 37
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <vfprintf+0x84>
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	b3 01       	movw	r22, r6
    1a70:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1a74:	e7 cf       	rjmp	.-50     	; 0x1a44 <vfprintf+0x52>
    1a76:	98 2f       	mov	r25, r24
    1a78:	ff 24       	eor	r15, r15
    1a7a:	ee 24       	eor	r14, r14
    1a7c:	99 24       	eor	r9, r9
    1a7e:	ff e1       	ldi	r31, 0x1F	; 31
    1a80:	ff 15       	cp	r31, r15
    1a82:	d0 f0       	brcs	.+52     	; 0x1ab8 <vfprintf+0xc6>
    1a84:	9b 32       	cpi	r25, 0x2B	; 43
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <vfprintf+0xb0>
    1a88:	9c 32       	cpi	r25, 0x2C	; 44
    1a8a:	28 f4       	brcc	.+10     	; 0x1a96 <vfprintf+0xa4>
    1a8c:	90 32       	cpi	r25, 0x20	; 32
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <vfprintf+0xb4>
    1a90:	93 32       	cpi	r25, 0x23	; 35
    1a92:	91 f4       	brne	.+36     	; 0x1ab8 <vfprintf+0xc6>
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <vfprintf+0xc0>
    1a96:	9d 32       	cpi	r25, 0x2D	; 45
    1a98:	49 f0       	breq	.+18     	; 0x1aac <vfprintf+0xba>
    1a9a:	90 33       	cpi	r25, 0x30	; 48
    1a9c:	69 f4       	brne	.+26     	; 0x1ab8 <vfprintf+0xc6>
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	24 c0       	rjmp	.+72     	; 0x1aea <vfprintf+0xf8>
    1aa2:	52 e0       	ldi	r21, 0x02	; 2
    1aa4:	f5 2a       	or	r15, r21
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	f8 2a       	or	r15, r24
    1aaa:	28 c0       	rjmp	.+80     	; 0x1afc <vfprintf+0x10a>
    1aac:	98 e0       	ldi	r25, 0x08	; 8
    1aae:	f9 2a       	or	r15, r25
    1ab0:	25 c0       	rjmp	.+74     	; 0x1afc <vfprintf+0x10a>
    1ab2:	e0 e1       	ldi	r30, 0x10	; 16
    1ab4:	fe 2a       	or	r15, r30
    1ab6:	22 c0       	rjmp	.+68     	; 0x1afc <vfprintf+0x10a>
    1ab8:	f7 fc       	sbrc	r15, 7
    1aba:	29 c0       	rjmp	.+82     	; 0x1b0e <vfprintf+0x11c>
    1abc:	89 2f       	mov	r24, r25
    1abe:	80 53       	subi	r24, 0x30	; 48
    1ac0:	8a 30       	cpi	r24, 0x0A	; 10
    1ac2:	70 f4       	brcc	.+28     	; 0x1ae0 <vfprintf+0xee>
    1ac4:	f6 fe       	sbrs	r15, 6
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <vfprintf+0xe0>
    1ac8:	98 9c       	mul	r9, r8
    1aca:	90 2c       	mov	r9, r0
    1acc:	11 24       	eor	r1, r1
    1ace:	98 0e       	add	r9, r24
    1ad0:	15 c0       	rjmp	.+42     	; 0x1afc <vfprintf+0x10a>
    1ad2:	e8 9c       	mul	r14, r8
    1ad4:	e0 2c       	mov	r14, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	e8 0e       	add	r14, r24
    1ada:	f0 e2       	ldi	r31, 0x20	; 32
    1adc:	ff 2a       	or	r15, r31
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <vfprintf+0x10a>
    1ae0:	9e 32       	cpi	r25, 0x2E	; 46
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <vfprintf+0xfc>
    1ae4:	f6 fc       	sbrc	r15, 6
    1ae6:	6b c1       	rjmp	.+726    	; 0x1dbe <vfprintf+0x3cc>
    1ae8:	40 e4       	ldi	r20, 0x40	; 64
    1aea:	f4 2a       	or	r15, r20
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <vfprintf+0x10a>
    1aee:	9c 36       	cpi	r25, 0x6C	; 108
    1af0:	19 f4       	brne	.+6      	; 0x1af8 <vfprintf+0x106>
    1af2:	50 e8       	ldi	r21, 0x80	; 128
    1af4:	f5 2a       	or	r15, r21
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <vfprintf+0x10a>
    1af8:	98 36       	cpi	r25, 0x68	; 104
    1afa:	49 f4       	brne	.+18     	; 0x1b0e <vfprintf+0x11c>
    1afc:	f2 01       	movw	r30, r4
    1afe:	23 fd       	sbrc	r18, 3
    1b00:	95 91       	lpm	r25, Z+
    1b02:	23 ff       	sbrs	r18, 3
    1b04:	91 91       	ld	r25, Z+
    1b06:	2f 01       	movw	r4, r30
    1b08:	99 23       	and	r25, r25
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <vfprintf+0x11c>
    1b0c:	b8 cf       	rjmp	.-144    	; 0x1a7e <vfprintf+0x8c>
    1b0e:	89 2f       	mov	r24, r25
    1b10:	85 54       	subi	r24, 0x45	; 69
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <vfprintf+0x12a>
    1b16:	80 52       	subi	r24, 0x20	; 32
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	38 f4       	brcc	.+14     	; 0x1b2a <vfprintf+0x138>
    1b1c:	44 e0       	ldi	r20, 0x04	; 4
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	a4 0e       	add	r10, r20
    1b22:	b5 1e       	adc	r11, r21
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	59 83       	std	Y+1, r21	; 0x01
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <vfprintf+0x156>
    1b2a:	93 36       	cpi	r25, 0x63	; 99
    1b2c:	31 f0       	breq	.+12     	; 0x1b3a <vfprintf+0x148>
    1b2e:	93 37       	cpi	r25, 0x73	; 115
    1b30:	79 f0       	breq	.+30     	; 0x1b50 <vfprintf+0x15e>
    1b32:	93 35       	cpi	r25, 0x53	; 83
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <vfprintf+0x146>
    1b36:	56 c0       	rjmp	.+172    	; 0x1be4 <vfprintf+0x1f2>
    1b38:	20 c0       	rjmp	.+64     	; 0x1b7a <vfprintf+0x188>
    1b3a:	f5 01       	movw	r30, r10
    1b3c:	80 81       	ld	r24, Z
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	42 e0       	ldi	r20, 0x02	; 2
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	a4 0e       	add	r10, r20
    1b46:	b5 1e       	adc	r11, r21
    1b48:	61 01       	movw	r12, r2
    1b4a:	01 e0       	ldi	r16, 0x01	; 1
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
    1b4e:	12 c0       	rjmp	.+36     	; 0x1b74 <vfprintf+0x182>
    1b50:	f5 01       	movw	r30, r10
    1b52:	c0 80       	ld	r12, Z
    1b54:	d1 80       	ldd	r13, Z+1	; 0x01
    1b56:	f6 fc       	sbrc	r15, 6
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <vfprintf+0x16e>
    1b5a:	6f ef       	ldi	r22, 0xFF	; 255
    1b5c:	7f ef       	ldi	r23, 0xFF	; 255
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <vfprintf+0x172>
    1b60:	69 2d       	mov	r22, r9
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	42 e0       	ldi	r20, 0x02	; 2
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	a4 0e       	add	r10, r20
    1b6a:	b5 1e       	adc	r11, r21
    1b6c:	c6 01       	movw	r24, r12
    1b6e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <strnlen>
    1b72:	8c 01       	movw	r16, r24
    1b74:	5f e7       	ldi	r21, 0x7F	; 127
    1b76:	f5 22       	and	r15, r21
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <vfprintf+0x1b0>
    1b7a:	f5 01       	movw	r30, r10
    1b7c:	c0 80       	ld	r12, Z
    1b7e:	d1 80       	ldd	r13, Z+1	; 0x01
    1b80:	f6 fc       	sbrc	r15, 6
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <vfprintf+0x198>
    1b84:	6f ef       	ldi	r22, 0xFF	; 255
    1b86:	7f ef       	ldi	r23, 0xFF	; 255
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x19c>
    1b8a:	69 2d       	mov	r22, r9
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	42 e0       	ldi	r20, 0x02	; 2
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	a4 0e       	add	r10, r20
    1b94:	b5 1e       	adc	r11, r21
    1b96:	c6 01       	movw	r24, r12
    1b98:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <strnlen_P>
    1b9c:	8c 01       	movw	r16, r24
    1b9e:	50 e8       	ldi	r21, 0x80	; 128
    1ba0:	f5 2a       	or	r15, r21
    1ba2:	f3 fe       	sbrs	r15, 3
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <vfprintf+0x1c2>
    1ba6:	1a c0       	rjmp	.+52     	; 0x1bdc <vfprintf+0x1ea>
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	b3 01       	movw	r22, r6
    1bae:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1bb2:	ea 94       	dec	r14
    1bb4:	8e 2d       	mov	r24, r14
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	08 17       	cp	r16, r24
    1bba:	19 07       	cpc	r17, r25
    1bbc:	a8 f3       	brcs	.-22     	; 0x1ba8 <vfprintf+0x1b6>
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <vfprintf+0x1ea>
    1bc0:	f6 01       	movw	r30, r12
    1bc2:	f7 fc       	sbrc	r15, 7
    1bc4:	85 91       	lpm	r24, Z+
    1bc6:	f7 fe       	sbrs	r15, 7
    1bc8:	81 91       	ld	r24, Z+
    1bca:	6f 01       	movw	r12, r30
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	b3 01       	movw	r22, r6
    1bd0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1bd4:	e1 10       	cpse	r14, r1
    1bd6:	ea 94       	dec	r14
    1bd8:	01 50       	subi	r16, 0x01	; 1
    1bda:	10 40       	sbci	r17, 0x00	; 0
    1bdc:	01 15       	cp	r16, r1
    1bde:	11 05       	cpc	r17, r1
    1be0:	79 f7       	brne	.-34     	; 0x1bc0 <vfprintf+0x1ce>
    1be2:	ea c0       	rjmp	.+468    	; 0x1db8 <vfprintf+0x3c6>
    1be4:	94 36       	cpi	r25, 0x64	; 100
    1be6:	11 f0       	breq	.+4      	; 0x1bec <vfprintf+0x1fa>
    1be8:	99 36       	cpi	r25, 0x69	; 105
    1bea:	69 f5       	brne	.+90     	; 0x1c46 <vfprintf+0x254>
    1bec:	f7 fe       	sbrs	r15, 7
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <vfprintf+0x20e>
    1bf0:	f5 01       	movw	r30, r10
    1bf2:	20 81       	ld	r18, Z
    1bf4:	31 81       	ldd	r19, Z+1	; 0x01
    1bf6:	42 81       	ldd	r20, Z+2	; 0x02
    1bf8:	53 81       	ldd	r21, Z+3	; 0x03
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <vfprintf+0x222>
    1c00:	f5 01       	movw	r30, r10
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	9c 01       	movw	r18, r24
    1c08:	44 27       	eor	r20, r20
    1c0a:	37 fd       	sbrc	r19, 7
    1c0c:	40 95       	com	r20
    1c0e:	54 2f       	mov	r21, r20
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a8 0e       	add	r10, r24
    1c16:	b9 1e       	adc	r11, r25
    1c18:	9f e6       	ldi	r25, 0x6F	; 111
    1c1a:	f9 22       	and	r15, r25
    1c1c:	57 ff       	sbrs	r21, 7
    1c1e:	09 c0       	rjmp	.+18     	; 0x1c32 <vfprintf+0x240>
    1c20:	50 95       	com	r21
    1c22:	40 95       	com	r20
    1c24:	30 95       	com	r19
    1c26:	21 95       	neg	r18
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2e:	e0 e8       	ldi	r30, 0x80	; 128
    1c30:	fe 2a       	or	r15, r30
    1c32:	ca 01       	movw	r24, r20
    1c34:	b9 01       	movw	r22, r18
    1c36:	a1 01       	movw	r20, r2
    1c38:	2a e0       	ldi	r18, 0x0A	; 10
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    1c40:	d8 2e       	mov	r13, r24
    1c42:	d2 18       	sub	r13, r2
    1c44:	40 c0       	rjmp	.+128    	; 0x1cc6 <vfprintf+0x2d4>
    1c46:	95 37       	cpi	r25, 0x75	; 117
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <vfprintf+0x262>
    1c4a:	1f 2d       	mov	r17, r15
    1c4c:	1f 7e       	andi	r17, 0xEF	; 239
    1c4e:	2a e0       	ldi	r18, 0x0A	; 10
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	1d c0       	rjmp	.+58     	; 0x1c8e <vfprintf+0x29c>
    1c54:	1f 2d       	mov	r17, r15
    1c56:	19 7f       	andi	r17, 0xF9	; 249
    1c58:	9f 36       	cpi	r25, 0x6F	; 111
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <vfprintf+0x282>
    1c5c:	90 37       	cpi	r25, 0x70	; 112
    1c5e:	20 f4       	brcc	.+8      	; 0x1c68 <vfprintf+0x276>
    1c60:	98 35       	cpi	r25, 0x58	; 88
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <vfprintf+0x274>
    1c64:	ac c0       	rjmp	.+344    	; 0x1dbe <vfprintf+0x3cc>
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <vfprintf+0x294>
    1c68:	90 37       	cpi	r25, 0x70	; 112
    1c6a:	39 f0       	breq	.+14     	; 0x1c7a <vfprintf+0x288>
    1c6c:	98 37       	cpi	r25, 0x78	; 120
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <vfprintf+0x280>
    1c70:	a6 c0       	rjmp	.+332    	; 0x1dbe <vfprintf+0x3cc>
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <vfprintf+0x28a>
    1c74:	28 e0       	ldi	r18, 0x08	; 8
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <vfprintf+0x29c>
    1c7a:	10 61       	ori	r17, 0x10	; 16
    1c7c:	14 fd       	sbrc	r17, 4
    1c7e:	14 60       	ori	r17, 0x04	; 4
    1c80:	20 e1       	ldi	r18, 0x10	; 16
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <vfprintf+0x29c>
    1c86:	14 fd       	sbrc	r17, 4
    1c88:	16 60       	ori	r17, 0x06	; 6
    1c8a:	20 e1       	ldi	r18, 0x10	; 16
    1c8c:	32 e0       	ldi	r19, 0x02	; 2
    1c8e:	17 ff       	sbrs	r17, 7
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <vfprintf+0x2b0>
    1c92:	f5 01       	movw	r30, r10
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	08 c0       	rjmp	.+16     	; 0x1cb2 <vfprintf+0x2c0>
    1ca2:	f5 01       	movw	r30, r10
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	bc 01       	movw	r22, r24
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	42 e0       	ldi	r20, 0x02	; 2
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	a4 0e       	add	r10, r20
    1cb4:	b5 1e       	adc	r11, r21
    1cb6:	a1 01       	movw	r20, r2
    1cb8:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    1cbc:	d8 2e       	mov	r13, r24
    1cbe:	d2 18       	sub	r13, r2
    1cc0:	8f e7       	ldi	r24, 0x7F	; 127
    1cc2:	f8 2e       	mov	r15, r24
    1cc4:	f1 22       	and	r15, r17
    1cc6:	f6 fe       	sbrs	r15, 6
    1cc8:	0b c0       	rjmp	.+22     	; 0x1ce0 <vfprintf+0x2ee>
    1cca:	5e ef       	ldi	r21, 0xFE	; 254
    1ccc:	f5 22       	and	r15, r21
    1cce:	d9 14       	cp	r13, r9
    1cd0:	38 f4       	brcc	.+14     	; 0x1ce0 <vfprintf+0x2ee>
    1cd2:	f4 fe       	sbrs	r15, 4
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <vfprintf+0x2f2>
    1cd6:	f2 fc       	sbrc	r15, 2
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <vfprintf+0x2f2>
    1cda:	8f ee       	ldi	r24, 0xEF	; 239
    1cdc:	f8 22       	and	r15, r24
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x2f2>
    1ce0:	1d 2d       	mov	r17, r13
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <vfprintf+0x2f4>
    1ce4:	19 2d       	mov	r17, r9
    1ce6:	f4 fe       	sbrs	r15, 4
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <vfprintf+0x312>
    1cea:	fe 01       	movw	r30, r28
    1cec:	ed 0d       	add	r30, r13
    1cee:	f1 1d       	adc	r31, r1
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 33       	cpi	r24, 0x30	; 48
    1cf4:	19 f4       	brne	.+6      	; 0x1cfc <vfprintf+0x30a>
    1cf6:	99 ee       	ldi	r25, 0xE9	; 233
    1cf8:	f9 22       	and	r15, r25
    1cfa:	08 c0       	rjmp	.+16     	; 0x1d0c <vfprintf+0x31a>
    1cfc:	1f 5f       	subi	r17, 0xFF	; 255
    1cfe:	f2 fe       	sbrs	r15, 2
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <vfprintf+0x31a>
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <vfprintf+0x318>
    1d04:	8f 2d       	mov	r24, r15
    1d06:	86 78       	andi	r24, 0x86	; 134
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <vfprintf+0x31a>
    1d0a:	1f 5f       	subi	r17, 0xFF	; 255
    1d0c:	0f 2d       	mov	r16, r15
    1d0e:	f3 fc       	sbrc	r15, 3
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <vfprintf+0x348>
    1d12:	f0 fe       	sbrs	r15, 0
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <vfprintf+0x342>
    1d16:	1e 15       	cp	r17, r14
    1d18:	10 f0       	brcs	.+4      	; 0x1d1e <vfprintf+0x32c>
    1d1a:	9d 2c       	mov	r9, r13
    1d1c:	0b c0       	rjmp	.+22     	; 0x1d34 <vfprintf+0x342>
    1d1e:	9d 2c       	mov	r9, r13
    1d20:	9e 0c       	add	r9, r14
    1d22:	91 1a       	sub	r9, r17
    1d24:	1e 2d       	mov	r17, r14
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <vfprintf+0x342>
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	b3 01       	movw	r22, r6
    1d2e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1d32:	1f 5f       	subi	r17, 0xFF	; 255
    1d34:	1e 15       	cp	r17, r14
    1d36:	c0 f3       	brcs	.-16     	; 0x1d28 <vfprintf+0x336>
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <vfprintf+0x350>
    1d3a:	1e 15       	cp	r17, r14
    1d3c:	10 f4       	brcc	.+4      	; 0x1d42 <vfprintf+0x350>
    1d3e:	e1 1a       	sub	r14, r17
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <vfprintf+0x352>
    1d42:	ee 24       	eor	r14, r14
    1d44:	04 ff       	sbrs	r16, 4
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <vfprintf+0x374>
    1d48:	80 e3       	ldi	r24, 0x30	; 48
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	b3 01       	movw	r22, r6
    1d4e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1d52:	02 ff       	sbrs	r16, 2
    1d54:	1d c0       	rjmp	.+58     	; 0x1d90 <vfprintf+0x39e>
    1d56:	01 fd       	sbrc	r16, 1
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <vfprintf+0x36e>
    1d5a:	88 e7       	ldi	r24, 0x78	; 120
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <vfprintf+0x38a>
    1d60:	88 e5       	ldi	r24, 0x58	; 88
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0b c0       	rjmp	.+22     	; 0x1d7c <vfprintf+0x38a>
    1d66:	80 2f       	mov	r24, r16
    1d68:	86 78       	andi	r24, 0x86	; 134
    1d6a:	91 f0       	breq	.+36     	; 0x1d90 <vfprintf+0x39e>
    1d6c:	01 ff       	sbrs	r16, 1
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0x382>
    1d70:	8b e2       	ldi	r24, 0x2B	; 43
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <vfprintf+0x384>
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	f7 fc       	sbrc	r15, 7
    1d78:	8d e2       	ldi	r24, 0x2D	; 45
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	b3 01       	movw	r22, r6
    1d7e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0x39e>
    1d84:	80 e3       	ldi	r24, 0x30	; 48
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	b3 01       	movw	r22, r6
    1d8a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1d8e:	9a 94       	dec	r9
    1d90:	d9 14       	cp	r13, r9
    1d92:	c0 f3       	brcs	.-16     	; 0x1d84 <vfprintf+0x392>
    1d94:	da 94       	dec	r13
    1d96:	f1 01       	movw	r30, r2
    1d98:	ed 0d       	add	r30, r13
    1d9a:	f1 1d       	adc	r31, r1
    1d9c:	80 81       	ld	r24, Z
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	b3 01       	movw	r22, r6
    1da2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1da6:	dd 20       	and	r13, r13
    1da8:	a9 f7       	brne	.-22     	; 0x1d94 <vfprintf+0x3a2>
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <vfprintf+0x3c6>
    1dac:	80 e2       	ldi	r24, 0x20	; 32
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	b3 01       	movw	r22, r6
    1db2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <fputc>
    1db6:	ea 94       	dec	r14
    1db8:	ee 20       	and	r14, r14
    1dba:	c1 f7       	brne	.-16     	; 0x1dac <vfprintf+0x3ba>
    1dbc:	43 ce       	rjmp	.-890    	; 0x1a44 <vfprintf+0x52>
    1dbe:	f3 01       	movw	r30, r6
    1dc0:	66 81       	ldd	r22, Z+6	; 0x06
    1dc2:	77 81       	ldd	r23, Z+7	; 0x07
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	2b 96       	adiw	r28, 0x0b	; 11
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	cf 90       	pop	r12
    1ddc:	bf 90       	pop	r11
    1dde:	af 90       	pop	r10
    1de0:	9f 90       	pop	r9
    1de2:	8f 90       	pop	r8
    1de4:	7f 90       	pop	r7
    1de6:	6f 90       	pop	r6
    1de8:	5f 90       	pop	r5
    1dea:	4f 90       	pop	r4
    1dec:	3f 90       	pop	r3
    1dee:	2f 90       	pop	r2
    1df0:	08 95       	ret

00001df2 <strnlen_P>:
    1df2:	fc 01       	movw	r30, r24
    1df4:	05 90       	lpm	r0, Z+
    1df6:	61 50       	subi	r22, 0x01	; 1
    1df8:	70 40       	sbci	r23, 0x00	; 0
    1dfa:	01 10       	cpse	r0, r1
    1dfc:	d8 f7       	brcc	.-10     	; 0x1df4 <strnlen_P+0x2>
    1dfe:	80 95       	com	r24
    1e00:	90 95       	com	r25
    1e02:	8e 0f       	add	r24, r30
    1e04:	9f 1f       	adc	r25, r31
    1e06:	08 95       	ret

00001e08 <strnlen>:
    1e08:	fc 01       	movw	r30, r24
    1e0a:	61 50       	subi	r22, 0x01	; 1
    1e0c:	70 40       	sbci	r23, 0x00	; 0
    1e0e:	01 90       	ld	r0, Z+
    1e10:	01 10       	cpse	r0, r1
    1e12:	d8 f7       	brcc	.-10     	; 0x1e0a <strnlen+0x2>
    1e14:	80 95       	com	r24
    1e16:	90 95       	com	r25
    1e18:	8e 0f       	add	r24, r30
    1e1a:	9f 1f       	adc	r25, r31
    1e1c:	08 95       	ret

00001e1e <fputc>:
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	8c 01       	movw	r16, r24
    1e28:	eb 01       	movw	r28, r22
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	81 ff       	sbrs	r24, 1
    1e2e:	1b c0       	rjmp	.+54     	; 0x1e66 <fputc+0x48>
    1e30:	82 ff       	sbrs	r24, 2
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <fputc+0x30>
    1e34:	2e 81       	ldd	r18, Y+6	; 0x06
    1e36:	3f 81       	ldd	r19, Y+7	; 0x07
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3c:	28 17       	cp	r18, r24
    1e3e:	39 07       	cpc	r19, r25
    1e40:	64 f4       	brge	.+24     	; 0x1e5a <fputc+0x3c>
    1e42:	e8 81       	ld	r30, Y
    1e44:	f9 81       	ldd	r31, Y+1	; 0x01
    1e46:	01 93       	st	Z+, r16
    1e48:	e8 83       	st	Y, r30
    1e4a:	f9 83       	std	Y+1, r31	; 0x01
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <fputc+0x3c>
    1e4e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e50:	f9 85       	ldd	r31, Y+9	; 0x09
    1e52:	80 2f       	mov	r24, r16
    1e54:	19 95       	eicall
    1e56:	89 2b       	or	r24, r25
    1e58:	31 f4       	brne	.+12     	; 0x1e66 <fputc+0x48>
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	8e 83       	std	Y+6, r24	; 0x06
    1e62:	9f 83       	std	Y+7, r25	; 0x07
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <fputc+0x4c>
    1e66:	0f ef       	ldi	r16, 0xFF	; 255
    1e68:	1f ef       	ldi	r17, 0xFF	; 255
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <__ultoa_invert>:
    1e76:	fa 01       	movw	r30, r20
    1e78:	aa 27       	eor	r26, r26
    1e7a:	28 30       	cpi	r18, 0x08	; 8
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <__ultoa_invert+0x5c>
    1e7e:	20 31       	cpi	r18, 0x10	; 16
    1e80:	81 f1       	breq	.+96     	; 0x1ee2 <__ultoa_invert+0x6c>
    1e82:	e8 94       	clt
    1e84:	6f 93       	push	r22
    1e86:	6e 7f       	andi	r22, 0xFE	; 254
    1e88:	6e 5f       	subi	r22, 0xFE	; 254
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	af 4f       	sbci	r26, 0xFF	; 255
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	3e d0       	rcall	.+124    	; 0x1f12 <__ultoa_invert+0x9c>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	3c d0       	rcall	.+120    	; 0x1f12 <__ultoa_invert+0x9c>
    1e9a:	67 0f       	add	r22, r23
    1e9c:	78 1f       	adc	r23, r24
    1e9e:	89 1f       	adc	r24, r25
    1ea0:	9a 1f       	adc	r25, r26
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	68 0f       	add	r22, r24
    1ea6:	79 1f       	adc	r23, r25
    1ea8:	8a 1f       	adc	r24, r26
    1eaa:	91 1d       	adc	r25, r1
    1eac:	a1 1d       	adc	r26, r1
    1eae:	6a 0f       	add	r22, r26
    1eb0:	71 1d       	adc	r23, r1
    1eb2:	81 1d       	adc	r24, r1
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	20 d0       	rcall	.+64     	; 0x1efa <__ultoa_invert+0x84>
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__ultoa_invert+0x48>
    1ebc:	68 94       	set
    1ebe:	3f 91       	pop	r19
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	26 9f       	mul	r18, r22
    1ec4:	11 24       	eor	r1, r1
    1ec6:	30 19       	sub	r19, r0
    1ec8:	30 5d       	subi	r19, 0xD0	; 208
    1eca:	31 93       	st	Z+, r19
    1ecc:	de f6       	brtc	.-74     	; 0x1e84 <__ultoa_invert+0xe>
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret
    1ed2:	46 2f       	mov	r20, r22
    1ed4:	47 70       	andi	r20, 0x07	; 7
    1ed6:	40 5d       	subi	r20, 0xD0	; 208
    1ed8:	41 93       	st	Z+, r20
    1eda:	b3 e0       	ldi	r27, 0x03	; 3
    1edc:	0f d0       	rcall	.+30     	; 0x1efc <__ultoa_invert+0x86>
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__ultoa_invert+0x5c>
    1ee0:	f6 cf       	rjmp	.-20     	; 0x1ece <__ultoa_invert+0x58>
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	4f 70       	andi	r20, 0x0F	; 15
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	4a 33       	cpi	r20, 0x3A	; 58
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <__ultoa_invert+0x7c>
    1eec:	49 5d       	subi	r20, 0xD9	; 217
    1eee:	31 fd       	sbrc	r19, 1
    1ef0:	40 52       	subi	r20, 0x20	; 32
    1ef2:	41 93       	st	Z+, r20
    1ef4:	02 d0       	rcall	.+4      	; 0x1efa <__ultoa_invert+0x84>
    1ef6:	a9 f7       	brne	.-22     	; 0x1ee2 <__ultoa_invert+0x6c>
    1ef8:	ea cf       	rjmp	.-44     	; 0x1ece <__ultoa_invert+0x58>
    1efa:	b4 e0       	ldi	r27, 0x04	; 4
    1efc:	a6 95       	lsr	r26
    1efe:	97 95       	ror	r25
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	ba 95       	dec	r27
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x86>
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 05       	cpc	r22, r1
    1f0e:	71 05       	cpc	r23, r1
    1f10:	08 95       	ret
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	0a 2e       	mov	r0, r26
    1f18:	06 94       	lsr	r0
    1f1a:	57 95       	ror	r21
    1f1c:	47 95       	ror	r20
    1f1e:	37 95       	ror	r19
    1f20:	27 95       	ror	r18
    1f22:	ba 95       	dec	r27
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__ultoa_invert+0xa2>
    1f26:	62 0f       	add	r22, r18
    1f28:	73 1f       	adc	r23, r19
    1f2a:	84 1f       	adc	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	a0 1d       	adc	r26, r0
    1f30:	08 95       	ret

00001f32 <_exit>:
    1f32:	f8 94       	cli

00001f34 <__stop_program>:
    1f34:	ff cf       	rjmp	.-2      	; 0x1f34 <__stop_program>
