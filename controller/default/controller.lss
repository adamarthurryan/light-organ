
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00802000  000022c2  00002356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018a  0080202c  0080202c  00002382  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d4e  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006d53  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011ef  00000000  00000000  00009f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002108  00000000  00000000  0000b172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  0000d27c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003ffa  00000000  00000000  0000d9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001292  00000000  00000000  000119e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00012c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_20>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      ac:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_49>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_51>
      d0:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_52>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      ec:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      f0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      f4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      f8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      fc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     100:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     104:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     108:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     10c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     110:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_68>
     114:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_69>
     118:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     11c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_71>
     120:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     124:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     128:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     12c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     130:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     134:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_77>
     138:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     13c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     140:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     144:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     148:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     14c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     150:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     154:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     158:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     15c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     160:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     164:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     168:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     16c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     170:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
     174:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	df e2       	ldi	r29, 0x2F	; 47
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61
     184:	18 be       	out	0x38, r1	; 56
     186:	19 be       	out	0x39, r1	; 57
     188:	1a be       	out	0x3a, r1	; 58
     18a:	1b be       	out	0x3b, r1	; 59

0000018c <__do_copy_data>:
     18c:	10 e2       	ldi	r17, 0x20	; 32
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b0 e2       	ldi	r27, 0x20	; 32
     192:	e2 ec       	ldi	r30, 0xC2	; 194
     194:	f2 e2       	ldi	r31, 0x22	; 34
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	ac 32       	cpi	r26, 0x2C	; 44
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	11 e2       	ldi	r17, 0x21	; 33
     1a4:	ac e2       	ldi	r26, 0x2C	; 44
     1a6:	b0 e2       	ldi	r27, 0x20	; 32
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a6 3b       	cpi	r26, 0xB6	; 182
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <main>
     1b6:	0c 94 5f 11 	jmp	0x22be	; 0x22be <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <setDutyCycles>:
}

//set the duty cycle for each output channel
//duty cycle is expressed as a byte value
//0 is fully off, 255 is fully on
void setDutyCycles(uint8_t _dutyA, uint8_t _dutyB, uint8_t _dutyC) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	e6 2e       	mov	r14, r22
     1e0:	a4 2e       	mov	r10, r20
	//save the duty settings as global variables (for debugging)
	dutyA=_dutyA; dutyB=_dutyB; dutyC=_dutyC;
     1e2:	80 93 85 20 	sts	0x2085, r24
     1e6:	60 93 a7 20 	sts	0x20A7, r22
     1ea:	40 93 aa 20 	sts	0x20AA, r20

	//calculate the number of ticks given the duty cycle
	uint32_t prodA = (uint32_t) _dutyA * phasePeriod;
     1ee:	40 90 30 20 	lds	r4, 0x2030
     1f2:	50 90 31 20 	lds	r5, 0x2031
     1f6:	32 01       	movw	r6, r4
     1f8:	88 24       	eor	r8, r8
     1fa:	99 24       	eor	r9, r9
	uint16_t ticksA= phasePeriod - (prodA/255);
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	a0 e0       	ldi	r26, 0x00	; 0
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	bc 01       	movw	r22, r24
     204:	cd 01       	movw	r24, r26
     206:	a4 01       	movw	r20, r8
     208:	93 01       	movw	r18, r6
     20a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     20e:	2f ef       	ldi	r18, 0xFF	; 255
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
     21a:	c2 01       	movw	r24, r4
     21c:	82 1b       	sub	r24, r18
     21e:	93 0b       	sbc	r25, r19

	//set the timer comparator value
	//the comparator output pins for the phase timer will be the duty cycle output
	TC_SetCompareA(&PHASE_timer, ticksA);
     220:	21 2c       	mov	r2, r1
     222:	2a e0       	ldi	r18, 0x0A	; 10
     224:	32 2e       	mov	r3, r18
     226:	f1 01       	movw	r30, r2
     228:	80 af       	std	Z+56, r24	; 0x38
     22a:	91 af       	std	Z+57, r25	; 0x39

	uint32_t prodB = (uint32_t)_dutyB * phasePeriod;
	uint16_t ticksB=phasePeriod - (prodB/255);
     22c:	ff 24       	eor	r15, r15
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	c8 01       	movw	r24, r16
     234:	b7 01       	movw	r22, r14
     236:	a4 01       	movw	r20, r8
     238:	93 01       	movw	r18, r6
     23a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     23e:	2f ef       	ldi	r18, 0xFF	; 255
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
     24a:	c2 01       	movw	r24, r4
     24c:	82 1b       	sub	r24, r18
     24e:	93 0b       	sbc	r25, r19
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC_SetCompareD(&PHASE_timer, ticksB);
     250:	80 93 3e 0a 	sts	0x0A3E, r24
     254:	90 93 3f 0a 	sts	0x0A3F, r25

	uint32_t prodC = (uint32_t)_dutyC * phasePeriod;
	uint16_t ticksC=phasePeriod - (prodC/255);
     258:	bb 24       	eor	r11, r11
     25a:	cc 24       	eor	r12, r12
     25c:	dd 24       	eor	r13, r13
     25e:	c6 01       	movw	r24, r12
     260:	b5 01       	movw	r22, r10
     262:	a4 01       	movw	r20, r8
     264:	93 01       	movw	r18, r6
     266:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     26a:	2f ef       	ldi	r18, 0xFF	; 255
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
     276:	42 1a       	sub	r4, r18
     278:	53 0a       	sbc	r5, r19
	TC_SetCompareC(&PHASE_timer, ticksC);
     27a:	f1 01       	movw	r30, r2
     27c:	44 ae       	std	Z+60, r4	; 0x3c
     27e:	55 ae       	std	Z+61, r5	; 0x3d
	
//	debug1=(uint16_t) (prodA/255);
//	debug2=ticksA;
}
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	3f 90       	pop	r3
     29e:	2f 90       	pop	r2
     2a0:	08 95       	ret

000002a2 <__vector_77>:
		nop();
}

//the UI timer interrupt
ISR(UI_vect)
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	08 b6       	in	r0, 0x38	; 56
     2ac:	0f 92       	push	r0
     2ae:	09 b6       	in	r0, 0x39	; 57
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	18 be       	out	0x38, r1	; 56
     2b6:	19 be       	out	0x39, r1	; 57
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
	msClock+=ms_UI_interval;
     2c0:	80 91 2c 20 	lds	r24, 0x202C
     2c4:	90 91 2d 20 	lds	r25, 0x202D
     2c8:	a0 91 2e 20 	lds	r26, 0x202E
     2cc:	b0 91 2f 20 	lds	r27, 0x202F
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	a1 1d       	adc	r26, r1
     2d4:	b1 1d       	adc	r27, r1
     2d6:	80 93 2c 20 	sts	0x202C, r24
     2da:	90 93 2d 20 	sts	0x202D, r25
     2de:	a0 93 2e 20 	sts	0x202E, r26
     2e2:	b0 93 2f 20 	sts	0x202F, r27
}
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	0f 90       	pop	r0
     2f0:	09 be       	out	0x39, r0	; 57
     2f2:	0f 90       	pop	r0
     2f4:	08 be       	out	0x38, r0	; 56
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <__vector_49>:

}

//the interrupts for the comparators - when a comparator is triggered, turn on the cooresponding pin
//these could possibly be optimized by making them ISR_NAKED and doing the setup by hand
ISR(TCE0_CCA_vect) {
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	08 b6       	in	r0, 0x38	; 56
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	18 be       	out	0x38, r1	; 56
     310:	8f 93       	push	r24
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN0_bm;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	e0 e6       	ldi	r30, 0x60	; 96
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	85 83       	std	Z+5, r24	; 0x05
}
     31e:	ff 91       	pop	r31
     320:	ef 91       	pop	r30
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	08 be       	out	0x38, r0	; 56
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <__vector_52>:
ISR(TCE0_CCD_vect) {
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	08 b6       	in	r0, 0x38	; 56
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	18 be       	out	0x38, r1	; 56
     342:	8f 93       	push	r24
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN1_bm;
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	e0 e6       	ldi	r30, 0x60	; 96
     34c:	f6 e0       	ldi	r31, 0x06	; 6
     34e:	85 83       	std	Z+5, r24	; 0x05
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	8f 91       	pop	r24
     356:	0f 90       	pop	r0
     358:	08 be       	out	0x38, r0	; 56
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <__vector_51>:
ISR(TCE0_CCC_vect) {
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	08 b6       	in	r0, 0x38	; 56
     36e:	0f 92       	push	r0
     370:	11 24       	eor	r1, r1
     372:	18 be       	out	0x38, r1	; 56
     374:	8f 93       	push	r24
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
	PHASE_port.OUTSET = PIN2_bm;
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	e0 e6       	ldi	r30, 0x60	; 96
     37e:	f6 e0       	ldi	r31, 0x06	; 6
     380:	85 83       	std	Z+5, r24	; 0x05
}
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	8f 91       	pop	r24
     388:	0f 90       	pop	r0
     38a:	08 be       	out	0x38, r0	; 56
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <initializeDAC>:
}


//enable DACB and set it to output whenever the sample event (event 0) occurs
void initializeDAC() {
	DAC_SingleChannel_Enable(&DACB, DAC_REFSEL_AVCC_gc, false);
     396:	80 e2       	ldi	r24, 0x20	; 32
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	68 e0       	ldi	r22, 0x08	; 8
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <DAC_SingleChannel_Enable>
	DAC_EventAction_Set( &DACB, DAC_CH0TRIG_bm, 0 );
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	0e 94 9d 0c 	call	0x193a	; 0x193a <DAC_EventAction_Set>
}
     3ae:	08 95       	ret

000003b0 <initializeCaptureTimer>:


//set up a sample capture timer and enable its interrupt:
void initializeCaptureTimer() {
	//set the mode
	TC1_ConfigWGM( &CAPTURE_timer, TC_WGMODE_NORMAL_gc);
     3b0:	80 e4       	ldi	r24, 0x40	; 64
     3b2:	98 e0       	ldi	r25, 0x08	; 8
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	0e 94 df 09 	call	0x13be	; 0x13be <TC1_ConfigWGM>
	//set the clock source to event 4
	//event 4 will be triggered every time a sample is captured and filtered
	TC1_ConfigClockSource(&CAPTURE_timer, TC_CLKSEL_EVCH4_gc);
     3ba:	80 e4       	ldi	r24, 0x40	; 64
     3bc:	98 e0       	ldi	r25, 0x08	; 8
     3be:	6c e0       	ldi	r22, 0x0C	; 12
     3c0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TC1_ConfigClockSource>
	//the timer overflows every BINSIZE captured samples
	TC_SetPeriod( &CAPTURE_timer, CAPTURE_binsize);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	e0 e4       	ldi	r30, 0x40	; 64
     3ca:	f8 e0       	ldi	r31, 0x08	; 8
     3cc:	86 a3       	std	Z+38, r24	; 0x26
     3ce:	97 a3       	std	Z+39, r25	; 0x27
	//set the interupt
	TC1_SetOverflowIntLevel( &CAPTURE_timer, TC_OVFINTLVL_LO_gc );
     3d0:	80 e4       	ldi	r24, 0x40	; 64
     3d2:	98 e0       	ldi	r25, 0x08	; 8
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	0e 94 13 0a 	call	0x1426	; 0x1426 <TC1_SetOverflowIntLevel>
}
     3da:	08 95       	ret

000003dc <initializeSampleTimer>:
}

//set up a sample timer, let it be the source for event 0
void initializeSampleTimer() {
	//set the mode
	TC1_ConfigWGM( &SAMPLE_timer, TC_WGMODE_NORMAL_gc);
     3dc:	80 e4       	ldi	r24, 0x40	; 64
     3de:	99 e0       	ldi	r25, 0x09	; 9
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	0e 94 df 09 	call	0x13be	; 0x13be <TC1_ConfigWGM>
	//set the clock source
	TC1_ConfigClockSource(&SAMPLE_timer, TC_CLKSEL_DIV1_gc);
     3e6:	80 e4       	ldi	r24, 0x40	; 64
     3e8:	99 e0       	ldi	r25, 0x09	; 9
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TC1_ConfigClockSource>
	//set the wave period (32MHz / 44.1KHz hZ = 725.62)
	TC_SetPeriod( &SAMPLE_timer, 32000000/SAMPLE_rate);
     3f0:	8d e5       	ldi	r24, 0x5D	; 93
     3f2:	9b e0       	ldi	r25, 0x0B	; 11
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f9 e0       	ldi	r31, 0x09	; 9
     3f8:	86 a3       	std	Z+38, r24	; 0x26
     3fa:	97 a3       	std	Z+39, r25	; 0x27
			//TC1_ConfigClockSource(&SAMPLE_timer, TC_CLKSEL_DIV256_gc);
			///TC_SetPeriod( &SAMPLE_timer, 65535/8);


	//send overflow events as SAMPLE
	EVSYS_SetEventSource(0, SAMPLE_evsrc);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	68 ed       	ldi	r22, 0xD8	; 216
     400:	0e 94 a5 0c 	call	0x194a	; 0x194a <EVSYS_SetEventSource>
}
     404:	08 95       	ret

00000406 <initializeADC>:
	AC_Enable(&ACA, ANALOG_COMPARATOR0, false);
	AC_Enable(&ACA, ANALOG_COMPARATOR1, false);
}

//initialize a one-channel analog to digital converter (ADC)
void initializeADC() {
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
	/* Move stored calibration values to ADC A. */
	ADC_CalibrationValues_Load(&ADCA);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <ADC_CalibrationValues_Load>
			(we only have half precision on the ADC since the input is single ended)
			(maybe this could be corrected by using a balanced input topology)
	*/

	/* Set up ADC A to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Signed, ADC_RESOLUTION_12BIT_gc);
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	12 e0       	ldi	r17, 0x02	; 2
     41a:	f8 01       	movw	r30, r16
     41c:	81 81       	ldd	r24, Z+1	; 0x01
     41e:	89 7e       	andi	r24, 0xE9	; 233
     420:	80 61       	ori	r24, 0x10	; 16
     422:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV64_gc);
     424:	84 81       	ldd	r24, Z+4	; 0x04
     426:	88 7f       	andi	r24, 0xF8	; 248
     428:	84 60       	ori	r24, 0x04	; 4
     42a:	84 83       	std	Z+4, r24	; 0x04

	/* Set referance voltage on ADC A to be 1 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_AREFA_gc);
     42c:	82 81       	ldd	r24, Z+2	; 0x02
     42e:	8f 7c       	andi	r24, 0xCF	; 207
     430:	80 62       	ori	r24, 0x20	; 32
     432:	82 83       	std	Z+2, r24	; 0x02

   	/* Get offset value for ADC A. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     434:	30 e2       	ldi	r19, 0x20	; 32
     436:	e3 2e       	mov	r14, r19
     438:	32 e0       	ldi	r19, 0x02	; 2
     43a:	f3 2e       	mov	r15, r19
     43c:	f7 01       	movw	r30, r14
     43e:	80 81       	ld	r24, Z
     440:	80 7e       	andi	r24, 0xE0	; 224
     442:	8f 60       	ori	r24, 0x0F	; 15
     444:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFFWGAIN_gc,
	                                 ADC_CH_GAIN_8X_gc);
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_AREF_DIV_2_MUXPOS_pin, ADC_AREF_DIV_2_MUXNEG_pin);
     446:	89 e0       	ldi	r24, 0x09	; 9
     448:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     44a:	f8 01       	movw	r30, r16
     44c:	80 81       	ld	r24, Z
     44e:	81 60       	ori	r24, 0x01	; 1
     450:	80 83       	st	Z, r24

	/* Wait until common mode voltage is stable. This is configured to wait the minimum amount of time at 32MHz. */
	ADC_Wait_32MHz(&ADCA);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 3e 0b 	call	0x167c	; 0x167c <ADC_Wait_32MHz>
 	ADC_offset = ADC_Offset_Get_Signed(&ADCA, &ADCA.CH0, true);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	60 e2       	ldi	r22, 0x20	; 32
     460:	72 e0       	ldi	r23, 0x02	; 2
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <ADC_Offset_Get_Signed>
     468:	99 27       	eor	r25, r25
     46a:	87 fd       	sbrc	r24, 7
     46c:	90 95       	com	r25
     46e:	80 93 38 20 	sts	0x2038, r24
     472:	90 93 39 20 	sts	0x2039, r25
    ADC_Disable(&ADCA);
     476:	f8 01       	movw	r30, r16
     478:	80 81       	ld	r24, Z
     47a:	8e 7f       	andi	r24, 0xFE	; 254
     47c:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFFWGAIN_gc, 
									 ADC_gain);
	*/

	// Setup channel 0 to have differential input, with no gain
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     47e:	f7 01       	movw	r30, r14
     480:	80 81       	ld	r24, Z
     482:	80 7e       	andi	r24, 0xE0	; 224
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
	                                 ADC_CH_INPUTMODE_DIFF_gc, 
									 ADC_DRIVER_CH_GAIN_NONE);

	// Set input to the channel 0 in ADC A to be PIN 4. The negative input is the AREF / 2 reference pin
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN4_gc, ADC_AREF_DIV_2_MUXNEG_pin);
     488:	81 e2       	ldi	r24, 0x21	; 33
     48a:	81 83       	std	Z+1, r24	; 0x01


	//!!! Here we should set up the other three ADC channels

	/* Setup only sweep channel 0.*/
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
     48c:	f8 01       	movw	r30, r16
     48e:	83 81       	ldd	r24, Z+3	; 0x03
     490:	8f 73       	andi	r24, 0x3F	; 63
     492:	83 83       	std	Z+3, r24	; 0x03

	/* Enable medium level interrupts on ADCA channel 0, on conversion complete. */
	ADC_Ch_Interrupts_Config(&ADCA.CH0, ADC_CH_INTMODE_COMPLETE_gc, ADC_CH_INTLVL_MED_gc);
     494:	f7 01       	movw	r30, r14
     496:	82 81       	ldd	r24, Z+2	; 0x02
     498:	80 7f       	andi	r24, 0xF0	; 240
     49a:	82 60       	ori	r24, 0x02	; 2
     49c:	82 83       	std	Z+2, r24	; 0x02

	/* Perform automatic sample conversion on ADCA channel 0 when event 0 occurs. */
	ADC_Events_Config(&ADCA, ADC_EVSEL_0123_gc, ADC_EVACT_CH0_gc);
     49e:	f8 01       	movw	r30, r16
     4a0:	83 81       	ldd	r24, Z+3	; 0x03
     4a2:	80 7c       	andi	r24, 0xC0	; 192
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC A with VCC reference and signed conversion.*/
	ADC_Enable(&ADCA);
     4a8:	80 81       	ld	r24, Z
     4aa:	81 60       	ori	r24, 0x01	; 1
     4ac:	80 83       	st	Z, r24

	/* Wait until common mode voltage is stable. This is configured to wait the minimum amount of time at 32MHz. */
	ADC_Wait_32MHz(&ADCA);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 3e 0b 	call	0x167c	; 0x167c <ADC_Wait_32MHz>
}
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret

000004c0 <initializePhaseComparator>:
}

//sets up rising and falling edge phase comparators
void initializePhaseComparator() {
	//configure the analog comparator (AC) voltage scaler
	AC_ConfigVoltageScaler(&ACA, 1);//1);//63); 
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <AC_ConfigVoltageScaler>
				//the voltage scaler was set to 1, once upon a time
				//does 63 work better? who the eff knows !!!
				
	//configure the AC inputs
	//AC 0 is the rising edge and AC 1 is the falling edge
	AC_ConfigMUX(&ACA, ANALOG_COMPARATOR0, AC_pin, AC_MUXNEG_SCALER_gc);
     4ca:	80 e8       	ldi	r24, 0x80	; 128
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	40 e1       	ldi	r20, 0x10	; 16
     4d2:	27 e0       	ldi	r18, 0x07	; 7
     4d4:	0e 94 94 0a 	call	0x1528	; 0x1528 <AC_ConfigMUX>
	AC_ConfigMUX(&ACA, ANALOG_COMPARATOR1, AC_pin, AC_MUXNEG_SCALER_gc);
     4d8:	80 e8       	ldi	r24, 0x80	; 128
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	40 e1       	ldi	r20, 0x10	; 16
     4e0:	27 e0       	ldi	r18, 0x07	; 7
     4e2:	0e 94 94 0a 	call	0x1528	; 0x1528 <AC_ConfigMUX>

	//configure the interrupts
	AC_ConfigInterrupt(&ACA, ANALOG_COMPARATOR0, AC_INTMODE_RISING_gc, AC_INTLVL_HI_gc);
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	40 ec       	ldi	r20, 0xC0	; 192
     4ee:	20 e3       	ldi	r18, 0x30	; 48
     4f0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <AC_ConfigInterrupt>
	AC_ConfigInterrupt(&ACA, ANALOG_COMPARATOR1, AC_INTMODE_FALLING_gc, AC_INTLVL_HI_gc);
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	20 e3       	ldi	r18, 0x30	; 48
     4fe:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <AC_ConfigInterrupt>

	//configure the hysteresis - this needs to be LARGE: small or no hysteresis causes glitches
	AC_ConfigHysteresis(&ACA, ANALOG_COMPARATOR0, AC_HYSMODE_LARGE_gc);
     502:	80 e8       	ldi	r24, 0x80	; 128
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	44 e0       	ldi	r20, 0x04	; 4
     50a:	0e 94 87 0a 	call	0x150e	; 0x150e <AC_ConfigHysteresis>
	AC_ConfigHysteresis(&ACA, ANALOG_COMPARATOR1, AC_HYSMODE_LARGE_gc);
     50e:	80 e8       	ldi	r24, 0x80	; 128
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	44 e0       	ldi	r20, 0x04	; 4
     516:	0e 94 87 0a 	call	0x150e	; 0x150e <AC_ConfigHysteresis>


	//enable the ACs
	//should the high-speed parameter (3rd argument) be true?
	AC_Enable(&ACA, ANALOG_COMPARATOR0, false);
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	0e 94 57 0a 	call	0x14ae	; 0x14ae <AC_Enable>
	AC_Enable(&ACA, ANALOG_COMPARATOR1, false);
     526:	80 e8       	ldi	r24, 0x80	; 128
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <AC_Enable>
}
     532:	08 95       	ret

00000534 <__vector_69>:
}

//the analog comparator falling edge interrupt
//note this is mislabeled as "COMP1_vect" in the ATXMEGA datasheet!
ISR(ACA_AC1_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	08 b6       	in	r0, 0x38	; 56
     53e:	0f 92       	push	r0
     540:	09 b6       	in	r0, 0x39	; 57
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
	//turn off phase timer
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_OFF_gc);   
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	9a e0       	ldi	r25, 0x0A	; 10
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	0e 94 cd 09 	call	0x139a	; 0x139a <TC0_ConfigClockSource>

	//reset the output pins
	PHASE_port.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
     56c:	87 e0       	ldi	r24, 0x07	; 7
     56e:	e0 e6       	ldi	r30, 0x60	; 96
     570:	f6 e0       	ldi	r31, 0x06	; 6
     572:	86 83       	std	Z+6, r24	; 0x06

	//force update of compare values
	//this would normally happen when the counter overflows
	TC_ForceUpdate(&PHASE_timer);
     574:	e0 e0       	ldi	r30, 0x00	; 0
     576:	fa e0       	ldi	r31, 0x0A	; 10
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	81 87       	std	Z+9, r24	; 0x09

	//read the counter
	phasePeriodLast=PHASE_timer.CNT;
     57c:	80 a1       	ldd	r24, Z+32	; 0x20
     57e:	91 a1       	ldd	r25, Z+33	; 0x21
     580:	80 93 32 20 	sts	0x2032, r24
     584:	90 93 33 20 	sts	0x2033, r25

	//set the counter to 0 and clear the comparators
	TC_Restart(&PHASE_timer);
     588:	88 e0       	ldi	r24, 0x08	; 8
     58a:	81 87       	std	Z+9, r24	; 0x09

	//flag that a zero-cross falling edge event has occured
	fPhaseEnd=true;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 35 20 	sts	0x2035, r24

}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	09 be       	out	0x39, r0	; 57
     5ae:	0f 90       	pop	r0
     5b0:	08 be       	out	0x38, r0	; 56
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <__vector_68>:


//the analog comparator rising edge interrupt
//note this is mislabeled as "COMP0_vect" in the ATXMEGA datasheet!
ISR(ACA_AC0_vect)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	08 b6       	in	r0, 0x38	; 56
     5c6:	0f 92       	push	r0
     5c8:	09 b6       	in	r0, 0x39	; 57
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	18 be       	out	0x38, r1	; 56
     5d0:	19 be       	out	0x39, r1	; 57
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	4f 93       	push	r20
     5d8:	5f 93       	push	r21
     5da:	6f 93       	push	r22
     5dc:	7f 93       	push	r23
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
     5e2:	af 93       	push	r26
     5e4:	bf 93       	push	r27
     5e6:	ef 93       	push	r30
     5e8:	ff 93       	push	r31
	//turn on the counter
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_DIV64_gc);   
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	9a e0       	ldi	r25, 0x0A	; 10
     5ee:	65 e0       	ldi	r22, 0x05	; 5
     5f0:	0e 94 cd 09 	call	0x139a	; 0x139a <TC0_ConfigClockSource>

	//flag that a zero-cross rising edge event has occured
	fPhaseBegin=true;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 34 20 	sts	0x2034, r24

}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	09 be       	out	0x39, r0	; 57
     616:	0f 90       	pop	r0
     618:	08 be       	out	0x38, r0	; 56
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <initializePhaseTimer>:

//set up a timer for the ac phase / zero-crossing detector
void initializePhaseTimer() {

	//set the timer to normal mode (no waveform generation)
	TC0_ConfigWGM(&PHASE_timer, TC_WGMODE_NORMAL_gc);
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	9a e0       	ldi	r25, 0x0A	; 10
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TC0_ConfigWGM>
		//for automatic comparator pin output, we set the mode to single-slope waveform generation
		//this puts the results of the enabled comparator channels on the coresponding output pins
		//TC0_ConfigWGM(&PHASE_timer, TC_WGMODE_SS_gc);

	//set the clock OFF
	TC0_ConfigClockSource(&PHASE_timer, TC_CLKSEL_OFF_gc);   
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	9a e0       	ldi	r25, 0x0A	; 10
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	0e 94 cd 09 	call	0x139a	; 0x139a <TC0_ConfigClockSource>
	//later we will configure this clock to a prescale of 64
	//this gives a resolution of 500 ticks per ms, ie. 2us period
	//we should find about 4167 ticks per half cycle at 60 Hz

	//the comparator pins must be enabled as output
	PHASE_port.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm ; 
     638:	e0 e6       	ldi	r30, 0x60	; 96
     63a:	f6 e0       	ldi	r31, 0x06	; 6
     63c:	87 e0       	ldi	r24, 0x07	; 7
     63e:	81 83       	std	Z+1, r24	; 0x01
	PHASE_port.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm ; 
     640:	86 83       	std	Z+6, r24	; 0x06

	//the comparator channels A, B and C will implement the duty cycle for the three output channels
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC0_EnableCCChannels(&PHASE_timer, (TC0_CCAEN_bm | TC0_CCDEN_bm | TC0_CCCEN_bm));
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	9a e0       	ldi	r25, 0x0A	; 10
     646:	60 ed       	ldi	r22, 0xD0	; 208
     648:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TC0_EnableCCChannels>

	TC0_SetCCAIntLevel(&PHASE_timer, TC_CCAINTLVL_HI_gc);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	9a e0       	ldi	r25, 0x0A	; 10
     650:	63 e0       	ldi	r22, 0x03	; 3
     652:	0e 94 25 0a 	call	0x144a	; 0x144a <TC0_SetCCAIntLevel>
	TC0_SetCCDIntLevel(&PHASE_timer, TC_CCDINTLVL_HI_gc);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	9a e0       	ldi	r25, 0x0A	; 10
     65a:	60 ec       	ldi	r22, 0xC0	; 192
     65c:	0e 94 43 0a 	call	0x1486	; 0x1486 <TC0_SetCCDIntLevel>
	TC0_SetCCCIntLevel(&PHASE_timer, TC_CCCINTLVL_HI_gc);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	9a e0       	ldi	r25, 0x0A	; 10
     664:	60 e3       	ldi	r22, 0x30	; 48
     666:	0e 94 3d 0a 	call	0x147a	; 0x147a <TC0_SetCCCIntLevel>
		//PHASE_port.PIN0CTRL = PORT_INVEN_bm;
		//PHASE_port.PIN1CTRL = PORT_INVEN_bm;
		//PHASE_port.PIN2CTRL = PORT_INVEN_bm;


}
     66a:	08 95       	ret

0000066c <initializeUITimer>:
}

//set up a ui timer and enable its interrupt:
void initializeUITimer() {
	//set the mode
	TC0_ConfigWGM(&UI_timer, TC_WGMODE_NORMAL_gc);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	99 e0       	ldi	r25, 0x09	; 9
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TC0_ConfigWGM>
	//set the clock source (prescale by 128)
	TC0_ConfigClockSource(&UI_timer, TC_CLKSEL_DIV256_gc);   
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	99 e0       	ldi	r25, 0x09	; 9
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	0e 94 cd 09 	call	0x139a	; 0x139a <TC0_ConfigClockSource>
	//set the wave period (32 MHz / 256 = 125000 ticks / sec = 125 tics / ms)
	TC_SetPeriod( &UI_timer, 125*ms_UI_interval);
     680:	8d e7       	ldi	r24, 0x7D	; 125
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	e0 e0       	ldi	r30, 0x00	; 0
     686:	f9 e0       	ldi	r31, 0x09	; 9
     688:	86 a3       	std	Z+38, r24	; 0x26
     68a:	97 a3       	std	Z+39, r25	; 0x27
	//set the interupt
	TC0_SetOverflowIntLevel(&UI_timer, TC_OVFINTLVL_MED_gc);
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	99 e0       	ldi	r25, 0x09	; 9
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	0e 94 0d 0a 	call	0x141a	; 0x141a <TC0_SetOverflowIntLevel>
}
     696:	08 95       	ret

00000698 <enableInterrupts>:
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_RC32M_gc);
}

//enable interrupts
void enableInterrupts() {
	PMIC_SetVectorLocationToApplication();
     698:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	81 60       	ori	r24, 0x01	; 1
     6a4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel();
     6a6:	82 81       	ldd	r24, Z+2	; 0x02
     6a8:	82 60       	ori	r24, 0x02	; 2
     6aa:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	84 60       	ori	r24, 0x04	; 4
     6b0:	82 83       	std	Z+2, r24	; 0x02
	sei();
     6b2:	78 94       	sei
}
     6b4:	08 95       	ret

000006b6 <initializeMCU>:
//}

//set up the system clock
void initializeMCU() {
	//enable the 32MHz RC clock
	CLKSYS_Enable(OSC_RC32MEN_bm);
     6b6:	80 91 50 00 	lds	r24, 0x0050
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	80 93 50 00 	sts	0x0050, r24
	//block till the clock is ready
	while (! CLKSYS_IsReady(OSC_RC32MRDY_bm)) {}
     6c0:	80 91 51 00 	lds	r24, 0x0051
     6c4:	81 ff       	sbrs	r24, 1
     6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <initializeMCU+0xa>
	//use the 32MHz RC clock as the main system clock
	CLKSYS_Main_ClockSource_Select(CLK_SCLKSEL_RC32M_gc);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLKSYS_Main_ClockSource_Select>
}
     6ce:	08 95       	ret

000006d0 <__vector_71>:
	int8_t antialias_count=0;
#endif

//the sample capture interrupt from the ADC
//the ADC conversion is triggered by the sample timer and this ISR is called when the conversion is complete
ISR(ADCA_CH0_vect) {
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	08 b6       	in	r0, 0x38	; 56
     6da:	0f 92       	push	r0
     6dc:	09 b6       	in	r0, 0x39	; 57
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	18 be       	out	0x38, r1	; 56
     6e4:	19 be       	out	0x39, r1	; 57
     6e6:	2f 92       	push	r2
     6e8:	3f 92       	push	r3
     6ea:	4f 92       	push	r4
     6ec:	5f 92       	push	r5
     6ee:	6f 92       	push	r6
     6f0:	7f 92       	push	r7
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	2f 93       	push	r18
     708:	3f 93       	push	r19
     70a:	4f 93       	push	r20
     70c:	5f 93       	push	r21
     70e:	6f 93       	push	r22
     710:	7f 93       	push	r23
     712:	8f 93       	push	r24
     714:	9f 93       	push	r25
     716:	af 93       	push	r26
     718:	bf 93       	push	r27
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	68 97       	sbiw	r28, 0x18	; 24
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	de bf       	out	0x3e, r29	; 62

	//int16_t sample[INPUT_CHANNELS];
	int32_t sample[INPUT_CHANNELS];

	//read the samples (signed)
	sample[0]=ADC_ResultCh_GetWord_Signed(&ADCA.CH0, ADC_offset);
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	60 91 38 20 	lds	r22, 0x2038
     734:	0e 94 18 0b 	call	0x1630	; 0x1630 <ADC_ResultCh_GetWord_Signed>




//FUDGE FACTOR!!!
	sample[0]-=84;
     738:	7c 01       	movw	r14, r24
     73a:	00 27       	eor	r16, r16
     73c:	f7 fc       	sbrc	r15, 7
     73e:	00 95       	com	r16
     740:	10 2f       	mov	r17, r16
     742:	8c ea       	ldi	r24, 0xAC	; 172
     744:	9f ef       	ldi	r25, 0xFF	; 255
     746:	af ef       	ldi	r26, 0xFF	; 255
     748:	bf ef       	ldi	r27, 0xFF	; 255
     74a:	e8 0e       	add	r14, r24
     74c:	f9 1e       	adc	r15, r25
     74e:	0a 1f       	adc	r16, r26
     750:	1b 1f       	adc	r17, r27
			sample[1]=sample[0];
			sample[2]=sample[0];
		#endif

		#ifdef FILTERS_ENABLE
			debug1=sample[0];
     752:	e0 92 a8 20 	sts	0x20A8, r14
     756:	f0 92 a9 20 	sts	0x20A9, r15
			fastlowpass(sample[0], lowband_x0, lowband_x1, lowband_y0, lowband_y1, lowband_INVGAIN, lowband_B0);
     75a:	80 91 40 20 	lds	r24, 0x2040
     75e:	90 91 41 20 	lds	r25, 0x2041
     762:	a0 91 42 20 	lds	r26, 0x2042
     766:	b0 91 43 20 	lds	r27, 0x2043
     76a:	8d 8b       	std	Y+21, r24	; 0x15
     76c:	9e 8b       	std	Y+22, r25	; 0x16
     76e:	af 8b       	std	Y+23, r26	; 0x17
     770:	b8 8f       	std	Y+24, r27	; 0x18
     772:	80 93 3c 20 	sts	0x203C, r24
     776:	90 93 3d 20 	sts	0x203D, r25
     77a:	a0 93 3e 20 	sts	0x203E, r26
     77e:	b0 93 3f 20 	sts	0x203F, r27
     782:	a0 90 4c 20 	lds	r10, 0x204C
     786:	b0 90 4d 20 	lds	r11, 0x204D
     78a:	c0 90 4e 20 	lds	r12, 0x204E
     78e:	d0 90 4f 20 	lds	r13, 0x204F
     792:	a0 92 48 20 	sts	0x2048, r10
     796:	b0 92 49 20 	sts	0x2049, r11
     79a:	c0 92 4a 20 	sts	0x204A, r12
     79e:	d0 92 4b 20 	sts	0x204B, r13
     7a2:	c8 01       	movw	r24, r16
     7a4:	b7 01       	movw	r22, r14
     7a6:	22 e8       	ldi	r18, 0x82	; 130
     7a8:	31 e0       	ldi	r19, 0x01	; 1
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     7b2:	1b 01       	movw	r2, r22
     7b4:	2c 01       	movw	r4, r24
     7b6:	60 93 40 20 	sts	0x2040, r22
     7ba:	70 93 41 20 	sts	0x2041, r23
     7be:	80 93 42 20 	sts	0x2042, r24
     7c2:	90 93 43 20 	sts	0x2043, r25
     7c6:	c6 01       	movw	r24, r12
     7c8:	b5 01       	movw	r22, r10
     7ca:	2d ed       	ldi	r18, 0xDD	; 221
     7cc:	3d e0       	ldi	r19, 0x0D	; 13
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     7d6:	3b 01       	movw	r6, r22
     7d8:	4c 01       	movw	r8, r24
     7da:	8d 89       	ldd	r24, Y+21	; 0x15
     7dc:	9e 89       	ldd	r25, Y+22	; 0x16
     7de:	af 89       	ldd	r26, Y+23	; 0x17
     7e0:	b8 8d       	ldd	r27, Y+24	; 0x18
     7e2:	68 0e       	add	r6, r24
     7e4:	79 1e       	adc	r7, r25
     7e6:	8a 1e       	adc	r8, r26
     7e8:	9b 1e       	adc	r9, r27
     7ea:	62 0c       	add	r6, r2
     7ec:	73 1c       	adc	r7, r3
     7ee:	84 1c       	adc	r8, r4
     7f0:	95 1c       	adc	r9, r5
     7f2:	bc e0       	ldi	r27, 0x0C	; 12
     7f4:	95 94       	asr	r9
     7f6:	87 94       	ror	r8
     7f8:	77 94       	ror	r7
     7fa:	67 94       	ror	r6
     7fc:	ba 95       	dec	r27
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <__vector_71+0x124>
     800:	60 92 4c 20 	sts	0x204C, r6
     804:	70 92 4d 20 	sts	0x204D, r7
     808:	80 92 4e 20 	sts	0x204E, r8
     80c:	90 92 4f 20 	sts	0x204F, r9
		//	sample[0]=0;

		//more FUDGE!!!
			sample[0]-=35;
     810:	8d ed       	ldi	r24, 0xDD	; 221
     812:	9f ef       	ldi	r25, 0xFF	; 255
     814:	af ef       	ldi	r26, 0xFF	; 255
     816:	bf ef       	ldi	r27, 0xFF	; 255
     818:	68 0e       	add	r6, r24
     81a:	79 1e       	adc	r7, r25
     81c:	8a 1e       	adc	r8, r26
     81e:	9b 1e       	adc	r9, r27

			debug2=sample[1];
     820:	e0 92 a3 20 	sts	0x20A3, r14
     824:	f0 92 a4 20 	sts	0x20A4, r15
			fastbandpass(sample[1], midband_x0, midband_x1, midband_x2, midband_y0, midband_y1, midband_y2, midband_INVGAIN, midband_B0, midband_B1);
     828:	80 91 58 20 	lds	r24, 0x2058
     82c:	90 91 59 20 	lds	r25, 0x2059
     830:	a0 91 5a 20 	lds	r26, 0x205A
     834:	b0 91 5b 20 	lds	r27, 0x205B
     838:	89 8b       	std	Y+17, r24	; 0x11
     83a:	9a 8b       	std	Y+18, r25	; 0x12
     83c:	ab 8b       	std	Y+19, r26	; 0x13
     83e:	bc 8b       	std	Y+20, r27	; 0x14
     840:	80 93 54 20 	sts	0x2054, r24
     844:	90 93 55 20 	sts	0x2055, r25
     848:	a0 93 56 20 	sts	0x2056, r26
     84c:	b0 93 57 20 	sts	0x2057, r27
     850:	80 91 5c 20 	lds	r24, 0x205C
     854:	90 91 5d 20 	lds	r25, 0x205D
     858:	a0 91 5e 20 	lds	r26, 0x205E
     85c:	b0 91 5f 20 	lds	r27, 0x205F
     860:	80 93 58 20 	sts	0x2058, r24
     864:	90 93 59 20 	sts	0x2059, r25
     868:	a0 93 5a 20 	sts	0x205A, r26
     86c:	b0 93 5b 20 	sts	0x205B, r27
     870:	a0 90 64 20 	lds	r10, 0x2064
     874:	b0 90 65 20 	lds	r11, 0x2065
     878:	c0 90 66 20 	lds	r12, 0x2066
     87c:	d0 90 67 20 	lds	r13, 0x2067
     880:	a0 92 60 20 	sts	0x2060, r10
     884:	b0 92 61 20 	sts	0x2061, r11
     888:	c0 92 62 20 	sts	0x2062, r12
     88c:	d0 92 63 20 	sts	0x2063, r13
     890:	20 90 68 20 	lds	r2, 0x2068
     894:	30 90 69 20 	lds	r3, 0x2069
     898:	40 90 6a 20 	lds	r4, 0x206A
     89c:	50 90 6b 20 	lds	r5, 0x206B
     8a0:	20 92 64 20 	sts	0x2064, r2
     8a4:	30 92 65 20 	sts	0x2065, r3
     8a8:	40 92 66 20 	sts	0x2066, r4
     8ac:	50 92 67 20 	sts	0x2067, r5
     8b0:	c8 01       	movw	r24, r16
     8b2:	b7 01       	movw	r22, r14
     8b4:	23 e4       	ldi	r18, 0x43	; 67
     8b6:	36 e0       	ldi	r19, 0x06	; 6
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     8c0:	6d 87       	std	Y+13, r22	; 0x0d
     8c2:	7e 87       	std	Y+14, r23	; 0x0e
     8c4:	8f 87       	std	Y+15, r24	; 0x0f
     8c6:	98 8b       	std	Y+16, r25	; 0x10
     8c8:	60 93 5c 20 	sts	0x205C, r22
     8cc:	70 93 5d 20 	sts	0x205D, r23
     8d0:	80 93 5e 20 	sts	0x205E, r24
     8d4:	90 93 5f 20 	sts	0x205F, r25
     8d8:	c6 01       	movw	r24, r12
     8da:	b5 01       	movw	r22, r10
     8dc:	25 e8       	ldi	r18, 0x85	; 133
     8de:	3c ef       	ldi	r19, 0xFC	; 252
     8e0:	4f ef       	ldi	r20, 0xFF	; 255
     8e2:	5f ef       	ldi	r21, 0xFF	; 255
     8e4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     8e8:	5b 01       	movw	r10, r22
     8ea:	6c 01       	movw	r12, r24
     8ec:	c2 01       	movw	r24, r4
     8ee:	b1 01       	movw	r22, r2
     8f0:	25 eb       	ldi	r18, 0xB5	; 181
     8f2:	3c ef       	ldi	r19, 0xFC	; 252
     8f4:	4f ef       	ldi	r20, 0xFF	; 255
     8f6:	5f ef       	ldi	r21, 0xFF	; 255
     8f8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     8fc:	a6 0e       	add	r10, r22
     8fe:	b7 1e       	adc	r11, r23
     900:	c8 1e       	adc	r12, r24
     902:	d9 1e       	adc	r13, r25
     904:	89 89       	ldd	r24, Y+17	; 0x11
     906:	9a 89       	ldd	r25, Y+18	; 0x12
     908:	ab 89       	ldd	r26, Y+19	; 0x13
     90a:	bc 89       	ldd	r27, Y+20	; 0x14
     90c:	a8 1a       	sub	r10, r24
     90e:	b9 0a       	sbc	r11, r25
     910:	ca 0a       	sbc	r12, r26
     912:	db 0a       	sbc	r13, r27
     914:	8d 85       	ldd	r24, Y+13	; 0x0d
     916:	9e 85       	ldd	r25, Y+14	; 0x0e
     918:	af 85       	ldd	r26, Y+15	; 0x0f
     91a:	b8 89       	ldd	r27, Y+16	; 0x10
     91c:	a8 0e       	add	r10, r24
     91e:	b9 1e       	adc	r11, r25
     920:	ca 1e       	adc	r12, r26
     922:	db 1e       	adc	r13, r27
     924:	ac e0       	ldi	r26, 0x0C	; 12
     926:	d5 94       	asr	r13
     928:	c7 94       	ror	r12
     92a:	b7 94       	ror	r11
     92c:	a7 94       	ror	r10
     92e:	aa 95       	dec	r26
     930:	d1 f7       	brne	.-12     	; 0x926 <__vector_71+0x256>
     932:	a0 92 68 20 	sts	0x2068, r10
     936:	b0 92 69 20 	sts	0x2069, r11
     93a:	c0 92 6a 20 	sts	0x206A, r12
     93e:	d0 92 6b 20 	sts	0x206B, r13

			debug3=sample[2];
     942:	e0 92 ad 21 	sts	0x21AD, r14
     946:	f0 92 ae 21 	sts	0x21AE, r15
			fastbandpass(sample[2], highband_x0, highband_x1, highband_x2, highband_y0, highband_y1, highband_y2, highband_INVGAIN, highband_B0, highband_B1);
     94a:	80 91 70 20 	lds	r24, 0x2070
     94e:	90 91 71 20 	lds	r25, 0x2071
     952:	a0 91 72 20 	lds	r26, 0x2072
     956:	b0 91 73 20 	lds	r27, 0x2073
     95a:	89 87       	std	Y+9, r24	; 0x09
     95c:	9a 87       	std	Y+10, r25	; 0x0a
     95e:	ab 87       	std	Y+11, r26	; 0x0b
     960:	bc 87       	std	Y+12, r27	; 0x0c
     962:	80 93 6c 20 	sts	0x206C, r24
     966:	90 93 6d 20 	sts	0x206D, r25
     96a:	a0 93 6e 20 	sts	0x206E, r26
     96e:	b0 93 6f 20 	sts	0x206F, r27
     972:	80 91 74 20 	lds	r24, 0x2074
     976:	90 91 75 20 	lds	r25, 0x2075
     97a:	a0 91 76 20 	lds	r26, 0x2076
     97e:	b0 91 77 20 	lds	r27, 0x2077
     982:	80 93 70 20 	sts	0x2070, r24
     986:	90 93 71 20 	sts	0x2071, r25
     98a:	a0 93 72 20 	sts	0x2072, r26
     98e:	b0 93 73 20 	sts	0x2073, r27
     992:	80 91 7c 20 	lds	r24, 0x207C
     996:	90 91 7d 20 	lds	r25, 0x207D
     99a:	a0 91 7e 20 	lds	r26, 0x207E
     99e:	b0 91 7f 20 	lds	r27, 0x207F
     9a2:	8d 83       	std	Y+5, r24	; 0x05
     9a4:	9e 83       	std	Y+6, r25	; 0x06
     9a6:	af 83       	std	Y+7, r26	; 0x07
     9a8:	b8 87       	std	Y+8, r27	; 0x08
     9aa:	80 93 78 20 	sts	0x2078, r24
     9ae:	90 93 79 20 	sts	0x2079, r25
     9b2:	a0 93 7a 20 	sts	0x207A, r26
     9b6:	b0 93 7b 20 	sts	0x207B, r27
     9ba:	20 90 80 20 	lds	r2, 0x2080
     9be:	30 90 81 20 	lds	r3, 0x2081
     9c2:	40 90 82 20 	lds	r4, 0x2082
     9c6:	50 90 83 20 	lds	r5, 0x2083
     9ca:	20 92 7c 20 	sts	0x207C, r2
     9ce:	30 92 7d 20 	sts	0x207D, r3
     9d2:	40 92 7e 20 	sts	0x207E, r4
     9d6:	50 92 7f 20 	sts	0x207F, r5
     9da:	c8 01       	movw	r24, r16
     9dc:	b7 01       	movw	r22, r14
     9de:	24 e2       	ldi	r18, 0x24	; 36
     9e0:	36 e0       	ldi	r19, 0x06	; 6
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     9ea:	69 83       	std	Y+1, r22	; 0x01
     9ec:	7a 83       	std	Y+2, r23	; 0x02
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	60 93 74 20 	sts	0x2074, r22
     9f6:	70 93 75 20 	sts	0x2075, r23
     9fa:	80 93 76 20 	sts	0x2076, r24
     9fe:	90 93 77 20 	sts	0x2077, r25
     a02:	c2 01       	movw	r24, r4
     a04:	b1 01       	movw	r22, r2
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	3d ee       	ldi	r19, 0xED	; 237
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	5f ef       	ldi	r21, 0xFF	; 255
     a0e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1a:	ab 85       	ldd	r26, Y+11	; 0x0b
     a1c:	bc 85       	ldd	r27, Y+12	; 0x0c
     a1e:	e8 1a       	sub	r14, r24
     a20:	f9 0a       	sbc	r15, r25
     a22:	0a 0b       	sbc	r16, r26
     a24:	1b 0b       	sbc	r17, r27
     a26:	6d 81       	ldd	r22, Y+5	; 0x05
     a28:	7e 81       	ldd	r23, Y+6	; 0x06
     a2a:	8f 81       	ldd	r24, Y+7	; 0x07
     a2c:	98 85       	ldd	r25, Y+8	; 0x08
     a2e:	2d e8       	ldi	r18, 0x8D	; 141
     a30:	3b ef       	ldi	r19, 0xFB	; 251
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f ef       	ldi	r21, 0xFF	; 255
     a36:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     a3a:	e6 0e       	add	r14, r22
     a3c:	f7 1e       	adc	r15, r23
     a3e:	08 1f       	adc	r16, r24
     a40:	19 1f       	adc	r17, r25
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	ab 81       	ldd	r26, Y+3	; 0x03
     a48:	bc 81       	ldd	r27, Y+4	; 0x04
     a4a:	e8 0e       	add	r14, r24
     a4c:	f9 1e       	adc	r15, r25
     a4e:	0a 1f       	adc	r16, r26
     a50:	1b 1f       	adc	r17, r27
     a52:	fc e0       	ldi	r31, 0x0C	; 12
     a54:	15 95       	asr	r17
     a56:	07 95       	ror	r16
     a58:	f7 94       	ror	r15
     a5a:	e7 94       	ror	r14
     a5c:	fa 95       	dec	r31
     a5e:	d1 f7       	brne	.-12     	; 0xa54 <__vector_71+0x384>
     a60:	e0 92 80 20 	sts	0x2080, r14
     a64:	f0 92 81 20 	sts	0x2081, r15
     a68:	00 93 82 20 	sts	0x2082, r16
     a6c:	10 93 83 20 	sts	0x2083, r17


		//take the energy of the samples and add them to the running total
		//we don't shift down by the full 16 (11?) bits, just to leave a little numerical resolution
		for (int i=0;i<INPUT_CHANNELS;i++)
			energy_sum[i]+=((int32_t)sample[i]*sample[i])>>2;
     a70:	c4 01       	movw	r24, r8
     a72:	b3 01       	movw	r22, r6
     a74:	a4 01       	movw	r20, r8
     a76:	93 01       	movw	r18, r6
     a78:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	77 95       	ror	r23
     a82:	67 95       	ror	r22
     a84:	95 95       	asr	r25
     a86:	87 95       	ror	r24
     a88:	77 95       	ror	r23
     a8a:	67 95       	ror	r22
     a8c:	20 91 86 20 	lds	r18, 0x2086
     a90:	30 91 87 20 	lds	r19, 0x2087
     a94:	40 91 88 20 	lds	r20, 0x2088
     a98:	50 91 89 20 	lds	r21, 0x2089
     a9c:	26 0f       	add	r18, r22
     a9e:	37 1f       	adc	r19, r23
     aa0:	48 1f       	adc	r20, r24
     aa2:	59 1f       	adc	r21, r25
     aa4:	20 93 86 20 	sts	0x2086, r18
     aa8:	30 93 87 20 	sts	0x2087, r19
     aac:	40 93 88 20 	sts	0x2088, r20
     ab0:	50 93 89 20 	sts	0x2089, r21
     ab4:	c6 01       	movw	r24, r12
     ab6:	b5 01       	movw	r22, r10
     ab8:	a6 01       	movw	r20, r12
     aba:	95 01       	movw	r18, r10
     abc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     ac0:	95 95       	asr	r25
     ac2:	87 95       	ror	r24
     ac4:	77 95       	ror	r23
     ac6:	67 95       	ror	r22
     ac8:	95 95       	asr	r25
     aca:	87 95       	ror	r24
     acc:	77 95       	ror	r23
     ace:	67 95       	ror	r22
     ad0:	20 91 8a 20 	lds	r18, 0x208A
     ad4:	30 91 8b 20 	lds	r19, 0x208B
     ad8:	40 91 8c 20 	lds	r20, 0x208C
     adc:	50 91 8d 20 	lds	r21, 0x208D
     ae0:	26 0f       	add	r18, r22
     ae2:	37 1f       	adc	r19, r23
     ae4:	48 1f       	adc	r20, r24
     ae6:	59 1f       	adc	r21, r25
     ae8:	20 93 8a 20 	sts	0x208A, r18
     aec:	30 93 8b 20 	sts	0x208B, r19
     af0:	40 93 8c 20 	sts	0x208C, r20
     af4:	50 93 8d 20 	sts	0x208D, r21
     af8:	c8 01       	movw	r24, r16
     afa:	b7 01       	movw	r22, r14
     afc:	a8 01       	movw	r20, r16
     afe:	97 01       	movw	r18, r14
     b00:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
     b04:	95 95       	asr	r25
     b06:	87 95       	ror	r24
     b08:	77 95       	ror	r23
     b0a:	67 95       	ror	r22
     b0c:	95 95       	asr	r25
     b0e:	87 95       	ror	r24
     b10:	77 95       	ror	r23
     b12:	67 95       	ror	r22
     b14:	20 91 8e 20 	lds	r18, 0x208E
     b18:	30 91 8f 20 	lds	r19, 0x208F
     b1c:	40 91 90 20 	lds	r20, 0x2090
     b20:	50 91 91 20 	lds	r21, 0x2091
     b24:	26 0f       	add	r18, r22
     b26:	37 1f       	adc	r19, r23
     b28:	48 1f       	adc	r20, r24
     b2a:	59 1f       	adc	r21, r25
     b2c:	20 93 8e 20 	sts	0x208E, r18
     b30:	30 93 8f 20 	sts	0x208F, r19
     b34:	40 93 90 20 	sts	0x2090, r20
     b38:	50 93 91 20 	sts	0x2091, r21
				// what about this instead of the square?
				//energy_sum_0+=(sample_0>=0)?sample_0:-sample_0;

		//put a sample to the DAC for debugging
		int16_t sampleOut=sample[0];
		DAC_Channel_Write(&DACB, (uint16_t) (sampleOut + 2048), CH0);//+ADC_offset/2, CH0);
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b8 e0       	ldi	r27, 0x08	; 8
     b40:	6a 0e       	add	r6, r26
     b42:	7b 1e       	adc	r7, r27
     b44:	80 e2       	ldi	r24, 0x20	; 32
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	b3 01       	movw	r22, r6
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	0e 94 82 0c 	call	0x1904	; 0x1904 <DAC_Channel_Write>


		//increase the sample capture counter by sending event 4
		EVSYS_ManualTrigger(0, 0x10);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	60 e1       	ldi	r22, 0x10	; 16
     b54:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <EVSYS_ManualTrigger>


		//flag that the sample event occured
		fSampleCaptured=true;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 36 20 	sts	0x2036, r24
	}
}
     b5e:	68 96       	adiw	r28, 0x18	; 24
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	7f 90       	pop	r7
     b96:	6f 90       	pop	r6
     b98:	5f 90       	pop	r5
     b9a:	4f 90       	pop	r4
     b9c:	3f 90       	pop	r3
     b9e:	2f 90       	pop	r2
     ba0:	0f 90       	pop	r0
     ba2:	09 be       	out	0x39, r0	; 57
     ba4:	0f 90       	pop	r0
     ba6:	08 be       	out	0x38, r0	; 56
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <debugFilterTest>:
				y1_hist[i]=y1;
				y2_hist[i]=y2;
				results[i]=y2;
			}

			__builtin_avr_delay_cycles(4);
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <debugFilterTest+0x2>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <debugFilterTest+0x4>
		}
     bb6:	08 95       	ret

00000bb8 <error>:




//show an error and hang
void error(char * msg) {
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	8c 01       	movw	r16, r24
	display_clear();
     bbe:	0e 94 28 09 	call	0x1250	; 0x1250 <display_clear>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bc2:	80 ec       	ldi	r24, 0xC0	; 192
     bc4:	9d e5       	ldi	r25, 0x5D	; 93
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <error+0xe>
	_delay_ms(3);

	display_moveCursor(0x00);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 20 09 	call	0x1240	; 0x1240 <display_moveCursor>
	display_printString("ERROR");
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e2       	ldi	r25, 0x20	; 32
     bd6:	0e 94 0d 09 	call	0x121a	; 0x121a <display_printString>
	display_moveCursor(0x40);
     bda:	80 e4       	ldi	r24, 0x40	; 64
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 20 09 	call	0x1240	; 0x1240 <display_moveCursor>
	display_printString(msg);
     be2:	c8 01       	movw	r24, r16
     be4:	0e 94 0d 09 	call	0x121a	; 0x121a <display_printString>

	while (true) 
		nop();
     be8:	00 00       	nop
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <error+0x30>

00000bec <printDutyCycles>:
	}
}


//print the duty cycle to the display
void printDutyCycles() {
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
	sprintf(string, "a:%2X, b:%2X, c:%2X", dutyA, dutyB, dutyC);
     bf0:	20 91 85 20 	lds	r18, 0x2085
     bf4:	30 91 a7 20 	lds	r19, 0x20A7
     bf8:	40 91 aa 20 	lds	r20, 0x20AA
     bfc:	8d b7       	in	r24, 0x3d	; 61
     bfe:	9e b7       	in	r25, 0x3e	; 62
     c00:	0a 97       	sbiw	r24, 0x0a	; 10
     c02:	8d bf       	out	0x3d, r24	; 61
     c04:	9e bf       	out	0x3e, r25	; 62
     c06:	ed b7       	in	r30, 0x3d	; 61
     c08:	fe b7       	in	r31, 0x3e	; 62
     c0a:	31 96       	adiw	r30, 0x01	; 1
     c0c:	02 e9       	ldi	r16, 0x92	; 146
     c0e:	10 e2       	ldi	r17, 0x20	; 32
     c10:	ad b7       	in	r26, 0x3d	; 61
     c12:	be b7       	in	r27, 0x3e	; 62
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	0d 93       	st	X+, r16
     c18:	1c 93       	st	X, r17
     c1a:	12 97       	sbiw	r26, 0x02	; 2
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	90 e2       	ldi	r25, 0x20	; 32
     c20:	82 83       	std	Z+2, r24	; 0x02
     c22:	93 83       	std	Z+3, r25	; 0x03
     c24:	24 83       	std	Z+4, r18	; 0x04
     c26:	15 82       	std	Z+5, r1	; 0x05
     c28:	36 83       	std	Z+6, r19	; 0x06
     c2a:	17 82       	std	Z+7, r1	; 0x07
     c2c:	40 87       	std	Z+8, r20	; 0x08
     c2e:	11 86       	std	Z+9, r1	; 0x09
     c30:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <sprintf>
	display_moveCursor(0x40);
     c34:	8d b7       	in	r24, 0x3d	; 61
     c36:	9e b7       	in	r25, 0x3e	; 62
     c38:	0a 96       	adiw	r24, 0x0a	; 10
     c3a:	8d bf       	out	0x3d, r24	; 61
     c3c:	9e bf       	out	0x3e, r25	; 62
     c3e:	80 e4       	ldi	r24, 0x40	; 64
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 20 09 	call	0x1240	; 0x1240 <display_moveCursor>
	display_printString(string);
     c46:	c8 01       	movw	r24, r16
     c48:	0e 94 0d 09 	call	0x121a	; 0x121a <display_printString>
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <findPhasePeriod>:
//	debug1=(uint16_t) (prodA/255);
//	debug2=ticksA;
}

//find the noninal AC phase
void findPhasePeriod() {
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
	uint32_t sum=0;

	uint32_t msTimeout=msClock+10000;
     c5a:	e0 90 2c 20 	lds	r14, 0x202C
     c5e:	f0 90 2d 20 	lds	r15, 0x202D
     c62:	00 91 2e 20 	lds	r16, 0x202E
     c66:	10 91 2f 20 	lds	r17, 0x202F
     c6a:	80 e1       	ldi	r24, 0x10	; 16
     c6c:	97 e2       	ldi	r25, 0x27	; 39
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 0e       	add	r14, r24
     c74:	f9 1e       	adc	r15, r25
     c76:	0a 1f       	adc	r16, r26
     c78:	1b 1f       	adc	r17, r27
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0

	//average the phase period over one second
	for (int i=0;i<60;i++) {
		while (!fPhaseEnd) {
     c86:	80 91 35 20 	lds	r24, 0x2035
     c8a:	88 23       	and	r24, r24
     c8c:	29 f5       	brne	.+74     	; 0xcd8 <findPhasePeriod+0x86>
			if (msClock>=msTimeout)
     c8e:	80 91 2c 20 	lds	r24, 0x202C
     c92:	90 91 2d 20 	lds	r25, 0x202D
     c96:	a0 91 2e 20 	lds	r26, 0x202E
     c9a:	b0 91 2f 20 	lds	r27, 0x202F
     c9e:	8e 15       	cp	r24, r14
     ca0:	9f 05       	cpc	r25, r15
     ca2:	a0 07       	cpc	r26, r16
     ca4:	b1 07       	cpc	r27, r17
     ca6:	78 f3       	brcs	.-34     	; 0xc86 <findPhasePeriod+0x34>



//show an error and hang
void error(char * msg) {
	display_clear();
     ca8:	0e 94 28 09 	call	0x1250	; 0x1250 <display_clear>
     cac:	80 ec       	ldi	r24, 0xC0	; 192
     cae:	9d e5       	ldi	r25, 0x5D	; 93
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <findPhasePeriod+0x5e>
	_delay_ms(3);

	display_moveCursor(0x00);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 20 09 	call	0x1240	; 0x1240 <display_moveCursor>
	display_printString("ERROR");
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e2       	ldi	r25, 0x20	; 32
     cc0:	0e 94 0d 09 	call	0x121a	; 0x121a <display_printString>
	display_moveCursor(0x40);
     cc4:	80 e4       	ldi	r24, 0x40	; 64
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 20 09 	call	0x1240	; 0x1240 <display_moveCursor>
	display_printString(msg);
     ccc:	8a e1       	ldi	r24, 0x1A	; 26
     cce:	90 e2       	ldi	r25, 0x20	; 32
     cd0:	0e 94 0d 09 	call	0x121a	; 0x121a <display_printString>

	while (true) 
		nop();
     cd4:	00 00       	nop
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <findPhasePeriod+0x82>
	for (int i=0;i<60;i++) {
		while (!fPhaseEnd) {
			if (msClock>=msTimeout)
				error("finding period");
		}
		fPhaseEnd=false;
     cd8:	10 92 35 20 	sts	0x2035, r1

		sum+=phasePeriodLast;
     cdc:	80 91 32 20 	lds	r24, 0x2032
     ce0:	90 91 33 20 	lds	r25, 0x2033
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	28 0f       	add	r18, r24
     cea:	39 1f       	adc	r19, r25
     cec:	4a 1f       	adc	r20, r26
     cee:	5b 1f       	adc	r21, r27
	uint32_t sum=0;

	uint32_t msTimeout=msClock+10000;

	//average the phase period over one second
	for (int i=0;i<60;i++) {
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	6c 33       	cpi	r22, 0x3C	; 60
     cf6:	71 05       	cpc	r23, r1
     cf8:	34 f2       	brlt	.-116    	; 0xc86 <findPhasePeriod+0x34>
		fPhaseEnd=false;

		sum+=phasePeriodLast;
	}

	phasePeriod=sum/60;
     cfa:	ca 01       	movw	r24, r20
     cfc:	b9 01       	movw	r22, r18
     cfe:	2c e3       	ldi	r18, 0x3C	; 60
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
     d0a:	20 93 30 20 	sts	0x2030, r18
     d0e:	30 93 31 20 	sts	0x2031, r19
}
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <main>:
	void error(char *);

	void printDutyCycles();
	void debugFilterTest();

int main(void) {
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	de bf       	out	0x3e, r29	; 62

	//initialize the MCU clock
	initializeMCU();
     d2a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initializeMCU>
				y1_hist[i]=y1;
				y2_hist[i]=y2;
				results[i]=y2;
			}

			__builtin_avr_delay_cycles(4);
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <main+0x14>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <main+0x16>
		display_printString("Light Organ");
		
	#endif
	
	//initialize peripherals
	initializeUITimer();
     d32:	0e 94 36 03 	call	0x66c	; 0x66c <initializeUITimer>
	initializePhaseTimer();
     d36:	0e 94 12 03 	call	0x624	; 0x624 <initializePhaseTimer>
	initializePhaseComparator();
     d3a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <initializePhaseComparator>

	#ifndef FLASHER_ENABLE
		initializeSampleTimer();
     d3e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <initializeSampleTimer>
		initializeCaptureTimer();
     d42:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <initializeCaptureTimer>
		initializeADC();
     d46:	0e 94 03 02 	call	0x406	; 0x406 <initializeADC>
		initializeDAC();
     d4a:	0e 94 cb 01 	call	0x396	; 0x396 <initializeDAC>
	#endif

	enableInterrupts();
     d4e:	0e 94 4c 03 	call	0x698	; 0x698 <enableInterrupts>
	
//	while (true) {
		//find the nominal phase period
		findPhasePeriod();	
     d52:	0e 94 29 06 	call	0xc52	; 0xc52 <findPhasePeriod>
		int step=2;
		int stepdir=1;
		int stepstep=1;
	#endif

	volatile uint32_t msValueUpdate=0;
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	1a 82       	std	Y+2, r1	; 0x02
     d5a:	1b 82       	std	Y+3, r1	; 0x03
     d5c:	1c 82       	std	Y+4, r1	; 0x04
//	uint16_t energy=0;
	volatile uint32_t msStrobe=0;
     d5e:	1d 82       	std	Y+5, r1	; 0x05
     d60:	1e 82       	std	Y+6, r1	; 0x06
     d62:	1f 82       	std	Y+7, r1	; 0x07
     d64:	18 86       	std	Y+8, r1	; 0x08
     d66:	20 91 29 20 	lds	r18, 0x2029
     d6a:	30 91 2a 20 	lds	r19, 0x202A

	//enter the main event loop
	while (true) {
		//keep track of the minimum phase period
		if (fPhaseEnd) {
     d6e:	80 91 35 20 	lds	r24, 0x2035
     d72:	88 23       	and	r24, r24
     d74:	e1 f3       	breq	.-8      	; 0xd6e <main+0x52>

			//PHASE_port.OUTCLR = PIN0_bm;
			fPhaseEnd=false;
     d76:	10 92 35 20 	sts	0x2035, r1
			phasePeriodMin=(phasePeriodLast<phasePeriodMin) ? phasePeriodLast : phasePeriodMin;
     d7a:	80 91 32 20 	lds	r24, 0x2032
     d7e:	90 91 33 20 	lds	r25, 0x2033
     d82:	82 17       	cp	r24, r18
     d84:	93 07       	cpc	r25, r19
     d86:	98 f7       	brcc	.-26     	; 0xd6e <main+0x52>
     d88:	20 91 32 20 	lds	r18, 0x2032
     d8c:	30 91 33 20 	lds	r19, 0x2033
     d90:	ee cf       	rjmp	.-36     	; 0xd6e <main+0x52>

00000d92 <__vector_20>:
//uint32_t midband_energy_historySum=0;
//uint32_t highband_energy_historySum=0;

//this interrupt is called after every BINSIZE samples are filtered and summed into their three channels
//here we decide how to respond to the audio signal
ISR(CAPTURE_vect) {
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	08 b6       	in	r0, 0x38	; 56
     d9c:	0f 92       	push	r0
     d9e:	09 b6       	in	r0, 0x39	; 57
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	18 be       	out	0x38, r1	; 56
     da6:	19 be       	out	0x39, r1	; 57
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	6c 97       	sbiw	r28, 0x1c	; 28
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	de bf       	out	0x3e, r29	; 62

	//###
	debug1=maxLevel;
     dee:	80 91 3a 20 	lds	r24, 0x203A
     df2:	90 91 3b 20 	lds	r25, 0x203B
     df6:	80 93 a8 20 	sts	0x20A8, r24
     dfa:	90 93 a9 20 	sts	0x20A9, r25
	maxLevel=0;
     dfe:	10 92 3a 20 	sts	0x203A, r1
     e02:	10 92 3b 20 	sts	0x203B, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     e06:	80 91 86 20 	lds	r24, 0x2086
     e0a:	90 91 87 20 	lds	r25, 0x2087
     e0e:	a0 91 88 20 	lds	r26, 0x2088
     e12:	b0 91 89 20 	lds	r27, 0x2089
     e16:	89 2f       	mov	r24, r25
     e18:	9a 2f       	mov	r25, r26
     e1a:	ab 2f       	mov	r26, r27
     e1c:	bb 27       	eor	r27, r27
     e1e:	88 8f       	std	Y+24, r24	; 0x18
     e20:	99 8f       	std	Y+25, r25	; 0x19
     e22:	8c 83       	std	Y+4, r24	; 0x04
     e24:	9d 83       	std	Y+5, r25	; 0x05

		//reset the sums
		energy_sum[i]=0;
     e26:	10 92 86 20 	sts	0x2086, r1
     e2a:	10 92 87 20 	sts	0x2087, r1
     e2e:	10 92 88 20 	sts	0x2088, r1
     e32:	10 92 89 20 	sts	0x2089, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     e36:	80 91 8a 20 	lds	r24, 0x208A
     e3a:	90 91 8b 20 	lds	r25, 0x208B
     e3e:	a0 91 8c 20 	lds	r26, 0x208C
     e42:	b0 91 8d 20 	lds	r27, 0x208D
     e46:	89 2f       	mov	r24, r25
     e48:	9a 2f       	mov	r25, r26
     e4a:	ab 2f       	mov	r26, r27
     e4c:	bb 27       	eor	r27, r27
     e4e:	8e 8b       	std	Y+22, r24	; 0x16
     e50:	9f 8b       	std	Y+23, r25	; 0x17
     e52:	8e 83       	std	Y+6, r24	; 0x06
     e54:	9f 83       	std	Y+7, r25	; 0x07

		//reset the sums
		energy_sum[i]=0;
     e56:	10 92 8a 20 	sts	0x208A, r1
     e5a:	10 92 8b 20 	sts	0x208B, r1
     e5e:	10 92 8c 20 	sts	0x208C, r1
     e62:	10 92 8d 20 	sts	0x208D, r1
	uint16_t energy_inst[INPUT_CHANNELS];
	
	for (int i=0;i<INPUT_CHANNELS;i++) {
		//grab the sums lickety-quick so they don't change while we are processing
		//and divide them by BINSIZE to find their average
		energy_inst[i]=energy_sum[i] >> CAPTURE_binbits;
     e66:	80 91 8e 20 	lds	r24, 0x208E
     e6a:	90 91 8f 20 	lds	r25, 0x208F
     e6e:	a0 91 90 20 	lds	r26, 0x2090
     e72:	b0 91 91 20 	lds	r27, 0x2091
     e76:	89 2f       	mov	r24, r25
     e78:	9a 2f       	mov	r25, r26
     e7a:	ab 2f       	mov	r26, r27
     e7c:	bb 27       	eor	r27, r27
     e7e:	8b 8f       	std	Y+27, r24	; 0x1b
     e80:	9c 8f       	std	Y+28, r25	; 0x1c
     e82:	88 87       	std	Y+8, r24	; 0x08
     e84:	99 87       	std	Y+9, r25	; 0x09

		//reset the sums
		energy_sum[i]=0;
     e86:	10 92 8e 20 	sts	0x208E, r1
     e8a:	10 92 8f 20 	sts	0x208F, r1
     e8e:	10 92 90 20 	sts	0x2090, r1
     e92:	10 92 91 20 	sts	0x2091, r1
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
		//update the history array with the new values
		energy_history[i][historyIndex]=energy_inst[i];
     e96:	40 91 84 20 	lds	r20, 0x2084
     e9a:	4a 8f       	std	Y+26, r20	; 0x1a
     e9c:	74 e0       	ldi	r23, 0x04	; 4
     e9e:	a7 2e       	mov	r10, r23
     ea0:	b1 2c       	mov	r11, r1
     ea2:	ac 0e       	add	r10, r28
     ea4:	bd 1e       	adc	r11, r29
     ea6:	a4 2f       	mov	r26, r20
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	aa 0f       	add	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	a5 55       	subi	r26, 0x55	; 85
     eb0:	bf 4d       	sbci	r27, 0xDF	; 223
     eb2:	5a e0       	ldi	r21, 0x0A	; 10
     eb4:	c5 2e       	mov	r12, r21
     eb6:	d1 2c       	mov	r13, r1
     eb8:	cc 0e       	add	r12, r28
     eba:	dd 1e       	adc	r13, r29
     ebc:	8e 01       	movw	r16, r28
     ebe:	00 5f       	subi	r16, 0xF0	; 240
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	66 24       	eor	r6, r6
     ec4:	77 24       	eor	r7, r7
     ec6:	88 24       	eor	r8, r8
     ec8:	8a 94       	dec	r8
     eca:	98 2c       	mov	r9, r8
     ecc:	ee 24       	eor	r14, r14
     ece:	ff 24       	eor	r15, r15
		//now find maximum energy from the last HISTORY_size bin captures 
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
		energy_min[i]=65535;
     ed0:	44 24       	eor	r4, r4
     ed2:	4a 94       	dec	r4
     ed4:	54 2c       	mov	r5, r4
     ed6:	46 e5       	ldi	r20, 0x56	; 86
     ed8:	24 2e       	mov	r2, r20
     eda:	31 2c       	mov	r3, r1
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
		//update the history array with the new values
		energy_history[i][historyIndex]=energy_inst[i];
     edc:	f5 01       	movw	r30, r10
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	8d 93       	st	X+, r24
     ee4:	9c 93       	st	X, r25
     ee6:	11 97       	sbiw	r26, 0x01	; 1
		
		//now find maximum energy from the last HISTORY_size bin captures 
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
     ee8:	f6 01       	movw	r30, r12
     eea:	10 82       	st	Z, r1
     eec:	11 82       	std	Z+1, r1	; 0x01
		energy_min[i]=65535;
     eee:	f8 01       	movw	r30, r16
     ef0:	40 82       	st	Z, r4
     ef2:	51 82       	std	Z+1, r5	; 0x01
     ef4:	6f ef       	ldi	r22, 0xFF	; 255
     ef6:	7f ef       	ldi	r23, 0xFF	; 255
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	e2 9c       	mul	r14, r2
     efe:	f0 01       	movw	r30, r0
     f00:	e3 9c       	mul	r14, r3
     f02:	f0 0d       	add	r31, r0
     f04:	f2 9c       	mul	r15, r2
     f06:	f0 0d       	add	r31, r0
     f08:	11 24       	eor	r1, r1
     f0a:	e5 55       	subi	r30, 0x55	; 85
     f0c:	ff 4d       	sbci	r31, 0xDF	; 223
     f0e:	20 e0       	ldi	r18, 0x00	; 0
		for (uint8_t j=0;j<HISTORY_size;j++) {
			energy_max[i]=max(energy_history[i][j],energy_max[i]);
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	48 17       	cp	r20, r24
     f16:	59 07       	cpc	r21, r25
     f18:	08 f4       	brcc	.+2      	; 0xf1c <__vector_20+0x18a>
     f1a:	ac 01       	movw	r20, r24
			energy_min[i]=min(energy_history[i][j],energy_min[i]);
     f1c:	86 17       	cp	r24, r22
     f1e:	97 07       	cpc	r25, r23
     f20:	08 f4       	brcc	.+2      	; 0xf24 <__vector_20+0x192>
     f22:	bc 01       	movw	r22, r24
		//(this should be about a 1 second history)
		// the strength of the output channel will scale to this maximum

		energy_max[i]=0;
		energy_min[i]=65535;
		for (uint8_t j=0;j<HISTORY_size;j++) {
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	32 96       	adiw	r30, 0x02	; 2
     f28:	2b 32       	cpi	r18, 0x2B	; 43
     f2a:	91 f7       	brne	.-28     	; 0xf10 <__vector_20+0x17e>
     f2c:	f8 01       	movw	r30, r16
     f2e:	60 83       	st	Z, r22
     f30:	71 83       	std	Z+1, r23	; 0x01
     f32:	f6 01       	movw	r30, r12
     f34:	40 83       	st	Z, r20
     f36:	51 83       	std	Z+1, r21	; 0x01
			energy_max[i]=max(energy_history[i][j],energy_max[i]);
			energy_min[i]=min(energy_history[i][j],energy_min[i]);
		}

		//find the max and min for all channels
		energy_all_max=max(energy_all_max,energy_max[i]);
     f38:	64 16       	cp	r6, r20
     f3a:	75 06       	cpc	r7, r21
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__vector_20+0x1ae>
     f3e:	3a 01       	movw	r6, r20
		energy_all_min=min(energy_all_min,energy_min[i]);
     f40:	68 15       	cp	r22, r8
     f42:	79 05       	cpc	r23, r9
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__vector_20+0x1b6>
     f46:	4b 01       	movw	r8, r22
	uint16_t energy_min[INPUT_CHANNELS];
	
	uint16_t energy_all_max=0;
	uint16_t energy_all_min=65535;

	for (int i=0;i<INPUT_CHANNELS;i++) {
     f48:	08 94       	sec
     f4a:	e1 1c       	adc	r14, r1
     f4c:	f1 1c       	adc	r15, r1
     f4e:	42 e0       	ldi	r20, 0x02	; 2
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	a4 0e       	add	r10, r20
     f54:	b5 1e       	adc	r11, r21
     f56:	aa 5a       	subi	r26, 0xAA	; 170
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	c4 0e       	add	r12, r20
     f5c:	d5 1e       	adc	r13, r21
     f5e:	0e 5f       	subi	r16, 0xFE	; 254
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	53 e0       	ldi	r21, 0x03	; 3
     f64:	e5 16       	cp	r14, r21
     f66:	f1 04       	cpc	r15, r1
     f68:	09 f0       	breq	.+2      	; 0xf6c <__vector_20+0x1da>
     f6a:	b8 cf       	rjmp	.-144    	; 0xedc <__vector_20+0x14a>

	// * 3. Fudge the max energy
		//this value is basically voodoo
		//it serves to ignore small variations in the energy though, basically requires a certain minimum intensity of sound to register a response
	for (int i=0;i<INPUT_CHANNELS;i++) {
		energy_max[i]=max(energy_max[i], 64);
     f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f70:	80 34       	cpi	r24, 0x40	; 64
     f72:	91 05       	cpc	r25, r1
     f74:	10 f4       	brcc	.+4      	; 0xf7a <__vector_20+0x1e8>
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	8a 87       	std	Y+10, r24	; 0x0a
     f7c:	9b 87       	std	Y+11, r25	; 0x0b
     f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f80:	9d 85       	ldd	r25, Y+13	; 0x0d
     f82:	80 34       	cpi	r24, 0x40	; 64
     f84:	91 05       	cpc	r25, r1
     f86:	10 f4       	brcc	.+4      	; 0xf8c <__vector_20+0x1fa>
     f88:	80 e4       	ldi	r24, 0x40	; 64
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	8c 87       	std	Y+12, r24	; 0x0c
     f8e:	9d 87       	std	Y+13, r25	; 0x0d
     f90:	0e 85       	ldd	r16, Y+14	; 0x0e
     f92:	1f 85       	ldd	r17, Y+15	; 0x0f
     f94:	00 34       	cpi	r16, 0x40	; 64
     f96:	11 05       	cpc	r17, r1
     f98:	10 f4       	brcc	.+4      	; 0xf9e <__vector_20+0x20c>
     f9a:	00 e4       	ldi	r16, 0x40	; 64
     f9c:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t duty[INPUT_CHANNELS];
	for (int i=0;i<INPUT_CHANNELS;i++) {

/* this version uses just the max energy on the channel in question */
		if (energy_max[i]-energy_min[i]>1) {
     f9e:	28 89       	ldd	r18, Y+16	; 0x10
     fa0:	39 89       	ldd	r19, Y+17	; 0x11
     fa2:	ea 85       	ldd	r30, Y+10	; 0x0a
     fa4:	fb 85       	ldd	r31, Y+11	; 0x0b
     fa6:	e2 1b       	sub	r30, r18
     fa8:	f3 0b       	sbc	r31, r19
     faa:	e2 30       	cpi	r30, 0x02	; 2
     fac:	f1 05       	cpc	r31, r1
     fae:	10 f1       	brcs	.+68     	; 0xff4 <__vector_20+0x262>
			//scale the output to the maximum recent energy accross all channels 
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_min[i]) *256) / (energy_max[i] - energy_min[i]);
     fb0:	48 8d       	ldd	r20, Y+24	; 0x18
     fb2:	59 8d       	ldd	r21, Y+25	; 0x19
     fb4:	ba 01       	movw	r22, r20
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	62 1b       	sub	r22, r18
     fc0:	73 0b       	sbc	r23, r19
     fc2:	84 0b       	sbc	r24, r20
     fc4:	95 0b       	sbc	r25, r21
     fc6:	98 2f       	mov	r25, r24
     fc8:	87 2f       	mov	r24, r23
     fca:	76 2f       	mov	r23, r22
     fcc:	66 27       	eor	r22, r22
     fce:	9f 01       	movw	r18, r30
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>

			if (i==0) debug1=scale;
     fd8:	c9 01       	movw	r24, r18
     fda:	20 93 a8 20 	sts	0x20A8, r18
     fde:	30 93 a9 20 	sts	0x20A9, r19

			duty[i] = min(scale,255);
     fe2:	da 01       	movw	r26, r20
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	91 05       	cpc	r25, r1
     fe8:	a1 05       	cpc	r26, r1
     fea:	b1 05       	cpc	r27, r1
     fec:	11 f0       	breq	.+4      	; 0xff2 <__vector_20+0x260>
     fee:	08 f0       	brcs	.+2      	; 0xff2 <__vector_20+0x260>
     ff0:	f1 c0       	rjmp	.+482    	; 0x11d4 <__vector_20+0x442>
     ff2:	89 83       	std	Y+1, r24	; 0x01

	uint8_t duty[INPUT_CHANNELS];
	for (int i=0;i<INPUT_CHANNELS;i++) {

/* this version uses just the max energy on the channel in question */
		if (energy_max[i]-energy_min[i]>1) {
     ff4:	2a 89       	ldd	r18, Y+18	; 0x12
     ff6:	3b 89       	ldd	r19, Y+19	; 0x13
     ff8:	ec 85       	ldd	r30, Y+12	; 0x0c
     ffa:	fd 85       	ldd	r31, Y+13	; 0x0d
     ffc:	e2 1b       	sub	r30, r18
     ffe:	f3 0b       	sbc	r31, r19
    1000:	e2 30       	cpi	r30, 0x02	; 2
    1002:	f1 05       	cpc	r31, r1
    1004:	f0 f0       	brcs	.+60     	; 0x1042 <__vector_20+0x2b0>
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_min[i]) *256) / (energy_max[i] - energy_min[i]);

			if (i==0) debug1=scale;

			duty[i] = min(scale,255);
    1006:	4e 89       	ldd	r20, Y+22	; 0x16
    1008:	5f 89       	ldd	r21, Y+23	; 0x17
    100a:	ba 01       	movw	r22, r20
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	62 1b       	sub	r22, r18
    1016:	73 0b       	sbc	r23, r19
    1018:	84 0b       	sbc	r24, r20
    101a:	95 0b       	sbc	r25, r21
    101c:	98 2f       	mov	r25, r24
    101e:	87 2f       	mov	r24, r23
    1020:	76 2f       	mov	r23, r22
    1022:	66 27       	eor	r22, r22
    1024:	9f 01       	movw	r18, r30
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    102e:	c9 01       	movw	r24, r18
    1030:	da 01       	movw	r26, r20
    1032:	8f 3f       	cpi	r24, 0xFF	; 255
    1034:	91 05       	cpc	r25, r1
    1036:	a1 05       	cpc	r26, r1
    1038:	b1 05       	cpc	r27, r1
    103a:	11 f0       	breq	.+4      	; 0x1040 <__vector_20+0x2ae>
    103c:	08 f0       	brcs	.+2      	; 0x1040 <__vector_20+0x2ae>
    103e:	c5 c0       	rjmp	.+394    	; 0x11ca <__vector_20+0x438>
    1040:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t duty[INPUT_CHANNELS];
	for (int i=0;i<INPUT_CHANNELS;i++) {

/* this version uses just the max energy on the channel in question */
		if (energy_max[i]-energy_min[i]>1) {
    1042:	2c 89       	ldd	r18, Y+20	; 0x14
    1044:	3d 89       	ldd	r19, Y+21	; 0x15
    1046:	f8 01       	movw	r30, r16
    1048:	e2 1b       	sub	r30, r18
    104a:	f3 0b       	sbc	r31, r19
    104c:	e2 30       	cpi	r30, 0x02	; 2
    104e:	f1 05       	cpc	r31, r1
    1050:	f0 f0       	brcs	.+60     	; 0x108e <__vector_20+0x2fc>
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_min[i]) *256) / (energy_max[i] - energy_min[i]);

			if (i==0) debug1=scale;

			duty[i] = min(scale,255);
    1052:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1054:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1056:	ba 01       	movw	r22, r20
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	62 1b       	sub	r22, r18
    1062:	73 0b       	sbc	r23, r19
    1064:	84 0b       	sbc	r24, r20
    1066:	95 0b       	sbc	r25, r21
    1068:	98 2f       	mov	r25, r24
    106a:	87 2f       	mov	r24, r23
    106c:	76 2f       	mov	r23, r22
    106e:	66 27       	eor	r22, r22
    1070:	9f 01       	movw	r18, r30
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    107a:	c9 01       	movw	r24, r18
    107c:	da 01       	movw	r26, r20
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	91 05       	cpc	r25, r1
    1082:	a1 05       	cpc	r26, r1
    1084:	b1 05       	cpc	r27, r1
    1086:	11 f0       	breq	.+4      	; 0x108c <__vector_20+0x2fa>
    1088:	08 f0       	brcs	.+2      	; 0x108c <__vector_20+0x2fa>
    108a:	9a c0       	rjmp	.+308    	; 0x11c0 <__vector_20+0x42e>
    108c:	8b 83       	std	Y+3, r24	; 0x03

		//should we have a minimum duty value and scale relative to that?
	}	
	
	// * 4. Increment the history index *
	historyIndex++;
    108e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	80 93 84 20 	sts	0x2084, r24
	if (historyIndex >= HISTORY_size)
    1096:	8b 32       	cpi	r24, 0x2B	; 43
    1098:	10 f0       	brcs	.+4      	; 0x109e <__vector_20+0x30c>
		historyIndex = 0;
    109a:	10 92 84 20 	sts	0x2084, r1

	
	debug2 = energy_inst[0];
    109e:	88 8d       	ldd	r24, Y+24	; 0x18
    10a0:	99 8d       	ldd	r25, Y+25	; 0x19
    10a2:	80 93 a3 20 	sts	0x20A3, r24
    10a6:	90 93 a4 20 	sts	0x20A4, r25
	debug3 = energy_all_min;
    10aa:	80 92 ad 21 	sts	0x21AD, r8
    10ae:	90 92 ae 21 	sts	0x21AE, r9
		//this value is basically voodoo
		//it serves to ignore small variations in the energy though, basically requires a certain minimum intensity of sound to register a response
	for (int i=0;i<INPUT_CHANNELS;i++) {
		energy_max[i]=max(energy_max[i], 64);
	}
	energy_all_max=max(energy_all_max, 64); //was 16
    10b2:	c3 01       	movw	r24, r6
    10b4:	80 34       	cpi	r24, 0x40	; 64
    10b6:	91 05       	cpc	r25, r1
    10b8:	10 f4       	brcc	.+4      	; 0x10be <__vector_20+0x32c>
    10ba:	80 e4       	ldi	r24, 0x40	; 64
    10bc:	90 e0       	ldi	r25, 0x00	; 0
		historyIndex = 0;

	
	debug2 = energy_inst[0];
	debug3 = energy_all_min;
	debug4 = energy_all_max;
    10be:	80 93 a5 20 	sts	0x20A5, r24
    10c2:	90 93 a6 20 	sts	0x20A6, r25
	#endif


	#ifndef FLASHER_ENABLE
		//scale the duty cycle down to the range 0..255
		setDutyCycles(duty[0], duty[1], duty[2]);
    10c6:	29 81       	ldd	r18, Y+1	; 0x01
    10c8:	ea 80       	ldd	r14, Y+2	; 0x02
    10ca:	ab 80       	ldd	r10, Y+3	; 0x03
//set the duty cycle for each output channel
//duty cycle is expressed as a byte value
//0 is fully off, 255 is fully on
void setDutyCycles(uint8_t _dutyA, uint8_t _dutyB, uint8_t _dutyC) {
	//save the duty settings as global variables (for debugging)
	dutyA=_dutyA; dutyB=_dutyB; dutyC=_dutyC;
    10cc:	20 93 85 20 	sts	0x2085, r18
    10d0:	e0 92 a7 20 	sts	0x20A7, r14
    10d4:	a0 92 aa 20 	sts	0x20AA, r10

	//calculate the number of ticks given the duty cycle
	uint32_t prodA = (uint32_t) _dutyA * phasePeriod;
    10d8:	40 90 30 20 	lds	r4, 0x2030
    10dc:	50 90 31 20 	lds	r5, 0x2031
    10e0:	32 01       	movw	r6, r4
    10e2:	88 24       	eor	r8, r8
    10e4:	99 24       	eor	r9, r9
	uint16_t ticksA= phasePeriod - (prodA/255);
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	c4 01       	movw	r24, r8
    10ee:	b3 01       	movw	r22, r6
    10f0:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    1100:	c2 01       	movw	r24, r4
    1102:	82 1b       	sub	r24, r18
    1104:	93 0b       	sbc	r25, r19

	//set the timer comparator value
	//the comparator output pins for the phase timer will be the duty cycle output
	TC_SetCompareA(&PHASE_timer, ticksA);
    1106:	21 2c       	mov	r2, r1
    1108:	1a e0       	ldi	r17, 0x0A	; 10
    110a:	31 2e       	mov	r3, r17
    110c:	f1 01       	movw	r30, r2
    110e:	80 af       	std	Z+56, r24	; 0x38
    1110:	91 af       	std	Z+57, r25	; 0x39

	uint32_t prodB = (uint32_t)_dutyB * phasePeriod;
	uint16_t ticksB=phasePeriod - (prodB/255);
    1112:	ff 24       	eor	r15, r15
    1114:	00 e0       	ldi	r16, 0x00	; 0
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	c8 01       	movw	r24, r16
    111a:	b7 01       	movw	r22, r14
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    1130:	c2 01       	movw	r24, r4
    1132:	82 1b       	sub	r24, r18
    1134:	93 0b       	sbc	r25, r19
	//note: comparator B didn't work, for some reason, so we use comparator D for output channel B instead
	TC_SetCompareD(&PHASE_timer, ticksB);
    1136:	80 93 3e 0a 	sts	0x0A3E, r24
    113a:	90 93 3f 0a 	sts	0x0A3F, r25

	uint32_t prodC = (uint32_t)_dutyC * phasePeriod;
	uint16_t ticksC=phasePeriod - (prodC/255);
    113e:	bb 24       	eor	r11, r11
    1140:	cc 24       	eor	r12, r12
    1142:	dd 24       	eor	r13, r13
    1144:	c6 01       	movw	r24, r12
    1146:	b5 01       	movw	r22, r10
    1148:	a4 01       	movw	r20, r8
    114a:	93 01       	movw	r18, r6
    114c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsi3>
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    115c:	42 1a       	sub	r4, r18
    115e:	53 0a       	sbc	r5, r19
	TC_SetCompareC(&PHASE_timer, ticksC);
    1160:	f1 01       	movw	r30, r2
    1162:	44 ae       	std	Z+60, r4	; 0x3c
    1164:	55 ae       	std	Z+61, r5	; 0x3d
		//scale the duty cycle down to the range 0..255
		setDutyCycles(duty[0], duty[1], duty[2]);
	#endif


	fCaptureBinFilled=true;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	80 93 37 20 	sts	0x2037, r24
}
    116c:	6c 96       	adiw	r28, 0x1c	; 28
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	7f 90       	pop	r7
    11a4:	6f 90       	pop	r6
    11a6:	5f 90       	pop	r5
    11a8:	4f 90       	pop	r4
    11aa:	3f 90       	pop	r3
    11ac:	2f 90       	pop	r2
    11ae:	0f 90       	pop	r0
    11b0:	09 be       	out	0x39, r0	; 57
    11b2:	0f 90       	pop	r0
    11b4:	08 be       	out	0x38, r0	; 56
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti
				// (this removes all long-term dynamics)
			uint32_t scale = (((uint32_t)energy_inst[i] - energy_min[i]) *256) / (energy_max[i] - energy_min[i]);

			if (i==0) debug1=scale;

			duty[i] = min(scale,255);
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	61 cf       	rjmp	.-318    	; 0x108c <__vector_20+0x2fa>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	36 cf       	rjmp	.-404    	; 0x1040 <__vector_20+0x2ae>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e0       	ldi	r26, 0x00	; 0
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	0a cf       	rjmp	.-492    	; 0xff2 <__vector_20+0x260>

000011de <display_printStringLen>:
		i++;
	}
}

//writes each letter of the given string to the display, in order, starting at the cursor address
void display_printStringLen(char * str, int len) {
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	7c 01       	movw	r14, r24
    11ec:	8b 01       	movw	r16, r22
	for (int i=0;i<len;i++)
    11ee:	16 16       	cp	r1, r22
    11f0:	17 06       	cpc	r1, r23
    11f2:	64 f4       	brge	.+24     	; 0x120c <display_printStringLen+0x2e>
    11f4:	c0 e0       	ldi	r28, 0x00	; 0
    11f6:	d0 e0       	ldi	r29, 0x00	; 0
		display_sendData(str[i]);
    11f8:	f7 01       	movw	r30, r14
    11fa:	ec 0f       	add	r30, r28
    11fc:	fd 1f       	adc	r31, r29
    11fe:	80 81       	ld	r24, Z
    1200:	0e 94 a1 09 	call	0x1342	; 0x1342 <display_sendData>
	}
}

//writes each letter of the given string to the display, in order, starting at the cursor address
void display_printStringLen(char * str, int len) {
	for (int i=0;i<len;i++)
    1204:	21 96       	adiw	r28, 0x01	; 1
    1206:	c0 17       	cp	r28, r16
    1208:	d1 07       	cpc	r29, r17
    120a:	b4 f3       	brlt	.-20     	; 0x11f8 <display_printStringLen+0x1a>
		display_sendData(str[i]);
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <display_printString>:
void display_printChar(char chr) {
	display_sendData(chr);
}

//writes each letter of the given null-terminated string
void display_printString(char * str) {
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	fc 01       	movw	r30, r24
	int i=0;
	while (str[i]!='\0') {
    1220:	80 81       	ld	r24, Z
    1222:	88 23       	and	r24, r24
    1224:	39 f0       	breq	.+14     	; 0x1234 <display_printString+0x1a>
    1226:	ef 01       	movw	r28, r30
		display_sendData(str[i]);
    1228:	0e 94 a1 09 	call	0x1342	; 0x1342 <display_sendData>
}

//writes each letter of the given null-terminated string
void display_printString(char * str) {
	int i=0;
	while (str[i]!='\0') {
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	21 96       	adiw	r28, 0x01	; 1
    1230:	88 23       	and	r24, r24
    1232:	d1 f7       	brne	.-12     	; 0x1228 <display_printString+0xe>
		display_sendData(str[i]);
		i++;
	}
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <display_printChar>:
	display_sendCommand(0x80+addr);
}

//writes the given character to the display at the cursor address
void display_printChar(char chr) {
	display_sendData(chr);
    123a:	0e 94 a1 09 	call	0x1342	; 0x1342 <display_sendData>
}
    123e:	08 95       	ret

00001240 <display_moveCursor>:
//sets whether the cursor is visible
//void display_setCursor(bool visible);

//sets the cursor address
void display_moveCursor(int addr) {
	display_sendCommand(0x80+addr);
    1240:	80 58       	subi	r24, 0x80	; 128
    1242:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
}
    1246:	08 95       	ret

00001248 <display_returnHome>:
}


//return the cursor to home (the upper left of the display)
void display_returnHome() {
	display_sendCommand(DISPLAY_RETURN_HOME);
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
}
    124e:	08 95       	ret

00001250 <display_clear>:
}


//clears the display
void display_clear() {
	display_sendCommand(DISPLAY_CLEAR);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
}
    1256:	08 95       	ret

00001258 <display_init>:
#define DISPLAY_OFF 0x08


//initialize the display with the given number of columns and rows
void display_init(int cols, int rows) {
	display_initDevice();
    1258:	0e 94 63 09 	call	0x12c6	; 0x12c6 <display_initDevice>

	display_sendCommand(DISPLAY_WAKE); //wake up
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
    1262:	80 e8       	ldi	r24, 0x80	; 128
    1264:	9e e3       	ldi	r25, 0x3E	; 62
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <display_init+0xe>

	_delay_ms(2);

	display_sendCommand(DISPLAY_WAKE); //wake up
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
	display_sendCommand(DISPLAY_WAKE); //wake up
    1270:	80 e3       	ldi	r24, 0x30	; 48
    1272:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>

	display_sendCommand(0x39); //function set (use extended instruction set)
    1276:	89 e3       	ldi	r24, 0x39	; 57
    1278:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>

	display_sendCommand(0x14); //internal osc frequency
    127c:	84 e1       	ldi	r24, 0x14	; 20
    127e:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
	display_sendCommand(0x56); //power control
    1282:	86 e5       	ldi	r24, 0x56	; 86
    1284:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
	display_sendCommand(0x6D); //follower control
    1288:	8d e6       	ldi	r24, 0x6D	; 109
    128a:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
	display_sendCommand(0x78); //contrast
    128e:	88 e7       	ldi	r24, 0x78	; 120
    1290:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>

	display_sendCommand(DISPLAY_ON_NOCURSOR);
    1294:	8c e0       	ldi	r24, 0x0C	; 12
    1296:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>

	display_sendCommand(DISPLAY_CURSOR_MODE_RIGHT);
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
	display_sendCommand(DISPLAY_CURSOR_MODE_RIGHT);
    12a0:	86 e0       	ldi	r24, 0x06	; 6
    12a2:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>

	display_sendCommand(DISPLAY_CLEAR);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 b7 09 	call	0x136e	; 0x136e <display_sendCommand>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e2       	ldi	r20, 0x20	; 32
    12b2:	53 e0       	ldi	r21, 0x03	; 3
    12b4:	ca 01       	movw	r24, r20
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <display_init+0x5e>
    12ba:	2f 5f       	subi	r18, 0xFF	; 255
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	24 36       	cpi	r18, 0x64	; 100
    12c0:	31 05       	cpc	r19, r1
    12c2:	c1 f7       	brne	.-16     	; 0x12b4 <display_init+0x5c>

	_delay_ms(10);
}
    12c4:	08 95       	ret

000012c6 <display_initDevice>:
	SPI_MasterTransceiveByte(&display_spiMaster, data);
	CSSET;
}

//initialize the device, including i/o pins on the microcontroller, etc.
void display_initDevice() {
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	cf 92       	push	r12
    12ce:	ef 92       	push	r14
    12d0:	0f 93       	push	r16
	// Init !CS and RS pins as output with wired AND and pull-up. */
	DISPLAY_SPIPORT.DIRSET = DISPLAY_CSPIN_bm | DISPLAY_RSPIN_bm | DISPLAY_RESETPIN_bm;
    12d2:	40 e4       	ldi	r20, 0x40	; 64
    12d4:	84 2e       	mov	r8, r20
    12d6:	46 e0       	ldi	r20, 0x06	; 6
    12d8:	94 2e       	mov	r9, r20
    12da:	83 e1       	ldi	r24, 0x13	; 19
    12dc:	f4 01       	movw	r30, r8
    12de:	81 83       	std	Z+1, r24	; 0x01
	DISPLAY_SPIPORT.DISPLAY_CSPINCTRL = PORT_OPC_WIREDANDPULL_gc;
    12e0:	88 e3       	ldi	r24, 0x38	; 56
    12e2:	84 8b       	std	Z+20, r24	; 0x14
	DISPLAY_SPIPORT.DISPLAY_RSPINCTRL = PORT_OPC_WIREDANDPULL_gc;
    12e4:	80 8b       	std	Z+16, r24	; 0x10


	//Set !CS output to high. (No slave addressed).
	CSSET; RSCLEAR;
    12e6:	80 e1       	ldi	r24, 0x10	; 16
    12e8:	85 83       	std	Z+5, r24	; 0x05
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	86 83       	std	Z+6, r24	; 0x06
	
	// Initialize SPI master. 
	// The prescaler is setup assuming a 32 MHz clock.
	SPI_MasterInit(&display_spiMaster,
    12ee:	8f ea       	ldi	r24, 0xAF	; 175
    12f0:	91 e2       	ldi	r25, 0x21	; 33
    12f2:	60 ec       	ldi	r22, 0xC0	; 192
    12f4:	78 e0       	ldi	r23, 0x08	; 8
    12f6:	40 e4       	ldi	r20, 0x40	; 64
    12f8:	56 e0       	ldi	r21, 0x06	; 6
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	00 e0       	ldi	r16, 0x00	; 0
    12fe:	ee 24       	eor	r14, r14
    1300:	cc 24       	eor	r12, r12
    1302:	32 e0       	ldi	r19, 0x02	; 2
    1304:	a3 2e       	mov	r10, r19
    1306:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <SPI_MasterInit>
	               false,
	               SPI_PRESCALER_DIV64_gc); 


	//strobe the reset line
	DISPLAY_SPIPORT.OUTCLR = DISPLAY_RESETPIN_bm;
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	f4 01       	movw	r30, r8
    130e:	86 83       	std	Z+6, r24	; 0x06
    1310:	e0 e8       	ldi	r30, 0x80	; 128
    1312:	fe e3       	ldi	r31, 0x3E	; 62
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <display_initDevice+0x4e>
	_delay_ms(2);
	DISPLAY_SPIPORT.OUTSET = DISPLAY_RESETPIN_bm;
    1318:	f4 01       	movw	r30, r8
    131a:	85 83       	std	Z+5, r24	; 0x05
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	53 e0       	ldi	r21, 0x03	; 3
    1324:	ca 01       	movw	r24, r20
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <display_initDevice+0x60>
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	28 3c       	cpi	r18, 0xC8	; 200
    1330:	31 05       	cpc	r19, r1
    1332:	c1 f7       	brne	.-16     	; 0x1324 <display_initDevice+0x5e>
	_delay_ms(20);
}
    1334:	0f 91       	pop	r16
    1336:	ef 90       	pop	r14
    1338:	cf 90       	pop	r12
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	08 95       	ret

00001342 <display_sendData>:
	CSSET;
}


//send data to the display
void display_sendData(uint8_t data) {
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	68 2f       	mov	r22, r24
	CSCLEAR; RSSET;
    134a:	00 e4       	ldi	r16, 0x40	; 64
    134c:	16 e0       	ldi	r17, 0x06	; 6
    134e:	50 e1       	ldi	r21, 0x10	; 16
    1350:	f5 2e       	mov	r15, r21
    1352:	f8 01       	movw	r30, r16
    1354:	f6 82       	std	Z+6, r15	; 0x06
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	85 83       	std	Z+5, r24	; 0x05
	SPI_MasterTransceiveByte(&display_spiMaster, data);
    135a:	8f ea       	ldi	r24, 0xAF	; 175
    135c:	91 e2       	ldi	r25, 0x21	; 33
    135e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SPI_MasterTransceiveByte>
	CSSET;
    1362:	f8 01       	movw	r30, r16
    1364:	f5 82       	std	Z+5, r15	; 0x05
}
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	08 95       	ret

0000136e <display_sendCommand>:

//the SPI module handle
SPI_Master_t display_spiMaster;

//send a command to the display using SPI
void display_sendCommand(uint8_t cmd) {
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	68 2f       	mov	r22, r24
	CSCLEAR; RSCLEAR;
    1376:	00 e4       	ldi	r16, 0x40	; 64
    1378:	16 e0       	ldi	r17, 0x06	; 6
    137a:	70 e1       	ldi	r23, 0x10	; 16
    137c:	f7 2e       	mov	r15, r23
    137e:	f8 01       	movw	r30, r16
    1380:	f6 82       	std	Z+6, r15	; 0x06
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	86 83       	std	Z+6, r24	; 0x06
	SPI_MasterTransceiveByte(&display_spiMaster, cmd);
    1386:	8f ea       	ldi	r24, 0xAF	; 175
    1388:	91 e2       	ldi	r25, 0x21	; 33
    138a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <SPI_MasterTransceiveByte>
	CSSET;
    138e:	f8 01       	movw	r30, r16
    1390:	f5 82       	std	Z+5, r15	; 0x05
}
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	08 95       	ret

0000139a <TC0_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    139a:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
    139c:	80 81       	ld	r24, Z
    139e:	80 7f       	andi	r24, 0xF0	; 240
    13a0:	86 2b       	or	r24, r22
    13a2:	80 83       	st	Z, r24
}
    13a4:	08 95       	ret

000013a6 <TC1_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC1_ConfigClockSource( volatile TC1_t * tc, TC_CLKSEL_t clockSelection )
{
    13a6:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | clockSelection;
    13a8:	80 81       	ld	r24, Z
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	86 2b       	or	r24, r22
    13ae:	80 83       	st	Z, r24
}
    13b0:	08 95       	ret

000013b2 <TC0_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    13b2:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
    13b4:	81 81       	ldd	r24, Z+1	; 0x01
    13b6:	88 7f       	andi	r24, 0xF8	; 248
    13b8:	86 2b       	or	r24, r22
    13ba:	81 83       	std	Z+1, r24	; 0x01
}
    13bc:	08 95       	ret

000013be <TC1_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC1_ConfigWGM( volatile TC1_t * tc, TC_WGMODE_t wgm )
{
    13be:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC1_WGMODE_gm ) | wgm;
    13c0:	81 81       	ldd	r24, Z+1	; 0x01
    13c2:	88 7f       	andi	r24, 0xF8	; 248
    13c4:	86 2b       	or	r24, r22
    13c6:	81 83       	std	Z+1, r24	; 0x01
}
    13c8:	08 95       	ret

000013ca <TC0_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC0_ConfigInputCapture( volatile TC0_t * tc, TC_EVSEL_t eventSource )
{
    13ca:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC0_EVSEL_gm | TC0_EVACT_gm ) ) |
    13cc:	83 81       	ldd	r24, Z+3	; 0x03
    13ce:	80 71       	andi	r24, 0x10	; 16
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	86 2b       	or	r24, r22
    13d4:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    13d6:	08 95       	ret

000013d8 <TC1_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
    13d8:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
    13da:	83 81       	ldd	r24, Z+3	; 0x03
    13dc:	80 71       	andi	r24, 0x10	; 16
    13de:	80 62       	ori	r24, 0x20	; 32
    13e0:	86 2b       	or	r24, r22
    13e2:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    13e4:	08 95       	ret

000013e6 <TC0_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    13e6:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	60 7f       	andi	r22, 0xF0	; 240
    13ec:	86 2b       	or	r24, r22
    13ee:	81 83       	std	Z+1, r24	; 0x01
}
    13f0:	08 95       	ret

000013f2 <TC1_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
    13f2:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	60 73       	andi	r22, 0x30	; 48
    13f8:	86 2b       	or	r24, r22
    13fa:	81 83       	std	Z+1, r24	; 0x01
}
    13fc:	08 95       	ret

000013fe <TC0_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    13fe:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    1400:	81 81       	ldd	r24, Z+1	; 0x01
    1402:	60 7f       	andi	r22, 0xF0	; 240
    1404:	60 95       	com	r22
    1406:	86 23       	and	r24, r22
    1408:	81 83       	std	Z+1, r24	; 0x01
}
    140a:	08 95       	ret

0000140c <TC1_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
    140c:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    140e:	81 81       	ldd	r24, Z+1	; 0x01
    1410:	60 73       	andi	r22, 0x30	; 48
    1412:	60 95       	com	r22
    1414:	86 23       	and	r24, r22
    1416:	81 83       	std	Z+1, r24	; 0x01
}
    1418:	08 95       	ret

0000141a <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    141a:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    141c:	86 81       	ldd	r24, Z+6	; 0x06
    141e:	8c 7f       	andi	r24, 0xFC	; 252
    1420:	86 2b       	or	r24, r22
    1422:	86 83       	std	Z+6, r24	; 0x06
}
    1424:	08 95       	ret

00001426 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
    1426:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    1428:	86 81       	ldd	r24, Z+6	; 0x06
    142a:	8c 7f       	andi	r24, 0xFC	; 252
    142c:	86 2b       	or	r24, r22
    142e:	86 83       	std	Z+6, r24	; 0x06
}
    1430:	08 95       	ret

00001432 <TC0_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC0_SetErrorIntLevel( volatile TC0_t * tc, TC_ERRINTLVL_t intLevel )
{
    1432:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_ERRINTLVL_gm ) | intLevel;
    1434:	86 81       	ldd	r24, Z+6	; 0x06
    1436:	83 7f       	andi	r24, 0xF3	; 243
    1438:	86 2b       	or	r24, r22
    143a:	86 83       	std	Z+6, r24	; 0x06
}
    143c:	08 95       	ret

0000143e <TC1_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC1_SetErrorIntLevel( volatile TC1_t * tc, TC_ERRINTLVL_t intLevel )
{
    143e:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_ERRINTLVL_gm ) | intLevel;
    1440:	86 81       	ldd	r24, Z+6	; 0x06
    1442:	83 7f       	andi	r24, 0xF3	; 243
    1444:	86 2b       	or	r24, r22
    1446:	86 83       	std	Z+6, r24	; 0x06
}
    1448:	08 95       	ret

0000144a <TC0_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCAIntLevel( volatile TC0_t * tc, TC_CCAINTLVL_t intLevel )
{
    144a:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCAINTLVL_gm ) | intLevel;
    144c:	87 81       	ldd	r24, Z+7	; 0x07
    144e:	8c 7f       	andi	r24, 0xFC	; 252
    1450:	86 2b       	or	r24, r22
    1452:	87 83       	std	Z+7, r24	; 0x07
}
    1454:	08 95       	ret

00001456 <TC1_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC1_SetCCAIntLevel( volatile TC1_t * tc, TC_CCAINTLVL_t intLevel )
{
    1456:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCAINTLVL_gm ) | intLevel;
    1458:	87 81       	ldd	r24, Z+7	; 0x07
    145a:	8c 7f       	andi	r24, 0xFC	; 252
    145c:	86 2b       	or	r24, r22
    145e:	87 83       	std	Z+7, r24	; 0x07
}
    1460:	08 95       	ret

00001462 <TC0_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC0_SetCCBIntLevel( volatile TC0_t * tc, TC_CCBINTLVL_t intLevel )
{
    1462:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCBINTLVL_gm ) | intLevel;
    1464:	87 81       	ldd	r24, Z+7	; 0x07
    1466:	83 7f       	andi	r24, 0xF3	; 243
    1468:	86 2b       	or	r24, r22
    146a:	87 83       	std	Z+7, r24	; 0x07
}
    146c:	08 95       	ret

0000146e <TC1_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC1_SetCCBIntLevel( volatile TC1_t * tc, TC_CCBINTLVL_t intLevel )
{
    146e:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCBINTLVL_gm ) | intLevel;
    1470:	87 81       	ldd	r24, Z+7	; 0x07
    1472:	83 7f       	andi	r24, 0xF3	; 243
    1474:	86 2b       	or	r24, r22
    1476:	87 83       	std	Z+7, r24	; 0x07
}
    1478:	08 95       	ret

0000147a <TC0_SetCCCIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCCIntLevel( volatile TC0_t * tc, TC_CCCINTLVL_t intLevel )
{
    147a:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCCINTLVL_gm ) | intLevel;
    147c:	87 81       	ldd	r24, Z+7	; 0x07
    147e:	8f 7c       	andi	r24, 0xCF	; 207
    1480:	86 2b       	or	r24, r22
    1482:	87 83       	std	Z+7, r24	; 0x07
}
    1484:	08 95       	ret

00001486 <TC0_SetCCDIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCDIntLevel( volatile TC0_t * tc, TC_CCDINTLVL_t intLevel )
{
    1486:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCDINTLVL_gm ) | intLevel;
    1488:	87 81       	ldd	r24, Z+7	; 0x07
    148a:	8f 73       	andi	r24, 0x3F	; 63
    148c:	86 2b       	or	r24, r22
    148e:	87 83       	std	Z+7, r24	; 0x07
}
    1490:	08 95       	ret

00001492 <TC0_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 0 module instance.
 */
void TC0_Reset( volatile TC0_t * tc )
{
    1492:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1494:	80 81       	ld	r24, Z
    1496:	80 7f       	andi	r24, 0xF0	; 240
    1498:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    149a:	8c e0       	ldi	r24, 0x0C	; 12
    149c:	81 87       	std	Z+9, r24	; 0x09
}
    149e:	08 95       	ret

000014a0 <TC1_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 1 module instance.
 */
void TC1_Reset( volatile TC1_t * tc )
{
    14a0:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    14a2:	80 81       	ld	r24, Z
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    14a8:	8c e0       	ldi	r24, 0x0C	; 12
    14aa:	81 87       	std	Z+9, r24	; 0x09
}
    14ac:	08 95       	ret

000014ae <AC_Enable>:
 *  \param  ac         Pointer to Analog Comparator module.
 *  \param  comp       Which submodule, 0 or 1.
 *  \param  highSpeed  Set to false for low-power, true for high-speed.
 */
void AC_Enable(AC_t * ac, AC_COMP_t comp, bool highSpeed)
{
    14ae:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    14b0:	66 23       	and	r22, r22
    14b2:	51 f4       	brne	.+20     	; 0x14c8 <AC_Enable+0x1a>
		ac->AC0CTRL = (ac->AC0CTRL & ~AC_HSMODE_bm)|
    14b4:	90 81       	ld	r25, Z
    14b6:	44 23       	and	r20, r20
    14b8:	11 f4       	brne	.+4      	; 0x14be <AC_Enable+0x10>
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <AC_Enable+0x12>
    14be:	89 e0       	ldi	r24, 0x09	; 9
    14c0:	97 7f       	andi	r25, 0xF7	; 247
    14c2:	89 2b       	or	r24, r25
    14c4:	80 83       	st	Z, r24
    14c6:	08 95       	ret
 		              (AC_ENABLE_bm | (highSpeed ? AC_HSMODE_bm : 0));
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~AC_HSMODE_bm)|
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	44 23       	and	r20, r20
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <AC_Enable+0x24>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <AC_Enable+0x26>
    14d2:	89 e0       	ldi	r24, 0x09	; 9
    14d4:	97 7f       	andi	r25, 0xF7	; 247
    14d6:	89 2b       	or	r24, r25
    14d8:	81 83       	std	Z+1, r24	; 0x01
    14da:	08 95       	ret

000014dc <AC_Disable>:
 *
 *  \param  ac    Pointer to Analog Comparator module.
 *  \param  comp  Which submodule, 0 or 1.
 */
void AC_Disable(AC_t * ac, AC_COMP_t comp)
{
    14dc:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    14de:	66 23       	and	r22, r22
    14e0:	21 f4       	brne	.+8      	; 0x14ea <AC_Disable+0xe>
		ac->AC0CTRL &= ~AC_ENABLE_bm;
    14e2:	80 81       	ld	r24, Z
    14e4:	8e 7f       	andi	r24, 0xFE	; 254
    14e6:	80 83       	st	Z, r24
    14e8:	08 95       	ret
	}else{
		ac->AC1CTRL &= ~AC_ENABLE_bm;
    14ea:	81 81       	ldd	r24, Z+1	; 0x01
    14ec:	8e 7f       	andi	r24, 0xFE	; 254
    14ee:	81 83       	std	Z+1, r24	; 0x01
    14f0:	08 95       	ret

000014f2 <AC_ConfigInterrupt>:
 *  \param  interruptMode   Interrupt mode setting (falling, rising, toggle).
 *  \param  interruptLevel  Interrupt level setting.
 */
void AC_ConfigInterrupt(AC_t * ac, AC_COMP_t comp, AC_INTMODE_t interruptMode,
						AC_INTLVL_t interruptLevel)
{
    14f2:	fc 01       	movw	r30, r24
    14f4:	24 2b       	or	r18, r20
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    14f6:	66 23       	and	r22, r22
    14f8:	29 f4       	brne	.+10     	; 0x1504 <AC_ConfigInterrupt+0x12>
		ac->AC0CTRL = (ac->AC0CTRL & ~(AC_INTMODE_gm | AC_INTLVL_gm))|
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 70       	andi	r24, 0x0F	; 15
    14fe:	28 2b       	or	r18, r24
    1500:	20 83       	st	Z, r18
    1502:	08 95       	ret
		              ((uint8_t) interruptMode | interruptLevel);
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~(AC_INTMODE_gm | AC_INTLVL_gm)) |
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	28 2b       	or	r18, r24
    150a:	21 83       	std	Z+1, r18	; 0x01
    150c:	08 95       	ret

0000150e <AC_ConfigHysteresis>:
 *  \param  ac              Pointer to Analog Comparator module.
 *  \param  comp            Which submodule, 0 or 1.
 *  \param  hysteresisMode  Hysteresis setting (none, small, large).
 */
void AC_ConfigHysteresis(AC_t * ac, AC_COMP_t comp, AC_HYSMODE_t hysteresisMode)
{
    150e:	fc 01       	movw	r30, r24
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    1510:	66 23       	and	r22, r22
    1512:	29 f4       	brne	.+10     	; 0x151e <AC_ConfigHysteresis+0x10>
		ac->AC0CTRL = (ac->AC0CTRL & ~AC_HYSMODE_gm) | hysteresisMode;
    1514:	80 81       	ld	r24, Z
    1516:	89 7f       	andi	r24, 0xF9	; 249
    1518:	84 2b       	or	r24, r20
    151a:	80 83       	st	Z, r24
    151c:	08 95       	ret
	}else{
		ac->AC1CTRL = (ac->AC1CTRL & ~AC_HYSMODE_gm) | hysteresisMode;
    151e:	81 81       	ldd	r24, Z+1	; 0x01
    1520:	89 7f       	andi	r24, 0xF9	; 249
    1522:	84 2b       	or	r24, r20
    1524:	81 83       	std	Z+1, r24	; 0x01
    1526:	08 95       	ret

00001528 <AC_ConfigMUX>:
 *  \param  comp  Which submodule, 0 or 1.
 *  \param  pos   Positive MUX input.
 *  \param  neg   Negative MUX input.
 */
void AC_ConfigMUX(AC_t * ac, AC_COMP_t comp, AC_MUXPOS_t pos, AC_MUXNEG_t neg)
{
    1528:	fc 01       	movw	r30, r24
    152a:	24 2b       	or	r18, r20
	/* Access correct registers based on which comparator submodule indicated. */
	if(comp == 0){
    152c:	66 23       	and	r22, r22
    152e:	29 f4       	brne	.+10     	; 0x153a <AC_ConfigMUX+0x12>
		ac->AC0MUXCTRL = (ac->AC0MUXCTRL & ~(AC_MUXPOS_gm | AC_MUXNEG_gm)) |
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	80 7c       	andi	r24, 0xC0	; 192
    1534:	28 2b       	or	r18, r24
    1536:	22 83       	std	Z+2, r18	; 0x02
    1538:	08 95       	ret
		                 ((uint8_t) pos | neg);
	}else{
		ac->AC1MUXCTRL = (ac->AC1MUXCTRL & ~(AC_MUXPOS_gm | AC_MUXNEG_gm)) |
    153a:	83 81       	ldd	r24, Z+3	; 0x03
    153c:	80 7c       	andi	r24, 0xC0	; 192
    153e:	28 2b       	or	r18, r24
    1540:	23 83       	std	Z+3, r18	; 0x03
    1542:	08 95       	ret

00001544 <AC_ConfigVoltageScaler>:
 *
 *  \param  ac              Pointer to Analog Comparator module.
 *  \param  scaleFactor     Scale factor in number of 1/64ths.
 */
void AC_ConfigVoltageScaler(AC_t * ac, uint8_t scaleFactor)
{
    1544:	fc 01       	movw	r30, r24
	/* Scale factor gets truncated to bit field size. */
	ac->CTRLB = (ac->CTRLB & ~AC_SCALEFAC_gm) |
    1546:	85 81       	ldd	r24, Z+5	; 0x05
    1548:	6f 73       	andi	r22, 0x3F	; 63
    154a:	80 7c       	andi	r24, 0xC0	; 192
    154c:	86 2b       	or	r24, r22
    154e:	85 83       	std	Z+5, r24	; 0x05
	            ((scaleFactor << AC_SCALEFAC_bp) & AC_SCALEFAC_gm);
}
    1550:	08 95       	ret

00001552 <AC_EnableWindowMode>:
 *  \note Both submodules in the Analog Comparator must be enabled to make the
 *        window mode work. This is done by using the AC_enable function.
 */
void AC_EnableWindowMode(AC_t * ac, AC_WINTMODE_t interruptMode,
                         AC_WINTLVL_t interruptLevel)
{
    1552:	fc 01       	movw	r30, r24
	ac->WINCTRL = (ac->WINCTRL & ~(AC_WINTMODE_gm | AC_WINTLVL_gm)) |
    1554:	86 81       	ldd	r24, Z+6	; 0x06
    1556:	60 61       	ori	r22, 0x10	; 16
    1558:	64 2b       	or	r22, r20
    155a:	80 7f       	andi	r24, 0xF0	; 240
    155c:	86 2b       	or	r24, r22
    155e:	86 83       	std	Z+6, r24	; 0x06
	              (AC_WEN_bm | interruptMode | interruptLevel);
}
    1560:	08 95       	ret

00001562 <AC_DisableWindowMode>:
/*! \brief  This function disables the window mode.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_DisableWindowMode(AC_t * ac)
{
    1562:	fc 01       	movw	r30, r24
	ac->WINCTRL = ~AC_WEN_bm;
    1564:	8f ee       	ldi	r24, 0xEF	; 239
    1566:	86 83       	std	Z+6, r24	; 0x06
}
    1568:	08 95       	ret

0000156a <AC_EnableComparator0_Output>:
/*! \brief  This function enables routing of comparator 0 output to pin 0.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_EnableComparator0_Output(AC_t * ac)
{
    156a:	fc 01       	movw	r30, r24
	ac->CTRLA |= AC_AC0OUT_bm;
    156c:	84 81       	ldd	r24, Z+4	; 0x04
    156e:	81 60       	ori	r24, 0x01	; 1
    1570:	84 83       	std	Z+4, r24	; 0x04
}
    1572:	08 95       	ret

00001574 <AC_DisableComparator0_Output>:
/*! \brief  This function disables routing of comparator 0 output to pin 0.
 *
 *  \param  ac  Pointer to Analog Comparator module.
 */
void AC_DisableComparator0_Output(AC_t * ac)
{
    1574:	fc 01       	movw	r30, r24
	ac->CTRLA &= ~AC_AC0OUT_bm;
    1576:	84 81       	ldd	r24, Z+4	; 0x04
    1578:	8e 7f       	andi	r24, 0xFE	; 254
    157a:	84 83       	std	Z+4, r24	; 0x04
}
    157c:	08 95       	ret

0000157e <AC_GetComparatorState>:
 *  \param  comp  Which submodule, 0 or 1.
 *
 *  \return  0 if positive input is below negative, non-zero otherwise.
 */
uint8_t AC_GetComparatorState(AC_t * ac, AC_COMP_t comp)
{
    157e:	fc 01       	movw	r30, r24
	uint8_t state = 0;

	/* Access correct bits based on which comparator submodule indicated. */
	if(comp == 0){
    1580:	66 23       	and	r22, r22
    1582:	19 f4       	brne	.+6      	; 0x158a <AC_GetComparatorState+0xc>
		state = ac->STATUS & AC_AC0STATE_bm;
    1584:	87 81       	ldd	r24, Z+7	; 0x07
    1586:	80 71       	andi	r24, 0x10	; 16
    1588:	08 95       	ret
	}else if(comp == 1){
    158a:	61 30       	cpi	r22, 0x01	; 1
    158c:	11 f0       	breq	.+4      	; 0x1592 <AC_GetComparatorState+0x14>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret
		state = ac->STATUS & AC_AC1STATE_bm;
    1592:	87 81       	ldd	r24, Z+7	; 0x07
    1594:	80 72       	andi	r24, 0x20	; 32
	}else{

	}

	return state;
}
    1596:	08 95       	ret

00001598 <AC_GetWindowState>:
 *  \param  ac  Pointer to Analog Comparator module.
 *
 *  \return  Window state.
 */
uint8_t AC_GetWindowState(AC_t * ac)
{
    1598:	fc 01       	movw	r30, r24
	return (ac->STATUS & AC_WSTATE_gm);
    159a:	87 81       	ldd	r24, Z+7	; 0x07
}
    159c:	80 7c       	andi	r24, 0xC0	; 192
    159e:	08 95       	ret

000015a0 <AC_WaitForComparator_Blocking>:
 *
 *  \param  ac    Pointer to Analog Comparator module.
 *  \param  comp  Which submodule, 0 or 1.
 */
void AC_WaitForComparator_Blocking(AC_t * ac, AC_COMP_t comp)
{
    15a0:	fc 01       	movw	r30, r24
	/* Access correct bits based on which comparator submodule indicated.*/
	if(comp == 0){
    15a2:	66 23       	and	r22, r22
    15a4:	29 f4       	brne	.+10     	; 0x15b0 <AC_WaitForComparator_Blocking+0x10>
		/* Wait for interrupt flag to be set and clear it. */
		do {} while ((ac->STATUS & AC_AC0IF_bm) == 0);
    15a6:	87 81       	ldd	r24, Z+7	; 0x07
    15a8:	80 ff       	sbrs	r24, 0
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <AC_WaitForComparator_Blocking+0x6>
		ac->STATUS = AC_AC0IF_bm;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <AC_WaitForComparator_Blocking+0x18>
	}else{
		/* Wait for interrupt flag to be set and clear it. */
		do {} while ((ac->STATUS & AC_AC1IF_bm) == 0);
    15b0:	87 81       	ldd	r24, Z+7	; 0x07
    15b2:	81 ff       	sbrs	r24, 1
    15b4:	fd cf       	rjmp	.-6      	; 0x15b0 <AC_WaitForComparator_Blocking+0x10>
		ac->STATUS = AC_AC1IF_bm;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	87 83       	std	Z+7, r24	; 0x07
    15ba:	08 95       	ret

000015bc <AC_WaitForWindow_Blocking>:
 *  Which event to wait for is decided by the window interrupt mode setting.
 *
 *  \param  ac    Pointer to Analog Comparator module.
 */
void AC_WaitForWindow_Blocking(AC_t * ac)
{
    15bc:	fc 01       	movw	r30, r24
	/* Wait for interrupt flag to be set and clear it. */
	do {} while ((ac->STATUS & AC_WIF_bm) == 0);
    15be:	87 81       	ldd	r24, Z+7	; 0x07
    15c0:	82 ff       	sbrs	r24, 2
    15c2:	fd cf       	rjmp	.-6      	; 0x15be <AC_WaitForWindow_Blocking+0x2>
	ac->STATUS = AC_WIF_bm;
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	87 83       	std	Z+7, r24	; 0x07
}
    15c8:	08 95       	ret

000015ca <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    15ca:	dc 01       	movw	r26, r24
	if(&ADCA == adc){
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	a0 30       	cpi	r26, 0x00	; 0
    15d0:	b8 07       	cpc	r27, r24
    15d2:	81 f4       	brne	.+32     	; 0x15f4 <ADC_CalibrationValues_Load+0x2a>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    15da:	e0 e2       	ldi	r30, 0x20	; 32
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    15e0:	10 92 ca 01 	sts	0x01CA, r1
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
	if(&ADCA == adc){
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    15e4:	1c 96       	adiw	r26, 0x0c	; 12
    15e6:	ec 93       	st	X, r30
    15e8:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    15ea:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    15ee:	e1 e2       	ldi	r30, 0x21	; 33
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <ADC_CalibrationValues_Load+0x48>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    15fa:	e4 e2       	ldi	r30, 0x24	; 36
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1600:	10 92 ca 01 	sts	0x01CA, r1
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    1604:	1c 96       	adiw	r26, 0x0c	; 12
    1606:	ec 93       	st	X, r30
    1608:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    160a:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    160e:	e5 e2       	ldi	r30, 0x25	; 37
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1614:	10 92 ca 01 	sts	0x01CA, r1
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    1618:	1d 96       	adiw	r26, 0x0d	; 13
    161a:	ec 93       	st	X, r30
    161c:	08 95       	ret

0000161e <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    161e:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    1624:	24 81       	ldd	r18, Z+4	; 0x04
    1626:	35 81       	ldd	r19, Z+5	; 0x05
    1628:	26 1b       	sub	r18, r22
    162a:	31 09       	sbc	r19, r1

	return answer;
}
    162c:	c9 01       	movw	r24, r18
    162e:	08 95       	ret

00001630 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    1630:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    1636:	24 81       	ldd	r18, Z+4	; 0x04
    1638:	35 81       	ldd	r19, Z+5	; 0x05
    163a:	77 27       	eor	r23, r23
    163c:	67 fd       	sbrc	r22, 7
    163e:	70 95       	com	r23
    1640:	26 1b       	sub	r18, r22
    1642:	37 0b       	sbc	r19, r23

	return answer;
}
    1644:	c9 01       	movw	r24, r18
    1646:	08 95       	ret

00001648 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    1648:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    164e:	24 81       	ldd	r18, Z+4	; 0x04
    1650:	35 81       	ldd	r19, Z+5	; 0x05
}
    1652:	c9 01       	movw	r24, r18
    1654:	08 95       	ret

00001656 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    1656:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    165c:	84 81       	ldd	r24, Z+4	; 0x04
}
    165e:	08 95       	ret

00001660 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    1660:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    1666:	85 81       	ldd	r24, Z+5	; 0x05
}
    1668:	08 95       	ret

0000166a <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    166a:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    166c:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    166e:	14 82       	std	Z+4, r1	; 0x04
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b2 e0       	ldi	r27, 0x02	; 2
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <ADC_Wait_8MHz+0xa>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    1678:	84 83       	std	Z+4, r24	; 0x04
}
    167a:	08 95       	ret

0000167c <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    167c:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    167e:	94 81       	ldd	r25, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	84 83       	std	Z+4, r24	; 0x04
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b4 e0       	ldi	r27, 0x04	; 4
    1688:	11 97       	sbiw	r26, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <ADC_Wait_32MHz+0xc>

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    168c:	94 83       	std	Z+4, r25	; 0x04
}
    168e:	08 95       	ret

00001690 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    1690:	fb 01       	movw	r30, r22
    if (oversampling)
    1692:	44 23       	and	r20, r20
    1694:	d9 f0       	breq	.+54     	; 0x16cc <ADC_Offset_Get_Unsigned+0x3c>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    169e:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    16a0:	80 81       	ld	r24, Z
    16a2:	80 68       	ori	r24, 0x80	; 128
    16a4:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    16a6:	83 81       	ldd	r24, Z+3	; 0x03
    16a8:	80 ff       	sbrs	r24, 0
    16aa:	fd cf       	rjmp	.-6      	; 0x16a6 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    16ac:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    16b2:	28 0f       	add	r18, r24
    16b4:	39 1f       	adc	r19, r25
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
    16b6:	4f 5f       	subi	r20, 0xFF	; 255
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	44 30       	cpi	r20, 0x04	; 4
    16bc:	51 05       	cpc	r21, r1
    16be:	81 f7       	brne	.-32     	; 0x16a0 <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    16c0:	36 95       	lsr	r19
    16c2:	27 95       	ror	r18
    16c4:	36 95       	lsr	r19
    16c6:	27 95       	ror	r18
    16c8:	82 2f       	mov	r24, r18
    16ca:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    16cc:	80 81       	ld	r24, Z
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    16d2:	83 81       	ldd	r24, Z+3	; 0x03
    16d4:	80 ff       	sbrs	r24, 0
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <ADC_Offset_Get_Unsigned+0x42>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    16dc:	84 81       	ldd	r24, Z+4	; 0x04
    16de:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
    16e0:	08 95       	ret

000016e2 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    16e2:	fb 01       	movw	r30, r22
    if (oversampling)
    16e4:	44 23       	and	r20, r20
    16e6:	d9 f0       	breq	.+54     	; 0x171e <ADC_Offset_Get_Signed+0x3c>
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    16f2:	80 81       	ld	r24, Z
    16f4:	80 68       	ori	r24, 0x80	; 128
    16f6:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    16f8:	83 81       	ldd	r24, Z+3	; 0x03
    16fa:	80 ff       	sbrs	r24, 0
    16fc:	fd cf       	rjmp	.-6      	; 0x16f8 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    16fe:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    1700:	84 81       	ldd	r24, Z+4	; 0x04
    1702:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    1704:	48 0f       	add	r20, r24
    1706:	59 1f       	adc	r21, r25
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	24 30       	cpi	r18, 0x04	; 4
    170e:	31 05       	cpc	r19, r1
    1710:	81 f7       	brne	.-32     	; 0x16f2 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    1712:	ca 01       	movw	r24, r20
    1714:	64 e0       	ldi	r22, 0x04	; 4
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__divmodhi4>
    171c:	0b c0       	rjmp	.+22     	; 0x1734 <ADC_Offset_Get_Signed+0x52>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    171e:	80 81       	ld	r24, Z
    1720:	80 68       	ori	r24, 0x80	; 128
    1722:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    1724:	83 81       	ldd	r24, Z+3	; 0x03
    1726:	80 ff       	sbrs	r24, 0
    1728:	fd cf       	rjmp	.-6      	; 0x1724 <ADC_Offset_Get_Signed+0x42>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    172e:	84 81       	ldd	r24, Z+4	; 0x04
    1730:	95 81       	ldd	r25, Z+5	; 0x05
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    1732:	68 2f       	mov	r22, r24
      
      return offset;
    }
}
    1734:	86 2f       	mov	r24, r22
    1736:	08 95       	ret

00001738 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1738:	aa ec       	ldi	r26, 0xCA	; 202
    173a:	b1 e0       	ldi	r27, 0x01	; 1
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    1740:	e8 2f       	mov	r30, r24
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1746:	1c 92       	st	X, r1

	return result;
}
    1748:	8e 2f       	mov	r24, r30
    174a:	08 95       	ret

0000174c <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    174c:	0f 93       	push	r16
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    1758:	2f b7       	in	r18, 0x3f	; 63
    175a:	29 83       	std	Y+1, r18	; 0x01
    175c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    175e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1760:	fc 01       	movw	r30, r24
    1762:	08 ed       	ldi	r16, 0xD8	; 216
    1764:	04 bf       	out	0x34, r16	; 52
    1766:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	8f bf       	out	0x3f, r24	; 63
#endif
}
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	0f 91       	pop	r16
    1774:	08 95       	ret

00001776 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    1776:	66 23       	and	r22, r22
    1778:	11 f4       	brne	.+4      	; 0x177e <CLKSYS_XOSC_Config+0x8>
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <CLKSYS_XOSC_Config+0xa>
    177e:	90 e2       	ldi	r25, 0x20	; 32
    1780:	48 2b       	or	r20, r24
    1782:	94 2b       	or	r25, r20
    1784:	e0 e5       	ldi	r30, 0x50	; 80
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    178a:	08 95       	ret

0000178c <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    178c:	6f 71       	andi	r22, 0x1F	; 31
    178e:	68 2b       	or	r22, r24
    1790:	e0 e5       	ldi	r30, 0x50	; 80
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	65 83       	std	Z+5, r22	; 0x05
}
    1796:	08 95       	ret

00001798 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    1798:	e0 e5       	ldi	r30, 0x50	; 80
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	20 81       	ld	r18, Z
    179e:	98 2f       	mov	r25, r24
    17a0:	90 95       	com	r25
    17a2:	92 23       	and	r25, r18
    17a4:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    17a6:	90 81       	ld	r25, Z
	return clkEnabled;
}
    17a8:	89 23       	and	r24, r25
    17aa:	08 95       	ret

000017ac <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    17ac:	0f 93       	push	r16
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    17b8:	9f b7       	in	r25, 0x3f	; 63
    17ba:	99 83       	std	Y+1, r25	; 0x01
    17bc:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    17be:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    17c0:	68 2b       	or	r22, r24
    17c2:	81 e4       	ldi	r24, 0x41	; 65
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	fc 01       	movw	r30, r24
    17c8:	08 ed       	ldi	r16, 0xD8	; 216
    17ca:	04 bf       	out	0x34, r16	; 52
    17cc:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    17dc:	0f 93       	push	r16
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    17e8:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    17ec:	9f b7       	in	r25, 0x3f	; 63
    17ee:	99 83       	std	Y+1, r25	; 0x01
    17f0:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    17f2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    17f4:	a0 e4       	ldi	r26, 0x40	; 64
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	28 7f       	andi	r18, 0xF8	; 248
    17fa:	28 2b       	or	r18, r24
    17fc:	fd 01       	movw	r30, r26
    17fe:	08 ed       	ldi	r16, 0xD8	; 216
    1800:	04 bf       	out	0x34, r16	; 52
    1802:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1804:	99 81       	ldd	r25, Y+1	; 0x01
    1806:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
    1808:	9c 91       	ld	r25, X
	return clkCtrl;
}
    180a:	89 23       	and	r24, r25
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    1816:	e0 e4       	ldi	r30, 0x40	; 64
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	91 7f       	andi	r25, 0xF1	; 241
    181e:	91 60       	ori	r25, 0x01	; 1
    1820:	98 2b       	or	r25, r24
    1822:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    1824:	08 95       	ret

00001826 <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
    1826:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    1828:	30 91 56 00 	lds	r19, 0x0056
    182c:	66 23       	and	r22, r22
    182e:	11 f0       	breq	.+4      	; 0x1834 <CLKSYS_AutoCalibration_Enable+0xe>
    1830:	98 2f       	mov	r25, r24
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <CLKSYS_AutoCalibration_Enable+0x10>
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	82 2f       	mov	r24, r18
    1838:	80 95       	com	r24
    183a:	83 23       	and	r24, r19
    183c:	98 2b       	or	r25, r24
    183e:	e0 e5       	ldi	r30, 0x50	; 80
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    1844:	21 30       	cpi	r18, 0x01	; 1
    1846:	31 f4       	brne	.+12     	; 0x1854 <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    1848:	80 91 68 00 	lds	r24, 0x0068
    184c:	81 60       	ori	r24, 0x01	; 1
    184e:	80 93 68 00 	sts	0x0068, r24
    1852:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	29 f4       	brne	.+10     	; 0x1862 <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1858:	80 91 60 00 	lds	r24, 0x0060
    185c:	81 60       	ori	r24, 0x01	; 1
    185e:	80 93 60 00 	sts	0x0060, r24
    1862:	08 95       	ret

00001864 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
    1864:	0f 93       	push	r16
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    1870:	8f b7       	in	r24, 0x3f	; 63
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    1876:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1878:	23 e0       	ldi	r18, 0x03	; 3
    187a:	83 e5       	ldi	r24, 0x53	; 83
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	fc 01       	movw	r30, r24
    1880:	08 ed       	ldi	r16, 0xD8	; 216
    1882:	04 bf       	out	0x34, r16	; 52
    1884:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
    1894:	0f 93       	push	r16
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    18a0:	8f b7       	in	r24, 0x3f	; 63
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    18a6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	82 e4       	ldi	r24, 0x42	; 66
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	08 ed       	ldi	r16, 0xD8	; 216
    18b2:	04 bf       	out	0x34, r16	; 52
    18b4:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <DAC_SingleChannel_Enable>:
 *  \param  leftAdjust  Set to true to make data registers left adjusted.
 */
void DAC_SingleChannel_Enable( volatile DAC_t * dac,
                              DAC_REFSEL_t convRef,
                              bool leftAdjust )
{
    18c4:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_SINGLE_gc;
    18c6:	81 81       	ldd	r24, Z+1	; 0x01
    18c8:	8f 79       	andi	r24, 0x9F	; 159
    18ca:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~(DAC_REFSEL_gm | DAC_LEFTADJ_bm) ) |
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	86 7e       	andi	r24, 0xE6	; 230
    18d0:	68 2b       	or	r22, r24
    18d2:	64 2b       	or	r22, r20
    18d4:	62 83       	std	Z+2, r22	; 0x02
	             convRef | ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->CTRLA = ( dac->CTRLA & ~DAC_CH1EN_bm ) |
    18d6:	80 81       	ld	r24, Z
    18d8:	82 7f       	andi	r24, 0xF2	; 242
    18da:	85 60       	ori	r24, 0x05	; 5
    18dc:	80 83       	st	Z, r24
	             DAC_CH0EN_bm | DAC_ENABLE_bm;
}
    18de:	08 95       	ret

000018e0 <DAC_DualChannel_Enable>:
void DAC_DualChannel_Enable( volatile DAC_t * dac,
                            DAC_REFSEL_t convRef,
                            bool leftAdjust,
                            DAC_CONINTVAL_t sampleInterval,
                            DAC_REFRESH_t refreshInterval )
{
    18e0:	0f 93       	push	r16
    18e2:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_DUAL_gc;
    18e4:	81 81       	ldd	r24, Z+1	; 0x01
    18e6:	8f 79       	andi	r24, 0x9F	; 159
    18e8:	80 64       	ori	r24, 0x40	; 64
    18ea:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~( DAC_REFSEL_gm | DAC_LEFTADJ_bm ) ) |
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	86 7e       	andi	r24, 0xE6	; 230
    18f0:	68 2b       	or	r22, r24
    18f2:	64 2b       	or	r22, r20
    18f4:	62 83       	std	Z+2, r22	; 0x02
	             convRef |
	             ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->TIMCTRL = (uint8_t) sampleInterval | refreshInterval;
    18f6:	02 2b       	or	r16, r18
    18f8:	04 83       	std	Z+4, r16	; 0x04
	dac->CTRLA |= DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
    18fa:	80 81       	ld	r24, Z
    18fc:	8d 60       	ori	r24, 0x0D	; 13
    18fe:	80 83       	st	Z, r24
}
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <DAC_Channel_Write>:
 *  \param  dac     Pointer to DAC module register section.
 *  \param  data    Data to be converted.
 *  \param  channel Selected channel in the DAC module, either CH0 or CH1.
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
    1904:	fc 01       	movw	r30, r24
	if ( channel == CH0 ) {
    1906:	44 23       	and	r20, r20
    1908:	19 f4       	brne	.+6      	; 0x1910 <DAC_Channel_Write+0xc>
		dac->CH0DATA = data;
    190a:	60 8f       	std	Z+24, r22	; 0x18
    190c:	71 8f       	std	Z+25, r23	; 0x19
    190e:	08 95       	ret
	} else {
		dac->CH1DATA = data;
    1910:	62 8f       	std	Z+26, r22	; 0x1a
    1912:	73 8f       	std	Z+27, r23	; 0x1b
    1914:	08 95       	ret

00001916 <DAC_Channel_DataEmpty>:
 *
 *  \retval dacStatus True if data register is empty.
 *  \retval dacStatus False if data register is not empty.
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
    1916:	fc 01       	movw	r30, r24
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
    1918:	85 81       	ldd	r24, Z+5	; 0x05
    191a:	66 23       	and	r22, r22
    191c:	19 f4       	brne	.+6      	; 0x1924 <DAC_Channel_DataEmpty+0xe>
    191e:	21 e0       	ldi	r18, 0x01	; 1
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DAC_Channel_DataEmpty+0x12>
    1924:	22 e0       	ldi	r18, 0x02	; 2
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	28 23       	and	r18, r24
    192e:	39 23       	and	r19, r25
    1930:	23 2b       	or	r18, r19
    1932:	09 f0       	breq	.+2      	; 0x1936 <DAC_Channel_DataEmpty+0x20>
    1934:	41 e0       	ldi	r20, 0x01	; 1
	return dacStatus;
}
    1936:	84 2f       	mov	r24, r20
    1938:	08 95       	ret

0000193a <DAC_EventAction_Set>:
 *  \param  eventLine   Event line (0..7) to use for triggering conversions.
 */
void DAC_EventAction_Set( volatile DAC_t * dac,
                          DAC_TRIG_t trigChannel,
                          uint8_t eventLine )
{
    193a:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_TRIG_1_1 ) | trigChannel;
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	8c 7f       	andi	r24, 0xFC	; 252
    1940:	86 2b       	or	r24, r22
    1942:	81 83       	std	Z+1, r24	; 0x01
	dac->EVCTRL = eventLine & DAC_EVSEL_gm;
    1944:	47 70       	andi	r20, 0x07	; 7
    1946:	43 83       	std	Z+3, r20	; 0x03
}
    1948:	08 95       	ret

0000194a <EVSYS_SetEventSource>:
	volatile uint8_t * chMux;

	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the eventSource value.
	 */
	if (eventChannel < 8) {
    194a:	88 30       	cpi	r24, 0x08	; 8
    194c:	10 f0       	brcs	.+4      	; 0x1952 <EVSYS_SetEventSource+0x8>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
		chMux = &EVSYS.CH0MUX + eventChannel;
    1952:	e8 2f       	mov	r30, r24
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	e0 58       	subi	r30, 0x80	; 128
    1958:	fe 4f       	sbci	r31, 0xFE	; 254
		*chMux = eventSource;
    195a:	60 83       	st	Z, r22
    195c:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    195e:	08 95       	ret

00001960 <EVSYS_SetEventChannelParameters>:
bool EVSYS_SetEventChannelParameters( uint8_t eventChannel,
                                      EVSYS_QDIRM_t QDIRM,
                                      bool QDIndexEnable,
                                      bool QDEnable,
                                      EVSYS_DIGFILT_t filterCoefficient )
{
    1960:	0f 93       	push	r16

	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the configuration value.
	 */
	if ( ( eventChannel == 0 ) ||
    1962:	88 23       	and	r24, r24
    1964:	31 f0       	breq	.+12     	; 0x1972 <EVSYS_SetEventChannelParameters+0x12>
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	21 f0       	breq	.+8      	; 0x1972 <EVSYS_SetEventChannelParameters+0x12>
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	11 f0       	breq	.+4      	; 0x1972 <EVSYS_SetEventChannelParameters+0x12>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	10 c0       	rjmp	.+32     	; 0x1992 <EVSYS_SetEventChannelParameters+0x32>
	     ( eventChannel == 2 ) ||
	     ( eventChannel == 4 ) ) {

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
		*chCtrl = ( uint8_t ) QDIRM |
    1972:	44 23       	and	r20, r20
    1974:	11 f4       	brne	.+4      	; 0x197a <EVSYS_SetEventChannelParameters+0x1a>
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	01 c0       	rjmp	.+2      	; 0x197c <EVSYS_SetEventChannelParameters+0x1c>
    197a:	90 e1       	ldi	r25, 0x10	; 16
    197c:	21 11       	cpse	r18, r1
    197e:	28 e0       	ldi	r18, 0x08	; 8
    1980:	06 2b       	or	r16, r22
    1982:	90 2b       	or	r25, r16
    1984:	92 2b       	or	r25, r18
	if ( ( eventChannel == 0 ) ||
	     ( eventChannel == 2 ) ||
	     ( eventChannel == 4 ) ) {

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
    1986:	e8 2f       	mov	r30, r24
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	e8 57       	subi	r30, 0x78	; 120
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
		*chCtrl = ( uint8_t ) QDIRM |
    198e:	90 83       	st	Z, r25
    1990:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <EVSYS_SetEventChannelFilter>:
                                  EVSYS_DIGFILT_t filterCoefficient )
{
	/*  Check if channel is valid and set the pointer offset for the selected
	 *  channel and assign the configuration value.
	 */
	if (eventChannel < 8) {
    1996:	88 30       	cpi	r24, 0x08	; 8
    1998:	10 f0       	brcs	.+4      	; 0x199e <EVSYS_SetEventChannelFilter+0x8>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	08 95       	ret

		volatile uint8_t * chCtrl;
		chCtrl = &EVSYS.CH0CTRL + eventChannel;
    199e:	e8 2f       	mov	r30, r24
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	e8 57       	subi	r30, 0x78	; 120
    19a4:	fe 4f       	sbci	r31, 0xFE	; 254
		*chCtrl = filterCoefficient;
    19a6:	60 83       	st	Z, r22
    19a8:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	} else {
		return false;
	}
}
    19aa:	08 95       	ret

000019ac <EVSYS_ManualTrigger>:
 *                    position n correspond to the channel n.
 */
void EVSYS_ManualTrigger( uint8_t dataMask, uint8_t strobeMask )
{
	/* The datamask register must be set before the strobe register. */
	EVSYS.DATA = dataMask;
    19ac:	e0 e8       	ldi	r30, 0x80	; 128
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	81 8b       	std	Z+17, r24	; 0x11
	EVSYS.STROBE = strobeMask;
    19b2:	60 8b       	std	Z+16, r22	; 0x10
}
    19b4:	08 95       	ret

000019b6 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    19b6:	e0 ea       	ldi	r30, 0xA0	; 160
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    19be:	98 ed       	ldi	r25, 0xD8	; 216
    19c0:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    19c2:	82 83       	std	Z+2, r24	; 0x02
}
    19c4:	08 95       	ret

000019c6 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    19c6:	e0 ea       	ldi	r30, 0xA0	; 160
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    19ce:	98 ed       	ldi	r25, 0xD8	; 216
    19d0:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    19d2:	82 83       	std	Z+2, r24	; 0x02
}
    19d4:	08 95       	ret

000019d6 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
    19d6:	af 92       	push	r10
    19d8:	cf 92       	push	r12
    19da:	ef 92       	push	r14
    19dc:	0f 93       	push	r16
    19de:	dc 01       	movw	r26, r24
    19e0:	fb 01       	movw	r30, r22
	spi->module         = module;
    19e2:	6d 93       	st	X+, r22
    19e4:	7c 93       	st	X, r23
    19e6:	11 97       	sbiw	r26, 0x01	; 1
	spi->port           = port;
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	4d 93       	st	X+, r20
    19ec:	5c 93       	st	X, r21
    19ee:	13 97       	sbiw	r26, 0x03	; 3
	spi->interrupted    = false;
    19f0:	14 96       	adiw	r26, 0x04	; 4
    19f2:	1c 92       	st	X, r1
    19f4:	14 97       	sbiw	r26, 0x04	; 4

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    19f6:	cc 20       	and	r12, r12
    19f8:	11 f4       	brne	.+4      	; 0x19fe <SPI_MasterInit+0x28>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <SPI_MasterInit+0x2a>
    19fe:	90 e8       	ldi	r25, 0x80	; 128
    1a00:	22 23       	and	r18, r18
    1a02:	11 f4       	brne	.+4      	; 0x1a08 <SPI_MasterInit+0x32>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <SPI_MasterInit+0x34>
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	00 65       	ori	r16, 0x50	; 80
    1a0c:	0a 29       	or	r16, r10
    1a0e:	90 2b       	or	r25, r16
    1a10:	89 2b       	or	r24, r25
    1a12:	80 83       	st	Z, r24
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	11 97       	sbiw	r26, 0x01	; 1
    1a1a:	e1 82       	std	Z+1, r14	; 0x01

	/* No assigned data packet. */
	spi->dataPacket = NULL;
    1a1c:	15 96       	adiw	r26, 0x05	; 5
    1a1e:	1d 92       	st	X+, r1
    1a20:	1c 92       	st	X, r1
    1a22:	16 97       	sbiw	r26, 0x06	; 6

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
    1a24:	12 96       	adiw	r26, 0x02	; 2
    1a26:	ed 91       	ld	r30, X+
    1a28:	fc 91       	ld	r31, X
    1a2a:	13 97       	sbiw	r26, 0x03	; 3
    1a2c:	80 ea       	ldi	r24, 0xA0	; 160
    1a2e:	81 83       	std	Z+1, r24	; 0x01
}
    1a30:	0f 91       	pop	r16
    1a32:	ef 90       	pop	r14
    1a34:	cf 90       	pop	r12
    1a36:	af 90       	pop	r10
    1a38:	08 95       	ret

00001a3a <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
    1a3a:	ef 92       	push	r14
    1a3c:	0f 93       	push	r16
    1a3e:	dc 01       	movw	r26, r24
    1a40:	fb 01       	movw	r30, r22
	/* SPI module. */
	spi->module       = module;
    1a42:	6d 93       	st	X+, r22
    1a44:	7c 93       	st	X, r23
    1a46:	11 97       	sbiw	r26, 0x01	; 1
	spi->port         = port;
    1a48:	12 96       	adiw	r26, 0x02	; 2
    1a4a:	4d 93       	st	X+, r20
    1a4c:	5c 93       	st	X, r21
    1a4e:	13 97       	sbiw	r26, 0x03	; 3

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    1a50:	22 23       	and	r18, r18
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <SPI_SlaveInit+0x1e>
    1a54:	80 e4       	ldi	r24, 0x40	; 64
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <SPI_SlaveInit+0x20>
    1a58:	80 e6       	ldi	r24, 0x60	; 96
    1a5a:	80 2b       	or	r24, r16
    1a5c:	80 83       	st	Z, r24
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    1a5e:	ed 91       	ld	r30, X+
    1a60:	fc 91       	ld	r31, X
    1a62:	11 97       	sbiw	r26, 0x01	; 1
    1a64:	e1 82       	std	Z+1, r14	; 0x01

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
    1a66:	12 96       	adiw	r26, 0x02	; 2
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	13 97       	sbiw	r26, 0x03	; 3
    1a6e:	80 e4       	ldi	r24, 0x40	; 64
    1a70:	81 83       	std	Z+1, r24	; 0x01
}
    1a72:	0f 91       	pop	r16
    1a74:	ef 90       	pop	r14
    1a76:	08 95       	ret

00001a78 <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
    1a78:	ef 92       	push	r14
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
    1a80:	00 83       	st	Z, r16
    1a82:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
    1a84:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
    1a86:	63 83       	std	Z+3, r22	; 0x03
    1a88:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
    1a8a:	45 83       	std	Z+5, r20	; 0x05
    1a8c:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
    1a8e:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
    1a90:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
    1a92:	11 86       	std	Z+9, r1	; 0x09
}
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ef 90       	pop	r14
    1a9a:	08 95       	ret

00001a9c <SPI_MasterInterruptHandler>:
 *  a pointer to the related SPI_Master_t struct as argument.
 *
 *  \param spi        Pointer to the modules own SPI_Master_t struct.
 */
void SPI_MasterInterruptHandler(SPI_Master_t *spi)
{
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	dc 01       	movw	r26, r24
	uint8_t data;
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;
    1aa2:	15 96       	adiw	r26, 0x05	; 5
    1aa4:	cd 91       	ld	r28, X+
    1aa6:	dc 91       	ld	r29, X
    1aa8:	16 97       	sbiw	r26, 0x06	; 6
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
    1ab2:	80 81       	ld	r24, Z
    1ab4:	84 fd       	sbrc	r24, 4
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <SPI_MasterInterruptHandler+0x26>
		spi->interrupted = true;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	14 96       	adiw	r26, 0x04	; 4
    1abc:	8c 93       	st	X, r24
    1abe:	14 97       	sbiw	r26, 0x04	; 4
    1ac0:	24 c0       	rjmp	.+72     	; 0x1b0a <SPI_MasterInterruptHandler+0x6e>
	}

	else {  /* Data interrupt. */

		/* Store received data. */
		data = spi->module->DATA;
    1ac2:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    1ac4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac8:	e9 0f       	add	r30, r25
    1aca:	f1 1d       	adc	r31, r1
    1acc:	80 83       	st	Z, r24

		/* Next byte. */
		bytesTransceived++;
    1ace:	9f 5f       	subi	r25, 0xFF	; 255

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
    1ad0:	15 96       	adiw	r26, 0x05	; 5
    1ad2:	ed 91       	ld	r30, X+
    1ad4:	fc 91       	ld	r31, X
    1ad6:	16 97       	sbiw	r26, 0x06	; 6
    1ad8:	87 81       	ldd	r24, Z+7	; 0x07
    1ada:	98 17       	cp	r25, r24
    1adc:	58 f4       	brcc	.+22     	; 0x1af4 <SPI_MasterInterruptHandler+0x58>
			/* Put data byte in transmit data register. */
			data = spi->dataPacket->transmitData[bytesTransceived];
    1ade:	03 80       	ldd	r0, Z+3	; 0x03
    1ae0:	f4 81       	ldd	r31, Z+4	; 0x04
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	e9 0f       	add	r30, r25
    1ae6:	f1 1d       	adc	r31, r1
    1ae8:	80 81       	ld	r24, Z
			spi->module->DATA = data;
    1aea:	ed 91       	ld	r30, X+
    1aec:	fc 91       	ld	r31, X
    1aee:	11 97       	sbiw	r26, 0x01	; 1
    1af0:	83 83       	std	Z+3, r24	; 0x03
    1af2:	0b c0       	rjmp	.+22     	; 0x1b0a <SPI_MasterInterruptHandler+0x6e>

		/* Transmission complete. */
		else {

			/* Release SS to slave(s). */
			uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
			SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    1af6:	01 90       	ld	r0, Z+
    1af8:	f0 81       	ld	r31, Z
    1afa:	e0 2d       	mov	r30, r0
    1afc:	85 83       	std	Z+5, r24	; 0x05

			spi->dataPacket->complete = true;
    1afe:	15 96       	adiw	r26, 0x05	; 5
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	16 97       	sbiw	r26, 0x06	; 6
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	81 87       	std	Z+9, r24	; 0x09
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    1b0a:	15 96       	adiw	r26, 0x05	; 5
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	16 97       	sbiw	r26, 0x06	; 6
    1b12:	90 87       	std	Z+8, r25	; 0x08
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	08 95       	ret

00001b1a <SPI_MasterInterruptTransceivePacket>:
 *  \retval SPI_BUSY          The SPI module is busy.
 *  \retval SPI_INTERRUPTED   The transmission was interrupted by another master.
 */
uint8_t SPI_MasterInterruptTransceivePacket(SPI_Master_t *spi,
                                            SPI_DataPacket_t *dataPacket)
{
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	dc 01       	movw	r26, r24
    1b20:	eb 01       	movw	r28, r22
	uint8_t data;
	bool interrupted = spi->interrupted;
    1b22:	14 96       	adiw	r26, 0x04	; 4
    1b24:	9c 91       	ld	r25, X
    1b26:	14 97       	sbiw	r26, 0x04	; 4

	/* If no packets sent so far. */
	if (spi->dataPacket == NULL) {
    1b28:	15 96       	adiw	r26, 0x05	; 5
    1b2a:	ed 91       	ld	r30, X+
    1b2c:	fc 91       	ld	r31, X
    1b2e:	16 97       	sbiw	r26, 0x06	; 6
    1b30:	30 97       	sbiw	r30, 0x00	; 0
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <SPI_MasterInterruptTransceivePacket+0x24>
		spi->dataPacket = dataPacket;
    1b34:	15 96       	adiw	r26, 0x05	; 5
    1b36:	6d 93       	st	X+, r22
    1b38:	7c 93       	st	X, r23
    1b3a:	16 97       	sbiw	r26, 0x06	; 6
    1b3c:	10 c0       	rjmp	.+32     	; 0x1b5e <SPI_MasterInterruptTransceivePacket+0x44>
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
    1b3e:	81 85       	ldd	r24, Z+9	; 0x09
    1b40:	88 23       	and	r24, r24
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <SPI_MasterInterruptTransceivePacket+0x2e>
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	28 c0       	rjmp	.+80     	; 0x1b98 <SPI_MasterInterruptTransceivePacket+0x7e>
		return (SPI_BUSY);
	}

	/* If interrupted by other master. */
	else if (interrupted) {
    1b48:	99 23       	and	r25, r25
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <SPI_MasterInterruptTransceivePacket+0x44>
		/* If SS released. */
		if (spi->port->OUT & SPI_SS_bm) {
    1b4c:	12 96       	adiw	r26, 0x02	; 2
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	13 97       	sbiw	r26, 0x03	; 3
    1b54:	84 81       	ldd	r24, Z+4	; 0x04
    1b56:	84 fd       	sbrc	r24, 4
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <SPI_MasterInterruptTransceivePacket+0x44>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	1d c0       	rjmp	.+58     	; 0x1b98 <SPI_MasterInterruptTransceivePacket+0x7e>
		}
	}

	/* NOT interrupted by other master.
	* Start transmission. */
	spi->dataPacket = dataPacket;
    1b5e:	15 96       	adiw	r26, 0x05	; 5
    1b60:	cd 93       	st	X+, r28
    1b62:	dc 93       	st	X, r29
    1b64:	16 97       	sbiw	r26, 0x06	; 6
	spi->dataPacket->complete = false;
    1b66:	19 86       	std	Y+9, r1	; 0x09
	spi->interrupted = false;
    1b68:	14 96       	adiw	r26, 0x04	; 4
    1b6a:	1c 92       	st	X, r1
    1b6c:	14 97       	sbiw	r26, 0x04	; 4

	/* SS to slave(s) low.*/
	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
	SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    1b70:	e8 81       	ld	r30, Y
    1b72:	f9 81       	ldd	r31, Y+1	; 0x01
    1b74:	86 83       	std	Z+6, r24	; 0x06

	spi->dataPacket->bytesTransceived = 0;
    1b76:	15 96       	adiw	r26, 0x05	; 5
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	16 97       	sbiw	r26, 0x06	; 6
    1b7e:	10 86       	std	Z+8, r1	; 0x08

	/* Start sending data. */
	data = spi->dataPacket->transmitData[0];
    1b80:	15 96       	adiw	r26, 0x05	; 5
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	16 97       	sbiw	r26, 0x06	; 6
    1b88:	03 80       	ldd	r0, Z+3	; 0x03
    1b8a:	f4 81       	ldd	r31, Z+4	; 0x04
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	80 81       	ld	r24, Z
	spi->module->DATA = data;
    1b90:	ed 91       	ld	r30, X+
    1b92:	fc 91       	ld	r31, X
    1b94:	83 83       	std	Z+3, r24	; 0x03
    1b96:	80 e0       	ldi	r24, 0x00	; 0

	/* Successs */
	return (SPI_OK);
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
    1b9e:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
    1ba0:	a0 81       	ld	r26, Z
    1ba2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba4:	13 96       	adiw	r26, 0x03	; 3
    1ba6:	6c 93       	st	X, r22

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
    1ba8:	01 90       	ld	r0, Z+
    1baa:	f0 81       	ld	r31, Z
    1bac:	e0 2d       	mov	r30, r0
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	87 ff       	sbrs	r24, 7
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <SPI_MasterTransceiveByte+0x10>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
    1bb4:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
    1bb6:	08 95       	ret

00001bb8 <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	fb 01       	movw	r30, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
    1bc0:	61 15       	cp	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <SPI_MasterTransceivePacket+0x12>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	37 c0       	rjmp	.+110    	; 0x1c38 <SPI_MasterTransceivePacket+0x80>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
    1bca:	6d 83       	std	Y+5, r22	; 0x05
    1bcc:	7e 83       	std	Y+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    1bce:	42 81       	ldd	r20, Z+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    1bd0:	a0 81       	ld	r26, Z
    1bd2:	b1 81       	ldd	r27, Z+1	; 0x01
    1bd4:	10 97       	sbiw	r26, 0x00	; 0
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <SPI_MasterTransceivePacket+0x24>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    1bd8:	16 96       	adiw	r26, 0x06	; 6
    1bda:	4c 93       	st	X, r20
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
    1bdc:	67 81       	ldd	r22, Z+7	; 0x07
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	1a c0       	rjmp	.+52     	; 0x1c16 <SPI_MasterTransceivePacket+0x5e>
	while (bytesTransceived < bytesToTransceive) {

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
    1be2:	29 2f       	mov	r18, r25
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	03 80       	ldd	r0, Z+3	; 0x03
    1be8:	f4 81       	ldd	r31, Z+4	; 0x04
    1bea:	e0 2d       	mov	r30, r0
    1bec:	e2 0f       	add	r30, r18
    1bee:	f3 1f       	adc	r31, r19
    1bf0:	80 81       	ld	r24, Z
		spi->module->DATA = data;
    1bf2:	e8 81       	ld	r30, Y
    1bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf6:	83 83       	std	Z+3, r24	; 0x03

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
    1bf8:	e8 81       	ld	r30, Y
    1bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	87 ff       	sbrs	r24, 7
    1c00:	fd cf       	rjmp	.-6      	; 0x1bfc <SPI_MasterTransceivePacket+0x44>

		}
		/* Read received data. */
		data = spi->module->DATA;
    1c02:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    1c04:	ed 81       	ldd	r30, Y+5	; 0x05
    1c06:	fe 81       	ldd	r31, Y+6	; 0x06
    1c08:	05 80       	ldd	r0, Z+5	; 0x05
    1c0a:	f6 81       	ldd	r31, Z+6	; 0x06
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	e2 0f       	add	r30, r18
    1c10:	f3 1f       	adc	r31, r19
    1c12:	80 83       	st	Z, r24

		bytesTransceived++;
    1c14:	9f 5f       	subi	r25, 0xFF	; 255
    1c16:	ed 81       	ldd	r30, Y+5	; 0x05
    1c18:	fe 81       	ldd	r31, Y+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
    1c1a:	96 17       	cp	r25, r22
    1c1c:	10 f3       	brcs	.-60     	; 0x1be2 <SPI_MasterTransceivePacket+0x2a>

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    1c1e:	01 90       	ld	r0, Z+
    1c20:	f0 81       	ld	r31, Z
    1c22:	e0 2d       	mov	r30, r0
    1c24:	30 97       	sbiw	r30, 0x00	; 0
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <SPI_MasterTransceivePacket+0x72>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    1c28:	45 83       	std	Z+5, r20	; 0x05
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    1c2a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2e:	60 87       	std	Z+8, r22	; 0x08
	spi->dataPacket->complete = true;
    1c30:	ed 81       	ldd	r30, Y+5	; 0x05
    1c32:	fe 81       	ldd	r31, Y+6	; 0x06
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	08 95       	ret

00001c3e <__mulsi3>:
    1c3e:	62 9f       	mul	r22, r18
    1c40:	d0 01       	movw	r26, r0
    1c42:	73 9f       	mul	r23, r19
    1c44:	f0 01       	movw	r30, r0
    1c46:	82 9f       	mul	r24, r18
    1c48:	e0 0d       	add	r30, r0
    1c4a:	f1 1d       	adc	r31, r1
    1c4c:	64 9f       	mul	r22, r20
    1c4e:	e0 0d       	add	r30, r0
    1c50:	f1 1d       	adc	r31, r1
    1c52:	92 9f       	mul	r25, r18
    1c54:	f0 0d       	add	r31, r0
    1c56:	83 9f       	mul	r24, r19
    1c58:	f0 0d       	add	r31, r0
    1c5a:	74 9f       	mul	r23, r20
    1c5c:	f0 0d       	add	r31, r0
    1c5e:	65 9f       	mul	r22, r21
    1c60:	f0 0d       	add	r31, r0
    1c62:	99 27       	eor	r25, r25
    1c64:	72 9f       	mul	r23, r18
    1c66:	b0 0d       	add	r27, r0
    1c68:	e1 1d       	adc	r30, r1
    1c6a:	f9 1f       	adc	r31, r25
    1c6c:	63 9f       	mul	r22, r19
    1c6e:	b0 0d       	add	r27, r0
    1c70:	e1 1d       	adc	r30, r1
    1c72:	f9 1f       	adc	r31, r25
    1c74:	bd 01       	movw	r22, r26
    1c76:	cf 01       	movw	r24, r30
    1c78:	11 24       	eor	r1, r1
    1c7a:	08 95       	ret

00001c7c <__divmodhi4>:
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	09 2e       	mov	r0, r25
    1c80:	07 26       	eor	r0, r23
    1c82:	0a d0       	rcall	.+20     	; 0x1c98 <__divmodhi4_neg1>
    1c84:	77 fd       	sbrc	r23, 7
    1c86:	04 d0       	rcall	.+8      	; 0x1c90 <__divmodhi4_neg2>
    1c88:	2e d0       	rcall	.+92     	; 0x1ce6 <__udivmodhi4>
    1c8a:	06 d0       	rcall	.+12     	; 0x1c98 <__divmodhi4_neg1>
    1c8c:	00 20       	and	r0, r0
    1c8e:	1a f4       	brpl	.+6      	; 0x1c96 <__divmodhi4_exit>

00001c90 <__divmodhi4_neg2>:
    1c90:	70 95       	com	r23
    1c92:	61 95       	neg	r22
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255

00001c96 <__divmodhi4_exit>:
    1c96:	08 95       	ret

00001c98 <__divmodhi4_neg1>:
    1c98:	f6 f7       	brtc	.-4      	; 0x1c96 <__divmodhi4_exit>
    1c9a:	90 95       	com	r25
    1c9c:	81 95       	neg	r24
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	08 95       	ret

00001ca2 <__udivmodsi4>:
    1ca2:	a1 e2       	ldi	r26, 0x21	; 33
    1ca4:	1a 2e       	mov	r1, r26
    1ca6:	aa 1b       	sub	r26, r26
    1ca8:	bb 1b       	sub	r27, r27
    1caa:	fd 01       	movw	r30, r26
    1cac:	0d c0       	rjmp	.+26     	; 0x1cc8 <__udivmodsi4_ep>

00001cae <__udivmodsi4_loop>:
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	ee 1f       	adc	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	a2 17       	cp	r26, r18
    1cb8:	b3 07       	cpc	r27, r19
    1cba:	e4 07       	cpc	r30, r20
    1cbc:	f5 07       	cpc	r31, r21
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <__udivmodsi4_ep>
    1cc0:	a2 1b       	sub	r26, r18
    1cc2:	b3 0b       	sbc	r27, r19
    1cc4:	e4 0b       	sbc	r30, r20
    1cc6:	f5 0b       	sbc	r31, r21

00001cc8 <__udivmodsi4_ep>:
    1cc8:	66 1f       	adc	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	1a 94       	dec	r1
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <__udivmodsi4_loop>
    1cd4:	60 95       	com	r22
    1cd6:	70 95       	com	r23
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	bd 01       	movw	r22, r26
    1ce2:	cf 01       	movw	r24, r30
    1ce4:	08 95       	ret

00001ce6 <__udivmodhi4>:
    1ce6:	aa 1b       	sub	r26, r26
    1ce8:	bb 1b       	sub	r27, r27
    1cea:	51 e1       	ldi	r21, 0x11	; 17
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <__udivmodhi4_ep>

00001cee <__udivmodhi4_loop>:
    1cee:	aa 1f       	adc	r26, r26
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	a6 17       	cp	r26, r22
    1cf4:	b7 07       	cpc	r27, r23
    1cf6:	10 f0       	brcs	.+4      	; 0x1cfc <__udivmodhi4_ep>
    1cf8:	a6 1b       	sub	r26, r22
    1cfa:	b7 0b       	sbc	r27, r23

00001cfc <__udivmodhi4_ep>:
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	5a 95       	dec	r21
    1d02:	a9 f7       	brne	.-22     	; 0x1cee <__udivmodhi4_loop>
    1d04:	80 95       	com	r24
    1d06:	90 95       	com	r25
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	08 95       	ret

00001d0e <sprintf>:
    1d0e:	ae e0       	ldi	r26, 0x0E	; 14
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	ed e8       	ldi	r30, 0x8D	; 141
    1d14:	fe e0       	ldi	r31, 0x0E	; 14
    1d16:	0c 94 36 11 	jmp	0x226c	; 0x226c <__prologue_saves__+0x1c>
    1d1a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d1c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	8c 83       	std	Y+4, r24	; 0x04
    1d22:	09 83       	std	Y+1, r16	; 0x01
    1d24:	1a 83       	std	Y+2, r17	; 0x02
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	9f e7       	ldi	r25, 0x7F	; 127
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	9e 01       	movw	r18, r28
    1d30:	27 5e       	subi	r18, 0xE7	; 231
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	6f 89       	ldd	r22, Y+23	; 0x17
    1d3a:	78 8d       	ldd	r23, Y+24	; 0x18
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <vfprintf>
    1d42:	2f 81       	ldd	r18, Y+7	; 0x07
    1d44:	38 85       	ldd	r19, Y+8	; 0x08
    1d46:	02 0f       	add	r16, r18
    1d48:	13 1f       	adc	r17, r19
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	10 82       	st	Z, r1
    1d4e:	2e 96       	adiw	r28, 0x0e	; 14
    1d50:	e4 e0       	ldi	r30, 0x04	; 4
    1d52:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__epilogue_restores__+0x1c>

00001d56 <vfprintf>:
    1d56:	ab e0       	ldi	r26, 0x0B	; 11
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1d5c:	fe e0       	ldi	r31, 0x0E	; 14
    1d5e:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__prologue_saves__>
    1d62:	3c 01       	movw	r6, r24
    1d64:	2b 01       	movw	r4, r22
    1d66:	5a 01       	movw	r10, r20
    1d68:	fc 01       	movw	r30, r24
    1d6a:	16 82       	std	Z+6, r1	; 0x06
    1d6c:	17 82       	std	Z+7, r1	; 0x07
    1d6e:	83 81       	ldd	r24, Z+3	; 0x03
    1d70:	81 fd       	sbrc	r24, 1
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <vfprintf+0x24>
    1d74:	6f ef       	ldi	r22, 0xFF	; 255
    1d76:	7f ef       	ldi	r23, 0xFF	; 255
    1d78:	c6 c1       	rjmp	.+908    	; 0x2106 <vfprintf+0x3b0>
    1d7a:	9a e0       	ldi	r25, 0x0A	; 10
    1d7c:	89 2e       	mov	r8, r25
    1d7e:	1e 01       	movw	r2, r28
    1d80:	08 94       	sec
    1d82:	21 1c       	adc	r2, r1
    1d84:	31 1c       	adc	r3, r1
    1d86:	f3 01       	movw	r30, r6
    1d88:	23 81       	ldd	r18, Z+3	; 0x03
    1d8a:	f2 01       	movw	r30, r4
    1d8c:	23 fd       	sbrc	r18, 3
    1d8e:	85 91       	lpm	r24, Z+
    1d90:	23 ff       	sbrs	r18, 3
    1d92:	81 91       	ld	r24, Z+
    1d94:	2f 01       	movw	r4, r30
    1d96:	88 23       	and	r24, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <vfprintf+0x46>
    1d9a:	b2 c1       	rjmp	.+868    	; 0x2100 <vfprintf+0x3aa>
    1d9c:	85 32       	cpi	r24, 0x25	; 37
    1d9e:	39 f4       	brne	.+14     	; 0x1dae <vfprintf+0x58>
    1da0:	23 fd       	sbrc	r18, 3
    1da2:	85 91       	lpm	r24, Z+
    1da4:	23 ff       	sbrs	r18, 3
    1da6:	81 91       	ld	r24, Z+
    1da8:	2f 01       	movw	r4, r30
    1daa:	85 32       	cpi	r24, 0x25	; 37
    1dac:	29 f4       	brne	.+10     	; 0x1db8 <vfprintf+0x62>
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	b3 01       	movw	r22, r6
    1db2:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    1db6:	e7 cf       	rjmp	.-50     	; 0x1d86 <vfprintf+0x30>
    1db8:	98 2f       	mov	r25, r24
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	99 24       	eor	r9, r9
    1dc0:	ff e1       	ldi	r31, 0x1F	; 31
    1dc2:	ff 15       	cp	r31, r15
    1dc4:	d0 f0       	brcs	.+52     	; 0x1dfa <vfprintf+0xa4>
    1dc6:	9b 32       	cpi	r25, 0x2B	; 43
    1dc8:	69 f0       	breq	.+26     	; 0x1de4 <vfprintf+0x8e>
    1dca:	9c 32       	cpi	r25, 0x2C	; 44
    1dcc:	28 f4       	brcc	.+10     	; 0x1dd8 <vfprintf+0x82>
    1dce:	90 32       	cpi	r25, 0x20	; 32
    1dd0:	59 f0       	breq	.+22     	; 0x1de8 <vfprintf+0x92>
    1dd2:	93 32       	cpi	r25, 0x23	; 35
    1dd4:	91 f4       	brne	.+36     	; 0x1dfa <vfprintf+0xa4>
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <vfprintf+0x9e>
    1dd8:	9d 32       	cpi	r25, 0x2D	; 45
    1dda:	49 f0       	breq	.+18     	; 0x1dee <vfprintf+0x98>
    1ddc:	90 33       	cpi	r25, 0x30	; 48
    1dde:	69 f4       	brne	.+26     	; 0x1dfa <vfprintf+0xa4>
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	24 c0       	rjmp	.+72     	; 0x1e2c <vfprintf+0xd6>
    1de4:	52 e0       	ldi	r21, 0x02	; 2
    1de6:	f5 2a       	or	r15, r21
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	f8 2a       	or	r15, r24
    1dec:	28 c0       	rjmp	.+80     	; 0x1e3e <vfprintf+0xe8>
    1dee:	98 e0       	ldi	r25, 0x08	; 8
    1df0:	f9 2a       	or	r15, r25
    1df2:	25 c0       	rjmp	.+74     	; 0x1e3e <vfprintf+0xe8>
    1df4:	e0 e1       	ldi	r30, 0x10	; 16
    1df6:	fe 2a       	or	r15, r30
    1df8:	22 c0       	rjmp	.+68     	; 0x1e3e <vfprintf+0xe8>
    1dfa:	f7 fc       	sbrc	r15, 7
    1dfc:	29 c0       	rjmp	.+82     	; 0x1e50 <vfprintf+0xfa>
    1dfe:	89 2f       	mov	r24, r25
    1e00:	80 53       	subi	r24, 0x30	; 48
    1e02:	8a 30       	cpi	r24, 0x0A	; 10
    1e04:	70 f4       	brcc	.+28     	; 0x1e22 <vfprintf+0xcc>
    1e06:	f6 fe       	sbrs	r15, 6
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <vfprintf+0xbe>
    1e0a:	98 9c       	mul	r9, r8
    1e0c:	90 2c       	mov	r9, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	98 0e       	add	r9, r24
    1e12:	15 c0       	rjmp	.+42     	; 0x1e3e <vfprintf+0xe8>
    1e14:	e8 9c       	mul	r14, r8
    1e16:	e0 2c       	mov	r14, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	e8 0e       	add	r14, r24
    1e1c:	f0 e2       	ldi	r31, 0x20	; 32
    1e1e:	ff 2a       	or	r15, r31
    1e20:	0e c0       	rjmp	.+28     	; 0x1e3e <vfprintf+0xe8>
    1e22:	9e 32       	cpi	r25, 0x2E	; 46
    1e24:	29 f4       	brne	.+10     	; 0x1e30 <vfprintf+0xda>
    1e26:	f6 fc       	sbrc	r15, 6
    1e28:	6b c1       	rjmp	.+726    	; 0x2100 <vfprintf+0x3aa>
    1e2a:	40 e4       	ldi	r20, 0x40	; 64
    1e2c:	f4 2a       	or	r15, r20
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <vfprintf+0xe8>
    1e30:	9c 36       	cpi	r25, 0x6C	; 108
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <vfprintf+0xe4>
    1e34:	50 e8       	ldi	r21, 0x80	; 128
    1e36:	f5 2a       	or	r15, r21
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <vfprintf+0xe8>
    1e3a:	98 36       	cpi	r25, 0x68	; 104
    1e3c:	49 f4       	brne	.+18     	; 0x1e50 <vfprintf+0xfa>
    1e3e:	f2 01       	movw	r30, r4
    1e40:	23 fd       	sbrc	r18, 3
    1e42:	95 91       	lpm	r25, Z+
    1e44:	23 ff       	sbrs	r18, 3
    1e46:	91 91       	ld	r25, Z+
    1e48:	2f 01       	movw	r4, r30
    1e4a:	99 23       	and	r25, r25
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <vfprintf+0xfa>
    1e4e:	b8 cf       	rjmp	.-144    	; 0x1dc0 <vfprintf+0x6a>
    1e50:	89 2f       	mov	r24, r25
    1e52:	85 54       	subi	r24, 0x45	; 69
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	18 f0       	brcs	.+6      	; 0x1e5e <vfprintf+0x108>
    1e58:	80 52       	subi	r24, 0x20	; 32
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	38 f4       	brcc	.+14     	; 0x1e6c <vfprintf+0x116>
    1e5e:	44 e0       	ldi	r20, 0x04	; 4
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	a4 0e       	add	r10, r20
    1e64:	b5 1e       	adc	r11, r21
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	59 83       	std	Y+1, r21	; 0x01
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <vfprintf+0x134>
    1e6c:	93 36       	cpi	r25, 0x63	; 99
    1e6e:	31 f0       	breq	.+12     	; 0x1e7c <vfprintf+0x126>
    1e70:	93 37       	cpi	r25, 0x73	; 115
    1e72:	79 f0       	breq	.+30     	; 0x1e92 <vfprintf+0x13c>
    1e74:	93 35       	cpi	r25, 0x53	; 83
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <vfprintf+0x124>
    1e78:	56 c0       	rjmp	.+172    	; 0x1f26 <vfprintf+0x1d0>
    1e7a:	20 c0       	rjmp	.+64     	; 0x1ebc <vfprintf+0x166>
    1e7c:	f5 01       	movw	r30, r10
    1e7e:	80 81       	ld	r24, Z
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	42 e0       	ldi	r20, 0x02	; 2
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	a4 0e       	add	r10, r20
    1e88:	b5 1e       	adc	r11, r21
    1e8a:	61 01       	movw	r12, r2
    1e8c:	01 e0       	ldi	r16, 0x01	; 1
    1e8e:	10 e0       	ldi	r17, 0x00	; 0
    1e90:	12 c0       	rjmp	.+36     	; 0x1eb6 <vfprintf+0x160>
    1e92:	f5 01       	movw	r30, r10
    1e94:	c0 80       	ld	r12, Z
    1e96:	d1 80       	ldd	r13, Z+1	; 0x01
    1e98:	f6 fc       	sbrc	r15, 6
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <vfprintf+0x14c>
    1e9c:	6f ef       	ldi	r22, 0xFF	; 255
    1e9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <vfprintf+0x150>
    1ea2:	69 2d       	mov	r22, r9
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	42 e0       	ldi	r20, 0x02	; 2
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	a4 0e       	add	r10, r20
    1eac:	b5 1e       	adc	r11, r21
    1eae:	c6 01       	movw	r24, r12
    1eb0:	0e 94 93 10 	call	0x2126	; 0x2126 <strnlen>
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	5f e7       	ldi	r21, 0x7F	; 127
    1eb8:	f5 22       	and	r15, r21
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <vfprintf+0x18e>
    1ebc:	f5 01       	movw	r30, r10
    1ebe:	c0 80       	ld	r12, Z
    1ec0:	d1 80       	ldd	r13, Z+1	; 0x01
    1ec2:	f6 fc       	sbrc	r15, 6
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <vfprintf+0x176>
    1ec6:	6f ef       	ldi	r22, 0xFF	; 255
    1ec8:	7f ef       	ldi	r23, 0xFF	; 255
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <vfprintf+0x17a>
    1ecc:	69 2d       	mov	r22, r9
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	42 e0       	ldi	r20, 0x02	; 2
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	a4 0e       	add	r10, r20
    1ed6:	b5 1e       	adc	r11, r21
    1ed8:	c6 01       	movw	r24, r12
    1eda:	0e 94 88 10 	call	0x2110	; 0x2110 <strnlen_P>
    1ede:	8c 01       	movw	r16, r24
    1ee0:	50 e8       	ldi	r21, 0x80	; 128
    1ee2:	f5 2a       	or	r15, r21
    1ee4:	f3 fe       	sbrs	r15, 3
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <vfprintf+0x1a0>
    1ee8:	1a c0       	rjmp	.+52     	; 0x1f1e <vfprintf+0x1c8>
    1eea:	80 e2       	ldi	r24, 0x20	; 32
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	b3 01       	movw	r22, r6
    1ef0:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    1ef4:	ea 94       	dec	r14
    1ef6:	8e 2d       	mov	r24, r14
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	08 17       	cp	r16, r24
    1efc:	19 07       	cpc	r17, r25
    1efe:	a8 f3       	brcs	.-22     	; 0x1eea <vfprintf+0x194>
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <vfprintf+0x1c8>
    1f02:	f6 01       	movw	r30, r12
    1f04:	f7 fc       	sbrc	r15, 7
    1f06:	85 91       	lpm	r24, Z+
    1f08:	f7 fe       	sbrs	r15, 7
    1f0a:	81 91       	ld	r24, Z+
    1f0c:	6f 01       	movw	r12, r30
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	b3 01       	movw	r22, r6
    1f12:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    1f16:	e1 10       	cpse	r14, r1
    1f18:	ea 94       	dec	r14
    1f1a:	01 50       	subi	r16, 0x01	; 1
    1f1c:	10 40       	sbci	r17, 0x00	; 0
    1f1e:	01 15       	cp	r16, r1
    1f20:	11 05       	cpc	r17, r1
    1f22:	79 f7       	brne	.-34     	; 0x1f02 <vfprintf+0x1ac>
    1f24:	ea c0       	rjmp	.+468    	; 0x20fa <vfprintf+0x3a4>
    1f26:	94 36       	cpi	r25, 0x64	; 100
    1f28:	11 f0       	breq	.+4      	; 0x1f2e <vfprintf+0x1d8>
    1f2a:	99 36       	cpi	r25, 0x69	; 105
    1f2c:	69 f5       	brne	.+90     	; 0x1f88 <vfprintf+0x232>
    1f2e:	f7 fe       	sbrs	r15, 7
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <vfprintf+0x1ec>
    1f32:	f5 01       	movw	r30, r10
    1f34:	20 81       	ld	r18, Z
    1f36:	31 81       	ldd	r19, Z+1	; 0x01
    1f38:	42 81       	ldd	r20, Z+2	; 0x02
    1f3a:	53 81       	ldd	r21, Z+3	; 0x03
    1f3c:	84 e0       	ldi	r24, 0x04	; 4
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <vfprintf+0x200>
    1f42:	f5 01       	movw	r30, r10
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	9c 01       	movw	r18, r24
    1f4a:	44 27       	eor	r20, r20
    1f4c:	37 fd       	sbrc	r19, 7
    1f4e:	40 95       	com	r20
    1f50:	54 2f       	mov	r21, r20
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a8 0e       	add	r10, r24
    1f58:	b9 1e       	adc	r11, r25
    1f5a:	9f e6       	ldi	r25, 0x6F	; 111
    1f5c:	f9 22       	and	r15, r25
    1f5e:	57 ff       	sbrs	r21, 7
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <vfprintf+0x21e>
    1f62:	50 95       	com	r21
    1f64:	40 95       	com	r20
    1f66:	30 95       	com	r19
    1f68:	21 95       	neg	r18
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	e0 e8       	ldi	r30, 0x80	; 128
    1f72:	fe 2a       	or	r15, r30
    1f74:	ca 01       	movw	r24, r20
    1f76:	b9 01       	movw	r22, r18
    1f78:	a1 01       	movw	r20, r2
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	0e 94 ca 10 	call	0x2194	; 0x2194 <__ultoa_invert>
    1f82:	d8 2e       	mov	r13, r24
    1f84:	d2 18       	sub	r13, r2
    1f86:	40 c0       	rjmp	.+128    	; 0x2008 <vfprintf+0x2b2>
    1f88:	95 37       	cpi	r25, 0x75	; 117
    1f8a:	29 f4       	brne	.+10     	; 0x1f96 <vfprintf+0x240>
    1f8c:	1f 2d       	mov	r17, r15
    1f8e:	1f 7e       	andi	r17, 0xEF	; 239
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	1d c0       	rjmp	.+58     	; 0x1fd0 <vfprintf+0x27a>
    1f96:	1f 2d       	mov	r17, r15
    1f98:	19 7f       	andi	r17, 0xF9	; 249
    1f9a:	9f 36       	cpi	r25, 0x6F	; 111
    1f9c:	61 f0       	breq	.+24     	; 0x1fb6 <vfprintf+0x260>
    1f9e:	90 37       	cpi	r25, 0x70	; 112
    1fa0:	20 f4       	brcc	.+8      	; 0x1faa <vfprintf+0x254>
    1fa2:	98 35       	cpi	r25, 0x58	; 88
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <vfprintf+0x252>
    1fa6:	ac c0       	rjmp	.+344    	; 0x2100 <vfprintf+0x3aa>
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <vfprintf+0x272>
    1faa:	90 37       	cpi	r25, 0x70	; 112
    1fac:	39 f0       	breq	.+14     	; 0x1fbc <vfprintf+0x266>
    1fae:	98 37       	cpi	r25, 0x78	; 120
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <vfprintf+0x25e>
    1fb2:	a6 c0       	rjmp	.+332    	; 0x2100 <vfprintf+0x3aa>
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <vfprintf+0x268>
    1fb6:	28 e0       	ldi	r18, 0x08	; 8
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	0a c0       	rjmp	.+20     	; 0x1fd0 <vfprintf+0x27a>
    1fbc:	10 61       	ori	r17, 0x10	; 16
    1fbe:	14 fd       	sbrc	r17, 4
    1fc0:	14 60       	ori	r17, 0x04	; 4
    1fc2:	20 e1       	ldi	r18, 0x10	; 16
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <vfprintf+0x27a>
    1fc8:	14 fd       	sbrc	r17, 4
    1fca:	16 60       	ori	r17, 0x06	; 6
    1fcc:	20 e1       	ldi	r18, 0x10	; 16
    1fce:	32 e0       	ldi	r19, 0x02	; 2
    1fd0:	17 ff       	sbrs	r17, 7
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <vfprintf+0x28e>
    1fd4:	f5 01       	movw	r30, r10
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	44 e0       	ldi	r20, 0x04	; 4
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <vfprintf+0x29e>
    1fe4:	f5 01       	movw	r30, r10
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	bc 01       	movw	r22, r24
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	42 e0       	ldi	r20, 0x02	; 2
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	a4 0e       	add	r10, r20
    1ff6:	b5 1e       	adc	r11, r21
    1ff8:	a1 01       	movw	r20, r2
    1ffa:	0e 94 ca 10 	call	0x2194	; 0x2194 <__ultoa_invert>
    1ffe:	d8 2e       	mov	r13, r24
    2000:	d2 18       	sub	r13, r2
    2002:	8f e7       	ldi	r24, 0x7F	; 127
    2004:	f8 2e       	mov	r15, r24
    2006:	f1 22       	and	r15, r17
    2008:	f6 fe       	sbrs	r15, 6
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <vfprintf+0x2cc>
    200c:	5e ef       	ldi	r21, 0xFE	; 254
    200e:	f5 22       	and	r15, r21
    2010:	d9 14       	cp	r13, r9
    2012:	38 f4       	brcc	.+14     	; 0x2022 <vfprintf+0x2cc>
    2014:	f4 fe       	sbrs	r15, 4
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <vfprintf+0x2d0>
    2018:	f2 fc       	sbrc	r15, 2
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <vfprintf+0x2d0>
    201c:	8f ee       	ldi	r24, 0xEF	; 239
    201e:	f8 22       	and	r15, r24
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0x2d0>
    2022:	1d 2d       	mov	r17, r13
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <vfprintf+0x2d2>
    2026:	19 2d       	mov	r17, r9
    2028:	f4 fe       	sbrs	r15, 4
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <vfprintf+0x2f0>
    202c:	fe 01       	movw	r30, r28
    202e:	ed 0d       	add	r30, r13
    2030:	f1 1d       	adc	r31, r1
    2032:	80 81       	ld	r24, Z
    2034:	80 33       	cpi	r24, 0x30	; 48
    2036:	19 f4       	brne	.+6      	; 0x203e <vfprintf+0x2e8>
    2038:	99 ee       	ldi	r25, 0xE9	; 233
    203a:	f9 22       	and	r15, r25
    203c:	08 c0       	rjmp	.+16     	; 0x204e <vfprintf+0x2f8>
    203e:	1f 5f       	subi	r17, 0xFF	; 255
    2040:	f2 fe       	sbrs	r15, 2
    2042:	05 c0       	rjmp	.+10     	; 0x204e <vfprintf+0x2f8>
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x2f6>
    2046:	8f 2d       	mov	r24, r15
    2048:	86 78       	andi	r24, 0x86	; 134
    204a:	09 f0       	breq	.+2      	; 0x204e <vfprintf+0x2f8>
    204c:	1f 5f       	subi	r17, 0xFF	; 255
    204e:	0f 2d       	mov	r16, r15
    2050:	f3 fc       	sbrc	r15, 3
    2052:	14 c0       	rjmp	.+40     	; 0x207c <vfprintf+0x326>
    2054:	f0 fe       	sbrs	r15, 0
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <vfprintf+0x320>
    2058:	1e 15       	cp	r17, r14
    205a:	10 f0       	brcs	.+4      	; 0x2060 <vfprintf+0x30a>
    205c:	9d 2c       	mov	r9, r13
    205e:	0b c0       	rjmp	.+22     	; 0x2076 <vfprintf+0x320>
    2060:	9d 2c       	mov	r9, r13
    2062:	9e 0c       	add	r9, r14
    2064:	91 1a       	sub	r9, r17
    2066:	1e 2d       	mov	r17, r14
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <vfprintf+0x320>
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	b3 01       	movw	r22, r6
    2070:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    2074:	1f 5f       	subi	r17, 0xFF	; 255
    2076:	1e 15       	cp	r17, r14
    2078:	c0 f3       	brcs	.-16     	; 0x206a <vfprintf+0x314>
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <vfprintf+0x32e>
    207c:	1e 15       	cp	r17, r14
    207e:	10 f4       	brcc	.+4      	; 0x2084 <vfprintf+0x32e>
    2080:	e1 1a       	sub	r14, r17
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <vfprintf+0x330>
    2084:	ee 24       	eor	r14, r14
    2086:	04 ff       	sbrs	r16, 4
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <vfprintf+0x352>
    208a:	80 e3       	ldi	r24, 0x30	; 48
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	b3 01       	movw	r22, r6
    2090:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    2094:	02 ff       	sbrs	r16, 2
    2096:	1d c0       	rjmp	.+58     	; 0x20d2 <vfprintf+0x37c>
    2098:	01 fd       	sbrc	r16, 1
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <vfprintf+0x34c>
    209c:	88 e7       	ldi	r24, 0x78	; 120
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <vfprintf+0x368>
    20a2:	88 e5       	ldi	r24, 0x58	; 88
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0b c0       	rjmp	.+22     	; 0x20be <vfprintf+0x368>
    20a8:	80 2f       	mov	r24, r16
    20aa:	86 78       	andi	r24, 0x86	; 134
    20ac:	91 f0       	breq	.+36     	; 0x20d2 <vfprintf+0x37c>
    20ae:	01 ff       	sbrs	r16, 1
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x360>
    20b2:	8b e2       	ldi	r24, 0x2B	; 43
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <vfprintf+0x362>
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	f7 fc       	sbrc	r15, 7
    20ba:	8d e2       	ldi	r24, 0x2D	; 45
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	b3 01       	movw	r22, r6
    20c0:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <vfprintf+0x37c>
    20c6:	80 e3       	ldi	r24, 0x30	; 48
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	b3 01       	movw	r22, r6
    20cc:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    20d0:	9a 94       	dec	r9
    20d2:	d9 14       	cp	r13, r9
    20d4:	c0 f3       	brcs	.-16     	; 0x20c6 <vfprintf+0x370>
    20d6:	da 94       	dec	r13
    20d8:	f1 01       	movw	r30, r2
    20da:	ed 0d       	add	r30, r13
    20dc:	f1 1d       	adc	r31, r1
    20de:	80 81       	ld	r24, Z
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	b3 01       	movw	r22, r6
    20e4:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    20e8:	dd 20       	and	r13, r13
    20ea:	a9 f7       	brne	.-22     	; 0x20d6 <vfprintf+0x380>
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <vfprintf+0x3a4>
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	b3 01       	movw	r22, r6
    20f4:	0e 94 9e 10 	call	0x213c	; 0x213c <fputc>
    20f8:	ea 94       	dec	r14
    20fa:	ee 20       	and	r14, r14
    20fc:	c1 f7       	brne	.-16     	; 0x20ee <vfprintf+0x398>
    20fe:	43 ce       	rjmp	.-890    	; 0x1d86 <vfprintf+0x30>
    2100:	f3 01       	movw	r30, r6
    2102:	66 81       	ldd	r22, Z+6	; 0x06
    2104:	77 81       	ldd	r23, Z+7	; 0x07
    2106:	cb 01       	movw	r24, r22
    2108:	2b 96       	adiw	r28, 0x0b	; 11
    210a:	e2 e1       	ldi	r30, 0x12	; 18
    210c:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__epilogue_restores__>

00002110 <strnlen_P>:
    2110:	fc 01       	movw	r30, r24
    2112:	05 90       	lpm	r0, Z+
    2114:	61 50       	subi	r22, 0x01	; 1
    2116:	70 40       	sbci	r23, 0x00	; 0
    2118:	01 10       	cpse	r0, r1
    211a:	d8 f7       	brcc	.-10     	; 0x2112 <strnlen_P+0x2>
    211c:	80 95       	com	r24
    211e:	90 95       	com	r25
    2120:	8e 0f       	add	r24, r30
    2122:	9f 1f       	adc	r25, r31
    2124:	08 95       	ret

00002126 <strnlen>:
    2126:	fc 01       	movw	r30, r24
    2128:	61 50       	subi	r22, 0x01	; 1
    212a:	70 40       	sbci	r23, 0x00	; 0
    212c:	01 90       	ld	r0, Z+
    212e:	01 10       	cpse	r0, r1
    2130:	d8 f7       	brcc	.-10     	; 0x2128 <strnlen+0x2>
    2132:	80 95       	com	r24
    2134:	90 95       	com	r25
    2136:	8e 0f       	add	r24, r30
    2138:	9f 1f       	adc	r25, r31
    213a:	08 95       	ret

0000213c <fputc>:
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	8c 01       	movw	r16, r24
    2146:	eb 01       	movw	r28, r22
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	81 ff       	sbrs	r24, 1
    214c:	1b c0       	rjmp	.+54     	; 0x2184 <fputc+0x48>
    214e:	82 ff       	sbrs	r24, 2
    2150:	0d c0       	rjmp	.+26     	; 0x216c <fputc+0x30>
    2152:	2e 81       	ldd	r18, Y+6	; 0x06
    2154:	3f 81       	ldd	r19, Y+7	; 0x07
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	64 f4       	brge	.+24     	; 0x2178 <fputc+0x3c>
    2160:	e8 81       	ld	r30, Y
    2162:	f9 81       	ldd	r31, Y+1	; 0x01
    2164:	01 93       	st	Z+, r16
    2166:	e8 83       	st	Y, r30
    2168:	f9 83       	std	Y+1, r31	; 0x01
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <fputc+0x3c>
    216c:	e8 85       	ldd	r30, Y+8	; 0x08
    216e:	f9 85       	ldd	r31, Y+9	; 0x09
    2170:	80 2f       	mov	r24, r16
    2172:	09 95       	icall
    2174:	89 2b       	or	r24, r25
    2176:	31 f4       	brne	.+12     	; 0x2184 <fputc+0x48>
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	9f 81       	ldd	r25, Y+7	; 0x07
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	8e 83       	std	Y+6, r24	; 0x06
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <fputc+0x4c>
    2184:	0f ef       	ldi	r16, 0xFF	; 255
    2186:	1f ef       	ldi	r17, 0xFF	; 255
    2188:	c8 01       	movw	r24, r16
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

00002194 <__ultoa_invert>:
    2194:	fa 01       	movw	r30, r20
    2196:	aa 27       	eor	r26, r26
    2198:	28 30       	cpi	r18, 0x08	; 8
    219a:	51 f1       	breq	.+84     	; 0x21f0 <__ultoa_invert+0x5c>
    219c:	20 31       	cpi	r18, 0x10	; 16
    219e:	81 f1       	breq	.+96     	; 0x2200 <__ultoa_invert+0x6c>
    21a0:	e8 94       	clt
    21a2:	6f 93       	push	r22
    21a4:	6e 7f       	andi	r22, 0xFE	; 254
    21a6:	6e 5f       	subi	r22, 0xFE	; 254
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	8f 4f       	sbci	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	af 4f       	sbci	r26, 0xFF	; 255
    21b0:	b1 e0       	ldi	r27, 0x01	; 1
    21b2:	3e d0       	rcall	.+124    	; 0x2230 <__ultoa_invert+0x9c>
    21b4:	b4 e0       	ldi	r27, 0x04	; 4
    21b6:	3c d0       	rcall	.+120    	; 0x2230 <__ultoa_invert+0x9c>
    21b8:	67 0f       	add	r22, r23
    21ba:	78 1f       	adc	r23, r24
    21bc:	89 1f       	adc	r24, r25
    21be:	9a 1f       	adc	r25, r26
    21c0:	a1 1d       	adc	r26, r1
    21c2:	68 0f       	add	r22, r24
    21c4:	79 1f       	adc	r23, r25
    21c6:	8a 1f       	adc	r24, r26
    21c8:	91 1d       	adc	r25, r1
    21ca:	a1 1d       	adc	r26, r1
    21cc:	6a 0f       	add	r22, r26
    21ce:	71 1d       	adc	r23, r1
    21d0:	81 1d       	adc	r24, r1
    21d2:	91 1d       	adc	r25, r1
    21d4:	a1 1d       	adc	r26, r1
    21d6:	20 d0       	rcall	.+64     	; 0x2218 <__ultoa_invert+0x84>
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__ultoa_invert+0x48>
    21da:	68 94       	set
    21dc:	3f 91       	pop	r19
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	26 9f       	mul	r18, r22
    21e2:	11 24       	eor	r1, r1
    21e4:	30 19       	sub	r19, r0
    21e6:	30 5d       	subi	r19, 0xD0	; 208
    21e8:	31 93       	st	Z+, r19
    21ea:	de f6       	brtc	.-74     	; 0x21a2 <__ultoa_invert+0xe>
    21ec:	cf 01       	movw	r24, r30
    21ee:	08 95       	ret
    21f0:	46 2f       	mov	r20, r22
    21f2:	47 70       	andi	r20, 0x07	; 7
    21f4:	40 5d       	subi	r20, 0xD0	; 208
    21f6:	41 93       	st	Z+, r20
    21f8:	b3 e0       	ldi	r27, 0x03	; 3
    21fa:	0f d0       	rcall	.+30     	; 0x221a <__ultoa_invert+0x86>
    21fc:	c9 f7       	brne	.-14     	; 0x21f0 <__ultoa_invert+0x5c>
    21fe:	f6 cf       	rjmp	.-20     	; 0x21ec <__ultoa_invert+0x58>
    2200:	46 2f       	mov	r20, r22
    2202:	4f 70       	andi	r20, 0x0F	; 15
    2204:	40 5d       	subi	r20, 0xD0	; 208
    2206:	4a 33       	cpi	r20, 0x3A	; 58
    2208:	18 f0       	brcs	.+6      	; 0x2210 <__ultoa_invert+0x7c>
    220a:	49 5d       	subi	r20, 0xD9	; 217
    220c:	31 fd       	sbrc	r19, 1
    220e:	40 52       	subi	r20, 0x20	; 32
    2210:	41 93       	st	Z+, r20
    2212:	02 d0       	rcall	.+4      	; 0x2218 <__ultoa_invert+0x84>
    2214:	a9 f7       	brne	.-22     	; 0x2200 <__ultoa_invert+0x6c>
    2216:	ea cf       	rjmp	.-44     	; 0x21ec <__ultoa_invert+0x58>
    2218:	b4 e0       	ldi	r27, 0x04	; 4
    221a:	a6 95       	lsr	r26
    221c:	97 95       	ror	r25
    221e:	87 95       	ror	r24
    2220:	77 95       	ror	r23
    2222:	67 95       	ror	r22
    2224:	ba 95       	dec	r27
    2226:	c9 f7       	brne	.-14     	; 0x221a <__ultoa_invert+0x86>
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	61 05       	cpc	r22, r1
    222c:	71 05       	cpc	r23, r1
    222e:	08 95       	ret
    2230:	9b 01       	movw	r18, r22
    2232:	ac 01       	movw	r20, r24
    2234:	0a 2e       	mov	r0, r26
    2236:	06 94       	lsr	r0
    2238:	57 95       	ror	r21
    223a:	47 95       	ror	r20
    223c:	37 95       	ror	r19
    223e:	27 95       	ror	r18
    2240:	ba 95       	dec	r27
    2242:	c9 f7       	brne	.-14     	; 0x2236 <__ultoa_invert+0xa2>
    2244:	62 0f       	add	r22, r18
    2246:	73 1f       	adc	r23, r19
    2248:	84 1f       	adc	r24, r20
    224a:	95 1f       	adc	r25, r21
    224c:	a0 1d       	adc	r26, r0
    224e:	08 95       	ret

00002250 <__prologue_saves__>:
    2250:	2f 92       	push	r2
    2252:	3f 92       	push	r3
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	ca 1b       	sub	r28, r26
    227a:	db 0b       	sbc	r29, r27
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	09 94       	ijmp

00002288 <__epilogue_restores__>:
    2288:	2a 88       	ldd	r2, Y+18	; 0x12
    228a:	39 88       	ldd	r3, Y+17	; 0x11
    228c:	48 88       	ldd	r4, Y+16	; 0x10
    228e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2290:	6e 84       	ldd	r6, Y+14	; 0x0e
    2292:	7d 84       	ldd	r7, Y+13	; 0x0d
    2294:	8c 84       	ldd	r8, Y+12	; 0x0c
    2296:	9b 84       	ldd	r9, Y+11	; 0x0b
    2298:	aa 84       	ldd	r10, Y+10	; 0x0a
    229a:	b9 84       	ldd	r11, Y+9	; 0x09
    229c:	c8 84       	ldd	r12, Y+8	; 0x08
    229e:	df 80       	ldd	r13, Y+7	; 0x07
    22a0:	ee 80       	ldd	r14, Y+6	; 0x06
    22a2:	fd 80       	ldd	r15, Y+5	; 0x05
    22a4:	0c 81       	ldd	r16, Y+4	; 0x04
    22a6:	1b 81       	ldd	r17, Y+3	; 0x03
    22a8:	aa 81       	ldd	r26, Y+2	; 0x02
    22aa:	b9 81       	ldd	r27, Y+1	; 0x01
    22ac:	ce 0f       	add	r28, r30
    22ae:	d1 1d       	adc	r29, r1
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	ed 01       	movw	r28, r26
    22bc:	08 95       	ret

000022be <_exit>:
    22be:	f8 94       	cli

000022c0 <__stop_program>:
    22c0:	ff cf       	rjmp	.-2      	; 0x22c0 <__stop_program>
